<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>oc语法记录相关</title>
    <url>/2021/05/07/IOS/ios/</url>
    <content><![CDATA[<h5 id="1-nil-和NULL"><a href="#1-nil-和NULL" class="headerlink" title="1.nil 和NULL"></a>1.nil 和NULL</h5><blockquote>
<p>引用类型用 oc的类指针 nil</p>
</blockquote>
<blockquote>
<p>基本类型用 NULL</p>
</blockquote>
<blockquote>
<p>本质上是一样的 ，都是宏定义 ，0</p>
</blockquote>
<blockquote>
<p>Person *p = nil 代表不指向任何对象</p>
</blockquote>
<h5 id="2-分组导航标记"><a href="#2-分组导航标记" class="headerlink" title="2.分组导航标记"></a>2.分组导航标记</h5><blockquote>
<p>#pragma mark 名字</p>
</blockquote>
<blockquote>
<p>#pragma mark - 产生分割线</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@interface</span> Person : NSObject</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@public</span></span><br><span class="line">    NSString *_name;</span><br><span class="line">    <span class="keyword">int</span> _age;</span><br><span class="line">    <span class="keyword">float</span> _height;</span><br><span class="line">&#125;</span><br><span class="line">-(<span class="keyword">void</span>) sayMi:(NSString *)json;</span><br><span class="line"><span class="meta">@end</span></span><br><span class="line"></span><br><span class="line">#pragma mark - Person</span><br><span class="line"><span class="meta">@implementation</span> Person</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)sayMi:(NSString *)json&#123;</span><br><span class="line">    NSLog(@<span class="string">&quot;name = %@,json= %@&quot;</span>,_name,json);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@end</span></span><br><span class="line"></span><br><span class="line">#pragma mark  - 实现</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="meta">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="comment">// insert code here...</span></span><br><span class="line">        NSLog(@<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        Person *person = [Person  <span class="keyword">new</span>];</span><br><span class="line">        person-&gt;_height = <span class="number">30.0f</span>;</span><br><span class="line">        person-&gt;_name =  @<span class="string">&quot;zx shanzu&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        [person  sayMi:@<span class="string">&quot;&#123;\&quot;price\&quot;:\&quot;1000\&quot;&#125;&quot;</span>];</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="函数和方法"><a href="#函数和方法" class="headerlink" title="函数和方法"></a>函数和方法</h5><blockquote>
<p>方法定义@interface  实现在@implement</p>
</blockquote>
<blockquote>
<p>函数 调用不 一样   可以写在  类 中除了 大括号<br>类的声明和 实现 都要有， 声明要在前  实现 可以放在使用类的后面 </p>
</blockquote>
<h5 id="ios-性能优化"><a href="#ios-性能优化" class="headerlink" title="ios 性能优化"></a>ios 性能优化</h5><p><a href="https://www.jianshu.com/p/a9c86e7df095">https://www.jianshu.com/p/a9c86e7df095</a><br>模拟内存警告</p>
]]></content>
      <categories>
        <category>IOS</category>
      </categories>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iosThread</title>
    <url>/2021/10/20/IOS/iosThread/</url>
    <content><![CDATA[<h4 id="Unity-UE-调用iOS接口-crash"><a href="#Unity-UE-调用iOS接口-crash" class="headerlink" title="Unity /UE 调用iOS接口 crash"></a>Unity /UE 调用iOS接口 crash</h4><pre><code>带UI的接口 要回到主线程</code></pre>
<h4 id="Unity-iOS包切后台-没有回调"><a href="#Unity-iOS包切后台-没有回调" class="headerlink" title="Unity iOS包切后台 没有回调"></a>Unity iOS包切后台 没有回调</h4><pre><code>回调被替换或者重置  查看代码</code></pre>
]]></content>
      <categories>
        <category>IOS</category>
      </categories>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>MonoBehaviourTree</title>
    <url>/2021/10/20/Unity/BehaviourTree/</url>
    <content><![CDATA[<h4 id="Unity-AI-行为树"><a href="#Unity-AI-行为树" class="headerlink" title="Unity AI 行为树"></a>Unity AI 行为树</h4><pre><code>遍历从左边 中 右  左边优先级最高，右边最低</code></pre>
<h4 id="角色-吃饭-睡觉-地震"><a href="#角色-吃饭-睡觉-地震" class="headerlink" title="角色 吃饭 睡觉 地震"></a>角色 吃饭 睡觉 地震</h4><pre><code>地震 xxx　会中断 吃饭睡觉
吃饭 xxx  会中断 睡觉
睡觉 优先级最低</code></pre>
<h4 id="Tools-简单操作"><a href="#Tools-简单操作" class="headerlink" title="Tools 简单操作"></a>Tools 简单操作</h4><p><img src="BehaviourTree/1.png"></p>
<blockquote>
<p>Eat action</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> BehaviorDesigner.Runtime;</span><br><span class="line"><span class="keyword">using</span> BehaviorDesigner.Runtime.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Eat</span> : <span class="title">Action</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 变量：食物。会在行为树编辑器中赋值</span></span><br><span class="line">    <span class="keyword">public</span> SharedString food;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> TaskStatus <span class="title">OnUpdate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;eat: &quot;</span> + food.GetValue());</span><br><span class="line">        <span class="keyword">return</span> TaskStatus.Success;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Sleep action</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Sleep1</span> : <span class="title">Action</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//行为树中赋值</span></span><br><span class="line">    <span class="keyword">public</span> SharedFloat sleepTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> m_sleepTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> m_startTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnStart</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">base</span>.OnStart();</span><br><span class="line">        m_startTime = Time.time;</span><br><span class="line">        m_sleepTime = (<span class="built_in">float</span>)sleepTime.GetValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> TaskStatus <span class="title">OnUpdate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (m_startTime +m_sleepTime &lt;Time.time)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;Time OK ----&gt;&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> TaskStatus.Success;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> TaskStatus.Running;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>新建Empty GameObject , 新建C# 脚本 ，挂在空物体上</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RunCustom</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> BehaviorTree m_bt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//获取行为树</span></span><br><span class="line">        m_bt = gameObject.AddComponent&lt;BehaviorTree&gt;();</span><br><span class="line">        <span class="comment">//加载树资源</span></span><br><span class="line">        <span class="keyword">var</span> extBt = Resources.Load&lt;ExternalBehaviorTree&gt;(<span class="string">&quot;Behavior1&quot;</span>);</span><br><span class="line">        m_bt.StartWhenEnabled = <span class="literal">false</span>;</span><br><span class="line">        m_bt.RestartWhenComplete = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//设置行为树 (UI面板已经赋值)</span></span><br><span class="line">        m_bt.ExternalBehavior = extBt;</span><br><span class="line">        m_bt.EnableBehavior();</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 行为树左边节点 优先 右边</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 地震中断吃饭睡觉</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>  吃饭中断睡觉</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>  </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.A))</span><br><span class="line">        &#123;</span><br><span class="line">            m_bt.SetVariableValue(<span class="string">&quot;eatFood&quot;</span>,<span class="string">&quot;apple code&quot;</span>); </span><br><span class="line">            m_bt.SendEvent(<span class="string">&quot;Eat1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.S))</span><br><span class="line">        &#123;</span><br><span class="line">            m_bt.SetVariableValue(<span class="string">&quot;sleepTime1&quot;</span>, <span class="number">1000f</span>);</span><br><span class="line">            m_bt.SendEvent(<span class="string">&quot;Sleep1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.D))</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">            m_bt.SendEvent(<span class="string">&quot;EarthQuake&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        transform.Rotate(Vector3.up*Time.deltaTime*<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>MonoBehaviourTree</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity加载AB包</title>
    <url>/2021/02/01/Unity/Unity-AssetBundle/</url>
    <content><![CDATA[<h4 id="AssetBundle"><a href="#AssetBundle" class="headerlink" title="AssetBundle"></a>AssetBundle</h4><blockquote>
<p>加载AB包</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">AssetBundle ab = AssetBundle.LoadFromFile(Application.streamingAssetsPath + <span class="string">&quot;/&quot;</span>+ <span class="string">&quot;model&quot;</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>加载AB包资源 <strong>用泛型 或者 typeof 类型</strong><br><strong>AB包不能重复加载否则报错</strong></p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">GameObject gameobject =  ab.LoadAsset&lt;GameObject&gt;(<span class="string">&quot;cube&quot;</span>);</span><br><span class="line">GameObject gameobject2 = ab.LoadAsset(<span class="string">&quot;cube&quot;</span>,<span class="keyword">typeof</span>(GameObject)) <span class="keyword">as</span> GameObject;</span><br><span class="line">Instantiate(gameobject);</span><br><span class="line"><span class="comment">// false 卸载ab 包但 不卸载资源</span></span><br><span class="line">ab.unpack(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>利用主包获取依赖信息</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">  AssetBundle abMain = AssetBundle.LoadFromFile(Application.streamingAssetsPath + <span class="string">&quot;/&quot;</span>+ <span class="string">&quot;PC&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        AssetBundleManifest asBundleManifest = abMain.LoadAsset&lt;AssetBundleManifest&gt;(<span class="string">&quot;AssetBundleManifest&quot;</span>);</span><br><span class="line"><span class="comment">//加载主包中的固定文件</span></span><br><span class="line"><span class="built_in">string</span>[] strs = asBundleManifest.GetAllDependencies(<span class="string">&quot;model&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; strs.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(strs[i]);</span><br><span class="line">            AssetBundle.LoadFromFile(Application.streamingAssetsPath+<span class="string">&quot;/&quot;</span>+strs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<a id="more"></a>

]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>AssetBundle</tag>
      </tags>
  </entry>
  <entry>
    <title>Csharp——lua记录</title>
    <url>/2021/01/22/Unity/Csharp/</url>
    <content><![CDATA[<h5 id="记录一下"><a href="#记录一下" class="headerlink" title="记录一下"></a>记录一下</h5><blockquote>
<p>Lua 内部方法调用 使用 self:Funct()</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> Luck = &#123;&#125;</span><br><span class="line"><span class="built_in">self</span>.arrayList  = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">Luck:uiShow</span><span class="params">()</span></span></span><br><span class="line">   <span class="built_in">self</span>.arrayList  = &#123;<span class="string">&quot;key&quot;</span>,<span class="string">&quot;key2&quot;</span>&#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ui show&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Luck:Close</span><span class="params">()</span></span></span><br><span class="line">   <span class="comment">--调用的地方 </span></span><br><span class="line">   <span class="built_in">self</span>:uiShow()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Luck</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<blockquote>
<p>ui 判断为空</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">true</span> <span class="keyword">then</span></span><br><span class="line">      <span class="comment">--显示</span></span><br><span class="line">      num.gameobject:SetActive(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">      <span class="comment">--隐藏</span></span><br><span class="line">      num.gameobject:SetActive(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="GameOject-静态方法"><a href="#GameOject-静态方法" class="headerlink" title="GameOject 静态方法"></a>GameOject 静态方法</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">GameObject 基类 是 Object ,命名空间 <span class="keyword">namespace</span>  <span class="title">UnityEngine</span>&#123;&#125;</span><br><span class="line">游戏内都是GameObject</span><br><span class="line">Object 命名空间 <span class="keyword">namespace</span> <span class="title">System</span>&#123;&#125; csharp自带的</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>UnityBase</title>
    <url>/2021/10/14/Unity/UnityBase/</url>
    <content><![CDATA[<h4 id="1-Unity基础-ref-和-out"><a href="#1-Unity基础-ref-和-out" class="headerlink" title="1.Unity基础  ref 和 out"></a>1.Unity基础  ref 和 out</h4><p>影响外部传入，让其被修改</p>
<p>ref: 变量先初始化</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ChagneValueRef</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">int</span> a</span>)</span>&#123;</span><br><span class="line">  a = <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> b = <span class="number">99</span>;</span><br><span class="line">ChagneValueRef(<span class="keyword">ref</span> b);</span><br><span class="line">Debug.Log(b);<span class="comment">//b = 9</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>out: 方法里初始化</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ChagneValueOut</span>(<span class="params"><span class="keyword">out</span> <span class="built_in">int</span> <span class="keyword">value</span></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">value</span> = <span class="number">88</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> cc ;</span><br><span class="line">ChangeValueOut(<span class="keyword">out</span> cc);</span><br><span class="line">Debug.Log(cc);<span class="comment">//b = 88</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="2-冒泡排序优化"><a href="#2-冒泡排序优化" class="headerlink" title="2.冒泡排序优化"></a>2.冒泡排序优化</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>[] arrs = &#123;<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="built_in">bool</span> isShot = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> m =<span class="number">0</span>;m &lt; arrs.Length;m++)&#123;</span><br><span class="line">    isShot = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> n =<span class="number">0</span>;n&lt;arrs.Length<span class="number">-1</span>-m;n++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arrs[n]&gt; arrs[n+<span class="number">1</span>])&#123;</span><br><span class="line">            isShot = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> temp =  arrs[n];</span><br><span class="line">            arrs[n] = arrs[n+<span class="number">1</span>];</span><br><span class="line">            arrs[n+<span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//正常情况 每次都交换，如果达到 没有进入交换 就不需要了</span></span><br><span class="line">    <span class="keyword">if</span>(!isShot)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>UnityBase</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity游戏开发记录</title>
    <url>/2021/01/29/Unity/Unity-Game/</url>
    <content><![CDATA[<h4 id="Unity-热更中断"><a href="#Unity-热更中断" class="headerlink" title="Unity 热更中断"></a>Unity 热更中断</h4><blockquote>
<p>热更包10MB，下载到大概2MB中端</p>
</blockquote>
<blockquote>
<p>中断发现无效文件 FileState.Error&gt;0 后面对比文件MD5  不一致文件 可以正常下载</p>
</blockquote>
<blockquote>
<p>下载 逻辑 在version/18.60.0 目录没有放最新的 MAX_VERSION_0.json  和FileVersionList.txt  所以出错，对比旧的资源 发现无效。</p>
</blockquote>
<h4 id="Unitiy-Button点击无响应"><a href="#Unitiy-Button点击无响应" class="headerlink" title="Unitiy Button点击无响应"></a>Unitiy Button点击无响应</h4><blockquote>
<p>有遮罩 比如Image</p>
</blockquote>
<blockquote>
<p>按钮没有实例化</p>
</blockquote>
<blockquote>
<p>lua方法用错</p>
</blockquote>
<a id="more"></a>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">self</span>.mainUI.CloseBtn:GetCompoment(<span class="string">&quot;Button&quot;</span>).onClick:AddListener(<span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;打印&quot;</span>)</span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="ScreenSpace-Camera"><a href="#ScreenSpace-Camera" class="headerlink" title="ScreenSpace-Camera"></a>ScreenSpace-Camera</h4><blockquote>
<p>首先还是Order In Layer，还是一样，数值越大，越在上层</p>
</blockquote>
<blockquote>
<p>UGUI 拖动时候锚点 改变 水平滑动LoopScrollRect 缓存池创建卡顿</p>
</blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>原因 创建Item的时候位置改变误以为卡顿，<br>解决：改变 content 锚点</p>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<p>UGUI 导出相同文件  导致 prefab 相同 图片missing<br>解决：回退之前的版本,相同文件不替换</p>
</blockquote>
<blockquote>
<p>scrollView 里面内容不能滑动，content高度设置的不正确<br> 搭配contentSizeFitter（自动算高）和VerticalLayoutGroup(竖直方向)<br>  controle size 控制子物体大小<br>  force Expand 控制子物体填充父容器空间</p>
</blockquote>
<blockquote>
<p>自适应 可以通有HorizontalLayoutGroup实现</p>
</blockquote>
<blockquote>
<p>通一个活动配置多个，需要通过act_id,config_id来匹配一下</p>
</blockquote>
<h4 id="Unity-Prefab-和-Scene区别"><a href="#Unity-Prefab-和-Scene区别" class="headerlink" title="Unity Prefab 和 Scene区别"></a>Unity Prefab 和 Scene区别</h4><blockquote>
<p>Prefab可以被看做是对scene（场景）中game object（游戏物体）的描述文件，可以被储存在Assets文件夹内，以方便在其他scene中重复利用。Prefab实际上并不包含任何模型、贴图等真正的素材文件，只是一个虚拟的“参考”。</p>
</blockquote>
<blockquote>
<p>我们可以把prefab当做一种特殊的“资源素材”，在场景中引用prefab，相当于按照这个prefab所描述的规范引用其涉及到的“真实素材”。如果我们不小心删除掉了这些“真实素材”，那么prefab就失去了作用。</p>
</blockquote>
<h4 id="Unity-Canvas"><a href="#Unity-Canvas" class="headerlink" title="Unity Canvas"></a>Unity Canvas</h4><blockquote>
<p>Render Mode<br>1.ScreenSpace-overlay<br>  Canvas 覆盖屏幕，且永远覆盖在其它元素的上层，也就是说 UI 会遮挡场景中的其它元素。<br>当 RenderMode 为 Screen Space - Overlay时，Canvas的其它参数包括：</p>
<blockquote>
<p>Pixel Perfect：UI元素精确到像素对齐，边缘更清晰，但是在UI调整和适配时会有更大的计算量（个人理解）</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>Sort Order：Canvas 的深度。多个 存在多个Canvas时，Sort Order 值更大的Canvas会遮盖住 Sort Order 值小的 Canvas</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>注：多个 Canvas 深度取值相等时，Hierarchy 视图中后面的 Canvas 显示在下，这一点与 UI 元素（如Image的规则相反）</p>
</blockquote>
</blockquote>
<blockquote>
<p>2.Screen Space - Camera 模式</p>
</blockquote>
<blockquote>
<blockquote>
<p>和 Overlay 模式相仿，Canvas覆盖整个屏幕空间画布也是填满整个屏幕空间。不同之处在于，Canvas 被放置于指定摄像机的前方。 </p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>(1) 必须在摄像机的远近平面之间才会被渲染</p>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>(2) 即使摄像机是 Perspective 模式，Canvas 距离摄像机的远近依然不会影响其显示大小</p>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>(3) 其它3元素可以和 Canvas 产生遮挡关系，距离摄像机更近的元素会遮盖住 Canvas 上面的 UI</p>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>(4) 摄像机的缩放/平移/旋转，以及 fov 的变化，不会影响 Canvas 显示结果，Canvas 永远是放置在距离摄像机视口一定距离的地方，且与摄像机水平视线垂直</p>
</blockquote>
</blockquote>
</blockquote>
<pre><code>  Pixel Perfect ：同 Overlay 模式含义

  Render Camera ：指定的用来渲染 Canvas 的摄像机

  Plane Distance：Canvas 平面距离摄像机的距离

  Sorting Layer：指示 Canvas 的深度，可以手动添加。当存在多个模式为 Screen Space 的 Canvas 时，Sorting Layer 决定了显示的优先级。

  Order in Layer：多个 Canvas 具有相同的 Sorting Layer 时，根据 Order in Layer 来确定显示优先级。</code></pre>
<blockquote>
<p>3.World Space 模式</p>
</blockquote>
<p>  此种模式下，Canvas 与场景中其它3D元素没有区别</p>
<blockquote>
<p>4.总结<br> 不同模式的 Canvas之间，Screen Space - Overlay 的 Canvas 永远显示在最前面，Screen Space - Camera 和 World 的显示关系决定于 World Canvas 距离摄像机的位置以及 Screen Space - Camera Canvas 的 Plane Distance</p>
</blockquote>
<p>相同的 Screen Space - Overlay Canvas ：显示优先级由 Sort Order 确定</p>
<p>相同的 Screen Space - Camera：显示优先级由 Sorting Layer 和 Order in Layer 确定</p>
<h4 id="Rx-via-UniRx"><a href="#Rx-via-UniRx" class="headerlink" title="Rx via UniRx"></a>Rx via UniRx</h4><p>   <a href="%22https://zhuanlan.zhihu.com/p/35189325%22">Rx via UniRx</a></p>
<h4 id="Unity-实用技巧"><a href="#Unity-实用技巧" class="headerlink" title="Unity 实用技巧"></a>Unity 实用技巧</h4><blockquote>
<ol>
<li>Pixel Perfect Camera</li>
</ol>
</blockquote>
<blockquote>
<p>在摄像机上挂载Pixel Perfect Camera组件能够使2D像素风格的游戏画面更加整洁清晰。此组件需要使用Package Manager安装2D Pixel Perfect包。</p>
</blockquote>
<blockquote>
<ol start="2">
<li>以Y轴为依据进行Sprite排序</li>
</ol>
</blockquote>
<blockquote>
<p>对于2D游戏，将Transparency Sort Mode (Edit &gt; Project Settings &gt; Graphics ) 设置为Custom Axis，然后设置Transparency Sort Axis，场景中的Sprite可以根据Y轴进行排序。如下图所示，当设置为（0,1,0）时，Y坐标相对较大的Sprite排在Y坐标相对较小的Sprite之下，当设置为(0,-1,0)时，则相反。</p>
</blockquote>
<blockquote>
<ol start="3">
<li>延迟销毁游戏对象</li>
</ol>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Destroy(gameObject,<span class="number">2f</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<ol start="4">
<li>快速新建基于自定义Shader的材质</li>
</ol>
</blockquote>
<p>在Project面板中选中一个自定义Shader，右键选择新建材质（Create&gt;Material），则材质默认使用的着色器为z之前选择的Shader，同时材质名称为Shader的名称。</p>
<!-- 
https://www.cnblogs.com/unity3ds/p/11047784.html
-->
<blockquote>
<ol start="5">
<li>脚本不挂载到游戏对象执行</li>
</ol>
</blockquote>
<p>通常情况下，新建的脚本要挂载到游戏对象上才能运行，如果在脚本中的方法前使用[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]，可以不用挂载到任何游戏对象上即可在程序运行时执行此方法，方便在在程序初始化前做一些额外的初始化工作。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line">  [<span class="meta">RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DoSomething</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Debug.Log(<span class="string">&quot;It&#x27;s the start of the game&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ol start="7">
<li>保存程序运行时组件属性的改变</li>
</ol>
</blockquote>
<p>在程序运行时改变组件的各属性值，当停止运行后，这些改变将重置为编辑状态下的数值，。程序运行时改变了组件的属性值，可以点击组件右上角的齿轮按钮，选择Copy Component命令，停止播放后，在相同的组件上，执行Paste Component Value，从而能够保存在运行时对该组件做出的改变。</p>
<ol start="8">
<li>获取一个随机布尔值</li>
</ol>
<p>我们知道Random.value能够返回0~1之间的随机数，所以让此随机数与0.5f进行比较，就能够获取一个随机的布尔值True或者False，如下代码所示：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bool</span> trueOrFalse = (Random.<span class="keyword">value</span> &gt; <span class="number">0.5f</span>);</span><br></pre></td></tr></table></figure>
<ol start="9">
<li>使用Struct代替Class<br>如果数据结构仅保存了有限的几个数值变量，可以考虑使用struct代替Class，因为Class实例由垃圾回收机制来保证内存的回收处理;而struct变量使用完后立即自动解除内存分配。</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> :<span class="title">MonoBehavor</span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">struct</span> Data&#123;</span><br><span class="line">     <span class="keyword">public</span>  <span class="built_in">int</span> age;</span><br><span class="line">     <span class="keyword">public</span>  <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">start</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      Data da = <span class="keyword">new</span> Data()&#123;</span><br><span class="line">         age = <span class="number">23</span>,name=<span class="string">&quot;cai&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      print(da.age);</span><br><span class="line">      print(da.name);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="10">
<li>Visual Studio 自动语句补全</li>
</ol>
<p>当使用Visual Studio进行代码编写时，可双击Tab键来辅助完成像if、for、switch等语句的补全。</p>
<blockquote>
<ol start="11">
<li>协程嵌套</li>
</ol>
</blockquote>
<p>在一个协程里开启另外一个协程，可使用以下方法</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StartCoroutine(FirstCo());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">IEnumerator <span class="title">FirstCo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="title">StartCoroutine</span>(<span class="params">SecondCo(</span>))</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">IEnumerator <span class="title">SecondCo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>12.脚本变量参与动画制作<br><img src="Unity-Game/12.png"></p>
<p>13/14. Animation窗口快捷键</p>
<p>在Animation窗口中，按下Ctrl+A，所有关键帧将集中显示在窗口中；选择某些关键帧，按下F键，可将它们居中显示在窗口中；按下C键，可以在曲线视图和关键帧视图间切换；按下K键添加关键帧。</p>
<p>18.在Inspector面板中显示私有变量<br>将私有变量标记为SerializeField，可在Inspector面板中将其显示。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">SerializeField</span>]</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> myNumber = <span class="number">20</span>;</span><br></pre></td></tr></table></figure>
<ol start="19">
<li>在Inspector面板中隐藏公有变量<br>如果不希望在Inspector面板中显示公有变量，可将其标记为[HideInInspector]。<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">HideInInspector</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> myNumber = <span class="number">20</span>;</span><br></pre></td></tr></table></figure></li>
<li>MenuItem属性<br>要在编辑器的菜单栏中选择执行编写的函数，可在函数前添加MenuItem属性，如下代码所示：<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">MenuItem(<span class="meta-string">&quot;MyMenu/Do Something&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DoSomething</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>ContextMenu<br>使用ContextMenu属性标记函数，能够在脚本所在的上下文菜单中调用，如下代码所示：<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">ContextMenu(<span class="meta-string">&quot;Do Something&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DoSomething</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="Unity-Game/38.png"><h4 id="Unity-程序框架"><a href="#Unity-程序框架" class="headerlink" title="Unity 程序框架"></a>Unity 程序框架</h4></li>
</ol>
<blockquote>
<p>事件中心<br>UI管理器<br>场景管理器<br>资源管理器（加载资源）<br>音乐管理器<br>MonoMgr</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MonoMgr</span>&#123;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>缓冲池</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PoolManager</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>UnityDevelopLog</tag>
      </tags>
  </entry>
  <entry>
    <title>Steam接入记录</title>
    <url>/2021/01/26/Unity/steam/</url>
    <content><![CDATA[<h5 id="Steam-for-Mac"><a href="#Steam-for-Mac" class="headerlink" title="Steam for Mac"></a>Steam for Mac</h5><p>SDK <strong><a href="http://steamworks.github.io/installation">http://steamworks.github.io/installation</a></strong></p>
<blockquote>
<p>steam_appid,在asset同级目录<br>init 初始化</p>
</blockquote>
<a id="more"></a>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Steam</tag>
      </tags>
  </entry>
  <entry>
    <title>UnityPluginForMac</title>
    <url>/2019/06/09/Unity/UnityPluginForMac/</url>
    <content><![CDATA[<p>因为需要做Window和 Mac 插件，且iOS和Android 用 UnitySendMessage，所以为了统一 pc端也用次回调。这里做下记录方便改进。</p>
<p>如果你是OSX系统，那么Unity可以在编辑器里面直接使用OSX插件。OSX插件是bundle文件，放在Assets/Plugins目录下。</p>
<p>跟iOS插件差不多，不过OSX没有UnitySendMessage函数，所以要用另外一种途经来实现OC -&gt; C#</p>
<p>方法就是用C语言的函数指针。</p>
<p>首先在头文件声明一个函数指针和声明两个函数</p>
<a id="more"></a>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数指针</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*UnitySendMessage)</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* objectName, <span class="keyword">const</span> <span class="keyword">char</span>* methodName, <span class="keyword">const</span> <span class="keyword">char</span>* msg)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !TARGET_OS_IPHONE</span></span><br><span class="line">    <span class="comment">//C#调用的，参数是一个回调函数。</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RegisterCallback</span><span class="params">(UnitySendMessage callbackMethod)</span></span>;</span><br><span class="line">    <span class="comment">//调用回调函数的函数。</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">CallbackToUnity</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* msg)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着在mm文件里面实现</p>
<figure class="highlight mm"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !TARGET_OS_IPHONE</span></span><br><span class="line"><span class="keyword">static</span> UnitySendMessage lastCallback = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">void</span> RegisterCallback(UnitySendMessage callbackMethod)</span><br><span class="line">&#123;</span><br><span class="line">    lastCallback = callbackMethod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> CallbackToUnity(<span class="keyword">const</span> <span class="keyword">char</span>* msg)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (lastCallback != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        lastCallback(sUnityGameObjectName, sUnityMethodName, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//mm 中声明改方法，cshap通过dllimport调用传递参数</span></span><br><span class="line">    <span class="keyword">void</span> Demo_nativeRegister(<span class="keyword">const</span> <span class="keyword">char</span>* unityGameObjectName, <span class="keyword">const</span> <span class="keyword">char</span>* unityMethodName);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>C#这边加上声明：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">region</span> Mac PC 回调</span></span><br><span class="line">       <span class="meta">#<span class="meta-keyword">if</span> UNITY_EDITOR_OSX || UNITY_STANDALONE_OSX</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">UnityCallbackDelegate</span>(<span class="params">IntPtr objName, IntPtr methodName, IntPtr msg</span>)</span>;</span><br><span class="line"></span><br><span class="line">               [<span class="meta">DllImport(GiantSDKUtil.GIANTSDK_PLATFORM)</span>]</span><br><span class="line">               <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">RegisterCallback</span>(<span class="params">[MarshalAs(UnmanagedType.FunctionPtr</span>)] UnityCallbackDelegate callback)</span>;</span><br><span class="line">       <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">       <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br></pre></td></tr></table></figure>
<p>然后就是设置回调函数，在Start函数或者自己需求的任意位置</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统一注册和接收</span></span><br><span class="line">  Demo_nativeRegister(<span class="keyword">this</span>.gameObject.name, functionName);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> UNITY_EDITOR_OSX || UNITY_STANDALONE_OSX</span></span><br><span class="line">            RegisterCallback(<span class="built_in">delegate</span> (IntPtr objName, IntPtr methodName, IntPtr msg) &#123;</span><br><span class="line">                <span class="built_in">string</span> objN = Marshal.PtrToStringAuto(objName);</span><br><span class="line">                <span class="built_in">string</span> methodN = Marshal.PtrToStringAuto(methodName);</span><br><span class="line">                <span class="built_in">string</span> message = Marshal.PtrToStringAuto(msg);</span><br><span class="line">                GameObject founded = GameObject.Find(objN);</span><br><span class="line">                <span class="keyword">if</span> (founded != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    founded.SendMessage(methodN, message);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Debug.LogError(<span class="string">&quot;&quot;</span> + objN + <span class="string">&quot; Not Found!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>IntPtr是C#里面的指针，Marshal类用来在托管对象和非托管对象相互转换，像上面的PtrToStringAuto把一个非托管的C指针转换成C#的托管对象string。</p>
<p>参考：<br><br><br><a href="http://skyhacker2.github.io/blog/?articles/U3D/2016-08-15-%E7%BB%99U3D%E7%BC%96%E5%86%99OSX%E6%8F%92%E4%BB%B6.md#">UnityPluginForMac</a></p>
<p><a href="https://docs.unity3d.com/Manual/PluginInspector.html">Plugins</a></p>
<p><a href="https://docs.unity3d.com/Manual/PluginsForIOS.html">PluginsForIOS</a></p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>UnityPlugin</tag>
      </tags>
  </entry>
  <entry>
    <title>Java想到的问题</title>
    <url>/2019/05/14/JavaBase/Java/</url>
    <content><![CDATA[<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><h3 id="hash碰撞-解决方案"><a href="#hash碰撞-解决方案" class="headerlink" title="hash碰撞 解决方案"></a>hash碰撞 解决方案</h3><blockquote>
<p>比较常用的算法是链地址法和开放地址法</p>
</blockquote>
<h3 id="java-位运算"><a href="#java-位运算" class="headerlink" title="java 位运算"></a>java 位运算</h3><blockquote>
<p>1 左移(&lt;&lt;)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">//将5左移2位：</span></span><br><span class="line">    System.out.println(<span class="number">5</span>&lt;&lt;<span class="number">2</span>);<span class="comment">//运行结果是20</span></span><br><span class="line"></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0101</span>           然后左移<span class="number">2</span>位后，低位补<span class="number">0</span>：</span><br><span class="line"></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">01</span> <span class="string">&quot;00&quot;</span>           换算成<span class="number">10</span>进制为<span class="number">20</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<blockquote>
<p>2 右移（&gt;&gt;）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">//将5左移2位：</span></span><br><span class="line">    System.out.println(<span class="number">5</span>&lt;&lt;<span class="number">2</span>);<span class="comment">//运行结果是20</span></span><br><span class="line"></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0101</span>           然后右移<span class="number">2</span>位后，高位补<span class="number">0</span>：</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;00&quot;</span><span class="number">00</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">00000</span>  <span class="number">0001</span>           换算成<span class="number">10</span>进制为<span class="number">1</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>3 无符号右移( &gt;&gt;&gt; )</p>
</blockquote>
<p>1.我们知道在Java中int类型占32位，可以表示一个正数，也可以表示一个负数。正数换算成二进制后的最高位为0，负数的二进制最高为为1</p>
<blockquote>
<p>4 位与( &amp; )</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">//将5左移2位：</span></span><br><span class="line">    System.out.println( <span class="number">5</span>&amp;<span class="number">3</span> );<span class="comment">//运行结果是20</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>转换为二进制：<span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0101</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>转换为二进制：<span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0011</span></span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>转换为二进制：<span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<blockquote>
<p>5 位或( | )</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">//将5左移2位：</span></span><br><span class="line">    System.out.println( <span class="number">5</span>|<span class="number">3</span> );<span class="comment">//运行结果是20</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>转换为二进制：<span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0101</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>转换为二进制：<span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0011</span></span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>转换为二进制：<span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0111</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<blockquote>
<p>6 位异或( ^ )</p>
</blockquote>
<blockquote>
<p>Java异或是Java二进制的一种运算规则。两个相同的操作位相同则为0，不同则为1。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">//将5左移2位：</span></span><br><span class="line">    System.out.println( <span class="number">5</span>^<span class="number">3</span> );<span class="comment">//运行结果是20</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>转换为二进制：<span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0101</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>转换为二进制：<span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0011</span></span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>转换为二进制：<span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0110</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<blockquote>
<p>7 位非( ~ )           位非是一元操作符</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">//将5左移2位：</span></span><br><span class="line">    System.out.println( ~<span class="number">5</span> );<span class="comment">//运行结果是20</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>转换为二进制：<span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0101</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">-------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">-<span class="number">6</span>转换为二进制：-<span class="number">6</span>转换为二进制：<span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1110</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<blockquote>
<p>8 负数计算（负数转二进制规律：</p>
</blockquote>
<p>1、取负数的绝对值的原码；</p>
<p>2、计算原码的反码；</p>
<p>3、对反码加一，获取补码。</p>
<p>）</p>
<blockquote>
<p>9 概念如下<br>首先我们要对原码、反码和补码有个了解：<br>1、所谓原码就是二进制定点表示法，即最高位为符号位，“0”表示正，“1”表示负，其余位表示数值的大小。<br>2、反码表示法规定：正数的反码与其原码相同；负数的反码是对其原码逐位取反，但符号位除外。<br>原码10010= 反码11101 （10010，1为符号码，故为负）<br>(11101) 二进制= -13 十进制<br>3、补码表示法规定：正数的补码与其原码相同；负数的补码是在其反码的末位加1</p>
</blockquote>
<h3 id="java-内部类"><a href="#java-内部类" class="headerlink" title="java 内部类"></a>java 内部类</h3><p> 结构清晰，可读性好，代码好维护</p>
<blockquote>
<p>内部类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User Outer&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UInner</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;UInner UInner&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用测试</span></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line"><span class="comment">//依赖外部实例化</span></span><br><span class="line">User.UInner iner = user.<span class="function">new <span class="title">UInner</span><span class="params">()</span></span>;</span><br><span class="line">inter.display();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>匿名内部类（没有类名，常见于接口）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ILoad</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadMap</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//正常情况</span></span><br><span class="line"><span class="comment">// public class User implements ILoad&#123;</span></span><br><span class="line"><span class="comment">//     @override</span></span><br><span class="line"><span class="comment">//     public void loadMap()&#123;</span></span><br><span class="line"><span class="comment">//         System.out.println(&quot;User Outer&quot;);</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//调用测试</span></span><br><span class="line"></span><br><span class="line">ILoad iner = <span class="keyword">new</span> ILoad()&#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;loadMap&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">iner.loadMap();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>静态内部类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User Outer&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UInner</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;UInner UInner&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用测试</span></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line"><span class="comment">//不依赖外部实例化</span></span><br><span class="line">User.UInner iner = <span class="keyword">new</span> User.UInner();</span><br><span class="line">inter.display();</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Git相关</title>
    <url>/2021/04/16/Tools/Git/</url>
    <content><![CDATA[<h5 id="关于Merge"><a href="#关于Merge" class="headerlink" title="关于Merge"></a>关于Merge</h5><p>1&gt;从其他地方 负责了一个覆盖本地 出行 未合并报错<br><strong>您尚未结束您的合并（存在 MERGE_HEAD</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm -rf .git&#x2F;MERGE*</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>调研记录一下</title>
    <url>/2020/12/21/Tools/MoreLear/</url>
    <content><![CDATA[<h4 id="1-能力考试院"><a href="#1-能力考试院" class="headerlink" title="1.能力考试院"></a>1.能力考试院</h4><a id="more"></a>
<blockquote>
<p><a href="http://sydw.rsj.sh.gov.cn/ksybaoming/website/online/list.zul?planId=d27d2a48-657d-4b15-bbe1-9511495bf384">http://sydw.rsj.sh.gov.cn/ksybaoming/website/online/list.zul?planId=d27d2a48-657d-4b15-bbe1-9511495bf384</a> </p>
</blockquote>
<h4 id="2-查询"><a href="#2-查询" class="headerlink" title="2.查询"></a>2.查询</h4><blockquote>
<p><a href="http://sh.offcn.com/html/shiyedanwei/zhaokaoxinxi/cjcx/">http://sh.offcn.com/html/shiyedanwei/zhaokaoxinxi/cjcx/</a></p>
</blockquote>
<blockquote>
<p><a href="http://sh.offcn.com/html/2020/11/191560.html">http://sh.offcn.com/html/2020/11/191560.html</a></p>
</blockquote>
<blockquote>
<p><a href="http://sh.offcn.com/zg/shsydwdg/">http://sh.offcn.com/zg/shsydwdg/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Link</tag>
      </tags>
  </entry>
  <entry>
    <title>评论配置</title>
    <url>/2020/12/23/Tools/LeanCloud-md/</url>
    <content><![CDATA[<p><strong>Hexo的Next主题集成了多种评论系统，在这里介绍两种个人感觉还不错的评论系统：Valine和Gitment。这里介绍前者</strong></p>
<h4 id="Valine-评论系统"><a href="#Valine-评论系统" class="headerlink" title="Valine 评论系统"></a>Valine 评论系统</h4><blockquote>
<p>使用 Valine 评论系统，这款系统不需要登录便可以登录，没有后端，Next 主题最新已经支持安装。</p>
</blockquote>
<ul>
<li><p>基于 Leancloud 的系统</p>
</li>
<li><p>支持 MarkDown 语法</p>
</li>
<li><p>无后端实现，快速高效</p>
<a id="more"></a>
<h4 id="关于配置"><a href="#关于配置" class="headerlink" title="关于配置"></a>关于配置</h4><blockquote>
<p>注册 LeanCloud<br>因为 Valine 是基于 LeanCloud 系统的，所以先在 LeanCloud 中注册账号</p>
</blockquote>
</li>
<li><p><a href="https://leancloud.cn/dashboard/login.html#/signin">官网入口</a></p>
</li>
</ul>
<h4 id="关于设置-Next-主题"><a href="#关于设置-Next-主题" class="headerlink" title="关于设置 Next 主题"></a>关于设置 Next 主题</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># Valine.</span><br><span class="line"># You can get your appid and appkey from https://leancloud.cn</span><br><span class="line"># more info please open https://valine.js.org</span><br><span class="line">valine:</span><br><span class="line">  enable: true # 是否开启</span><br><span class="line">  appid:   # 上一步获取的 App ID</span><br><span class="line">  appkey:  # 上一步获取的 App Key</span><br><span class="line">  notify: false # 新留言是否需要通知 https://github.com/xCss/Valine/wiki</span><br><span class="line">  verify: false # 是否需要验证，验证比较反人类建议false关闭</span><br><span class="line">  placeholder: 请在此输入您的留言 # 默认留言框内的文字</span><br><span class="line">  avatar: mm # 默认头像</span><br><span class="line">  guest_info: nick,mail # 默认留言框的头部需要访问者输入的信息</span><br><span class="line">  pageSize: 10 # pagination size #默认单页的留言条数</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="关于评论"><a href="#关于评论" class="headerlink" title="关于评论"></a>关于评论</h4><blockquote>
<p>如果想要管理评论，进入 leancloud 官网，找到 控制台-&gt;存储-&gt;结构化数据-&gt;Commet 中进行管理</p>
</blockquote>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">fatal: 位于未检出的子模组 &#39;.deploy_git&#39;</span><br><span class="line">Maybe you can find the solution here: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;troubleshooting.html</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>直接删除 <strong>.deploy_git</strong> 即可</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo评论</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Android架构</title>
    <url>/2018/08/07/Android/Android-Jetpack/</url>
    <content><![CDATA[<h3 id="Android移动app架构设计浅谈"><a href="#Android移动app架构设计浅谈" class="headerlink" title="Android移动app架构设计浅谈"></a>Android移动app架构设计浅谈</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>架构，又名软件架构，是有关软件整体结构与组件的抽象描述，用于指导大型软件系统各个方面的设计。</p>
<h4 id="软件架构设计目标："><a href="#软件架构设计目标：" class="headerlink" title="软件架构设计目标："></a>软件架构设计目标：</h4><p>1.可靠性（Reliable）。软件架构的可靠是产品设计的前提。<br>2.安全性（Secure）。软件架构的安全性是产品可持续发展的条件。<br>3.可扩展性（Scalable）。软件架构必须能够不同的功能需求情况下，支持可扩散性。<br>4.可定制化（Customizable）。同样的一套软件，可以根据客户群的不同和市场需求的变化进行调整。<br>5.可伸缩 （Extensible）。在新技术出现的时候，一个软件架构应当允许导入新技术，从而对现有系统进行功能和性能的扩展。<br>6.可维护性（Maintainable）。软件系统的维护包括两方面，一是排除现有的错误，二是将新的软件需求反映到现有系统中去。一个易于维护的系统可以有效地降低技术支持的花费。</p>
<a id="more"></a>
<p>架构是项目形成到一定阶段的趋势。是对整个产品是否合格的有效保证。对于很多项目设计人员，在不考虑产品本身，不考虑团队，不考虑时间周期的前提下，一味的强调软件构架，是不合理的，也不利于整个产品的发展。当然，一个好的项目架构师，是很能清楚，项目在不同阶段，所需要处理的不同职责。能够最大限度的发挥能效，将产品周期，与功能模块做出最合适的匹配规划，这才是一个架构师所必须追求的。</p>
<p>以下是个人对Android移动项目架构设计简单的经验之谈。欢迎与更多的朋友交流，若有疑问，或不合理之处，都可以随时交流。</p>
<h4 id="从项目功能开始"><a href="#从项目功能开始" class="headerlink" title="从项目功能开始"></a>从项目功能开始</h4><p>每一个项目架构师，在拿到一个新项目的时候，都会不同的着重点。在项目规划风格上，都会有不同的考虑。而我个人在着手项目时，都会从功能上去着手。先了解项目整体的功能模块，区分出主体功能模块有哪些类，对不同的功能模块进行细致的划分。这是我开始的第一步。因为，只有对项目整体有个把握，才能更快的对项目有了解，才能知道怎样去合理安排项目的研发，才能更好的去安排项目进度流程，和人员的安排调度。</p>
<p>功能划分之后，接下来就是项目的实际研发阶段。这个阶段就是项目实际进展阶段了。必须要有合理的安排调度，才是保证项目的高效。比如：我们进行的大部分项目，都有网络交互的部分，也有本地功能部分，还有一些基础数据模块部分，这些功能必须要有合理的时间安排。</p>
<p>项目研发之前，几点提要说明：<br>一、团队之间统一编码规范。<br>二、需求文档统一管理。<br>三、多人协同开发，根据文档开发（一切以文档为主）。</p>
<p>项目以功能划分，功能以模块划分。在项目初期，除了产品原型可能是提前设计成形外，其它的项目文档都还未出来，产品也是有个确定功能，但是细节文档还未成形，这个时候已经是项目开始阶段，即使在有一些文档还未成形前，也可以开始项目的基础开发了。</p>
<h4 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h4><p>网络模块，数据库存储模块，数据加密模块，数据缓存模块，数据解析器，日志信息收集模块等。这些都是项目的基本模块，也可以独立于功能的模块，可以提前开发，测试。便于后期直接使用。</p>
<h4 id="移动安全机制"><a href="#移动安全机制" class="headerlink" title="移动安全机制"></a>移动安全机制</h4><p>做过移动项目的都知道，移动安全是项目前期需要考虑的一个重要环节。所以，在项目之初，就应该对自身的数据存储做必要的数据加密，对网络传输的数据进行必要加密。<br>移动数据加密分为两种：<br>一种是本地数据加密，只是本机存储的信息，本地加密保存。<br>一种是网络传输数据加密，这是涉及到网络协议，与服务器之间的加密协议。</p>
<p>本地加密方式有很多种：<br>一、MD5加密算法。 MD5是个不可逆的算法 没有解密的算法（目前据说也有方法破解）。<br>二、DES加密。可逆。<br>三、RSA加密。可逆<br>对于不是需要绝对足够安全的项目，以上三种加密足够用。</p>
<p>网络数据加密主要从两个方面考虑： </p>
<ol>
<li>保证API的调用者是经过自己授权的App； </li>
<li>保证数据传输的安全。</li>
</ol>
<p>保证API是自己授权的App，采用设计签名的方式。对每个移动平台，都会有不同的AppKey和AppSecret。在调用API时，将AppKey加入到请求参数中，然后，把AppSecret与其它参数，通过某种签名算法生成一个签名字符串，把数据传输给服务器端。而服务器根据AppKey和AppSecret，用相同的签名算法生成的签名与之一致，则说明请求安全。签名算法可以采用自己规定的一套签名算法（更安全），也可采用外部公开的签名算法（初期使用）。另外，在参数列表中再加入一个时间戳，还可以防止部分重放攻击。<br>对于数据传输安全，可以使用HTTPS。因为HTTPS添加了ssl安全协议。但是android项目开发，大部分都没有去实现。主要是没有对ssl证书进行安全性检查。</p>
<h4 id="API协议标准化"><a href="#API协议标准化" class="headerlink" title="API协议标准化"></a>API协议标准化</h4><p>项目开发，协议一定需要标准化，并且需要严格执行接口协议。完成每个版本的协议文档更新，方便后续使用者查看。<br>目前协议都是使用Json格式传输。需要注意的是，JSON数据和实体对象在传输时，序列化和反序列化因平台不同，会产生不同的区别。比如：JSON库将Date类型的数据序列化时会转为String，传输到服务器时，服务器反序列化经常会出现不同的结果。</p>
<h4 id="API接口版本控制"><a href="#API接口版本控制" class="headerlink" title="API接口版本控制"></a>API接口版本控制</h4><p>一般解决接口更新变化问题，我们采取的做法是，每个API接口，都会带有协议的版本，若是协议发生改变，则版本号相应改变，在处理数据请求时，则可以根据不同协议的版本进行处理，解决了版本的兼容性问题。</p>
<h4 id="架构分层"><a href="#架构分层" class="headerlink" title="架构分层"></a>架构分层</h4><p>架构设计，主要的目的就解决功能和代码的复用，减少重复开发，方便功能扩展，降低功能和代码层级的耦合。<br>目前移动设计框架，主流的有三种：MVC、MVP、MVVM三种方式（具体详情，请参考框架小结）。<br>任何的框架设计都是在满足开发需求为前提，千万不能为了设计而设计，不要问我这三种设计，哪种最合适开发？如果你还这样去问，那只能说你还不是一个成熟的产品设计者。三种框架都有各自的利弊，是应该在不同的阶段和不同人员的配备情况下，选择更合理的方式。我曾经参与一个创业团队开发视频项目，前期只有两个移动开发人员，项目时间紧的情况下。项目负责人就只会天天在那里修改需求，谈项目架构。初期的项目，在产品验证功能阶段，在项目需要快速迭代阶段，应该使用最有效的框架，才是合理的选择。而且项目的发展，一定是随着项目功能的确立，产品的定型和需求完善，对项目本身的稳定性和性能的要求，才是一个逐步提高的过程。想要一步达到完美的产品，不仅是在设计上很难做到，而且在目前所有的产品中，都是很难达到的。</p>
<p>任何框架都是在此三层数据模型上。View，Model，Controller/Presenter/ViewModel。上层View：用户行为操作，数据结果显示。底层Model：数据处理，提供显示数据。中间的就是业务逻辑层。<br>Android项目设计，重在对项目的理解，重在对需求功能的划分，重在对团队合理分配。高效的产出，快速的迭代，才是移动项目的生存之道。</p>
<h4 id="Android测试"><a href="#Android测试" class="headerlink" title="Android测试"></a>Android测试</h4><p>移动开发，为保证质量产出，需要进行必须要逻辑测试。而在项目框架设计中，简单的mvc模式，若view和model中混有业务逻辑，则不利于接口测试。所以，在后续版本的迭代中，需要逐渐使用mvp或mvvm框架设计，让view和model与业务逻辑实现完整的解耦合。</p>
<h4 id="Android环境"><a href="#Android环境" class="headerlink" title="Android环境"></a>Android环境</h4><p>自从Android提供了更高效稳定的android studio之后，对于开发者来说是更便捷，更方便了。在android gradle多平台打包。proguard代码优化，混淆。随着android studio的越来越强大，越来越稳定，相信开发android项目也会变得越来越so easy了。</p>
<h4 id="总结在最后"><a href="#总结在最后" class="headerlink" title="总结在最后"></a>总结在最后</h4><p>一个合格的移动项目架构师，必须是在不断的项目开发中成长的。不仅仅懂得项目的高效快速部署，也懂得怎样合理优化团队，才能有更优质的产品产出。移动产品，是一个快速产出的产品，怎样做出适合团队产出的产品，才是移动架构师的学习之道</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Jetpack</tag>
      </tags>
  </entry>
  <entry>
    <title>charles</title>
    <url>/2021/06/01/Tools/charles/</url>
    <content><![CDATA[<h5 id="https-破解"><a href="#https-破解" class="headerlink" title="https 破解"></a>https 破解</h5><p> 1.基本配置  mac + android</p>
<p> 2.手机浏览器  <strong><a href="http://charlesproxy.com/getssl">http://charlesproxy.com/getssl</a></strong> 下载证书  Mac下面</p>
<p><a href="'charles/txBDmwpCkj.png'"></a> 在钥匙串找到，双击选择信任</p>
<p> 3.res/raw/charles.perm   res/xml/network_security_config.xml </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">network-security-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">domain-config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 域名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">domain</span> <span class="attr">includeSubdomains</span>=<span class="string">&quot;true&quot;</span>&gt;</span>api.xxgame.cn<span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">domain</span> <span class="attr">includeSubdomains</span>=<span class="string">&quot;true&quot;</span>&gt;</span>canye.xxgame.cn<span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">domain</span> <span class="attr">includeSubdomains</span>=<span class="string">&quot;true&quot;</span>&gt;</span>felix.xxgame.cn<span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">domain</span> <span class="attr">includeSubdomains</span>=<span class="string">&quot;true&quot;</span>&gt;</span>mori.xxgame.cn<span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">domain</span> <span class="attr">includeSubdomains</span>=<span class="string">&quot;true&quot;</span>&gt;</span>jumbo.xxgame.cn<span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">domain</span> <span class="attr">includeSubdomains</span>=<span class="string">&quot;true&quot;</span>&gt;</span>lynn.xxgame.cn<span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">domain</span> <span class="attr">includeSubdomains</span>=<span class="string">&quot;true&quot;</span>&gt;</span>canye.milicat.cn<span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">domain</span> <span class="attr">includeSubdomains</span>=<span class="string">&quot;true&quot;</span>&gt;</span>s-cdn.xxgame.cn<span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">trust-anchors</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">certificates</span> <span class="attr">src</span>=<span class="string">&quot;@raw/charles&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trust-anchors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">domain-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">network-security-config</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>4.官方描述<strong><a href="https://developer.android.google.cn/training/articles/security-config.html">https://developer.android.google.cn/training/articles/security-config.html</a></strong></p>
<p>5.在Android application标签配置</p>
<p>6.去掉代理这个包无法使用，需要删除androidmanifest.xml配置</p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>charles</tag>
      </tags>
  </entry>
  <entry>
    <title>android编译</title>
    <url>/2020/12/21/Android/Android/</url>
    <content><![CDATA[<h4 id="1-编译错误-Failed-to-apply-plugin"><a href="#1-编译错误-Failed-to-apply-plugin" class="headerlink" title="1.编译错误 Failed to apply plugin"></a>1.编译错误 Failed to apply plugin</h4><blockquote>
<p>一般gradle会有提示，根据提示解决<br>例如:<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">An exception occurred applying plugin request [id: &#39;com.android.application&#39;]</span><br><span class="line">&gt; Failed to apply plugin [id &#39;com.android.internal.application&#39;]</span><br><span class="line">   &gt; The option &#39;android.enableUnitTestBinaryResources&#39; is deprecated.</span><br><span class="line">     The current default is &#39;false&#39;.</span><br><span class="line">     It has been removed from the current version of the Android Gradle plugin.</span><br><span class="line">     The raw resource for unit test functionality is removed.</span><br></pre></td></tr></table></figure><br> 根据日志 显示 <strong>android.enableUnitTestBinaryResources</strong> 这个配置文件 有问题，找到改为 <strong>false</strong><br>还有不能找到 pluginid的 可能路径有中文（<strong>android.overridePathCheck=true</strong>）或者gradle.properties 文件里面报错</p>
</blockquote>
<a id="more"></a>

<h4 id="2-Activity-和-Service的区别"><a href="#2-Activity-和-Service的区别" class="headerlink" title="2.Activity 和 Service的区别"></a>2.Activity 和 Service的区别</h4><blockquote>
<p>1.Activity 用户交互管理者，有一个 可视界面，Service是后台运行的 没有界面呈现</p>
</blockquote>
<blockquote>
<p>2.生命周期不一样， Activity生命周期由系统 控制，service是程序控制 ，service不能自己启动，而且不能和用户交互。</p>
</blockquote>
<blockquote>
<p>3.intent就是传值区别</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   &#123;</span><br><span class="line">    也可以从<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, intstartId)</span>中取出从activity中传过来的值。intent.<span class="title">getExtra</span><span class="params">()</span>获得bundle对象，可从中取值。</span></span><br><span class="line"><span class="function">也可以用<span class="title">bindService</span><span class="params">(intent,conn,BIND_AUTO_CREATE)</span></span>;传值，把要传的值绑定在intent里，在service的<span class="function"><span class="keyword">public</span> <span class="title">IBinderonBind</span><span class="params">(Intent intent)</span> 方法里取得intent。</span></span><br><span class="line"><span class="function">可以在service里面注册一个广播，在activity里sendbroadcast（intent）传值。</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>



<h4 id="3-android-知识碎片整理"><a href="#3-android-知识碎片整理" class="headerlink" title="3.android 知识碎片整理"></a>3.android 知识碎片整理</h4><blockquote>
<p> 创建 onCreate - 启动onStart – 开始 onResume – 暂停 onPause – 结束 &gt;     onStop – 销毁onDestroy</p>
<blockquote>
<p>•onCreate ：当活动第一次启动的时候，触发该方法，可以在此时完成活动的初始化工作。 onCreate 方法有一个参数，该参数可以为空（ null ），也可以是之前调用 onSaveInstanceState（）方法保存的状态信息。</p>
</blockquote>
</blockquote>
<blockquote>
<p>onStart ：该方法的触发表示所属活动将被展现给用户。</p>
</blockquote>
<blockquote>
<blockquote>
<p>•onResume ：当一个活动和用户发生交互的时候，触发该方法。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>•onPause ：当一个正在前台运行的活动因为其他的活动需要前台运行而转入后台运行的时候，触发该方法。这时候需要将活动的状态持久化，比如正在编辑的数据库记录等。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>•onStop ：当一个活动不再需要展示给用户的时候，触发该方法。如果内存紧张，系统会直接结束这个活动，而不会触发 onStop 方法。 所以保存状态信息是应该在onPause时做，而不是onStop时做。活动如果没有在前台运行，都将被停止或者Linux管理进程为了给新的活动预留足够的存储空间而随时结束这些活动。因此对于开发者来说，在设计应用程序的时候，必须时刻牢记这一原则。在一些情况下，onPause方法或许是活动触发的最后的方法，因此开发者需要在这个时候保存需要保存的信息。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>•onRestart ：当处于停止状态的活动需要再次展现给用户的时候，触发该方法。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>•onDestroy ：当活动销毁的时候，触发该方法。和 onStop 方法一样，如果内存紧张，系统会直接结束这个活动而不会触发该方法。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>•onSaveInstanceState ：系统调用该方法，允许活动保存之前的状态，比如说在一串字符串中的光标所处的位置等。 通常情况下，开发者不需要重写覆盖该方法，在默认的实现中，已经提供了自动保存活动所涉及到的用户界面组件的所有状态信息。</p>
</blockquote>
</blockquote>
<h4 id="4-Content-Provider"><a href="#4-Content-Provider" class="headerlink" title="4.Content Provider"></a>4.Content Provider</h4><h4 id="5-JobScheduler"><a href="#5-JobScheduler" class="headerlink" title="5.JobScheduler"></a>5.JobScheduler</h4><h4 id="6-android-asop-编译扩容"><a href="#6-android-asop-编译扩容" class="headerlink" title="6.android asop 编译扩容"></a>6.android asop 编译扩容</h4><blockquote>
<p><strong><a href="https://source.android.com/source/initializing?hl=zh-cn#setting-up-a-mac-os-x-build-environment">https://source.android.com/source/initializing?hl=zh-cn#setting-up-a-mac-os-x-build-environment</a></strong></p>
</blockquote>
<blockquote>
<p>hdiutil create -type SPARSE -fs ‘Case-sensitive Journaled HFS+’ -size 40g ~/android.dmg</p>
</blockquote>
<blockquote>
<p>hdiutil resize -size 200g ~/xxx.dmg   <strong>大小为总大小 扩容比较容易 缩减要用另外的方式</strong></p>
</blockquote>
]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>AndroidAidl</title>
    <url>/2021/10/20/Android/AndroidAidl/</url>
    <content><![CDATA[<h4 id="为了让远程Service与多个应用程序的组件（四大组件）进行跨进程通信（IPC），需要使用AIDL"><a href="#为了让远程Service与多个应用程序的组件（四大组件）进行跨进程通信（IPC），需要使用AIDL" class="headerlink" title="为了让远程Service与多个应用程序的组件（四大组件）进行跨进程通信（IPC），需要使用AIDL"></a>为了让远程Service与多个应用程序的组件（四大组件）进行跨进程通信（IPC），需要使用AIDL</h4><p><img src="img.png"><br>IPC：Inter-Process Communication，即跨进程通信<br>AIDL：Android Interface Definition Language，即Android接口定义语言；用于让某个Service与多个应用程序组件之间进行跨进程通信，从而可以实现多个应用程序共享同一个Service的功能。</p>
<h5 id="远程服务-app"><a href="#远程服务-app" class="headerlink" title="远程服务 app"></a>远程服务 app</h5><p>新建一个server-app ，创建src/main/aidl/包名/名字.adil, src/main/java/包名/名字.service.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 远程服务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AidlService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;AidlService&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> IServer_AidlInterface.Stub mBinder = <span class="keyword">new</span> IServer_AidlInterface.Stub() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;------&gt;客户端通过aidl  和远程服务成功通信&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">sendStartMsg</span><span class="params">(<span class="keyword">int</span> a)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (a == <span class="number">100</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;hello a !!! from service&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        System.out.println(<span class="string">&quot;onCreate---&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;onStartCommand: &quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        System.out.println(<span class="string">&quot;OnDestroy---&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;OnBind--服务端启动-&gt;&quot;</span>);</span><br><span class="line">        <span class="comment">//在onBind()返回继承自Binder的Stub类型的Binder，非常重要</span></span><br><span class="line">        <span class="keyword">return</span> mBinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onUnbind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;onUnbind---&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onUnbind(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//aidl </span></span><br><span class="line"><span class="comment">// IServer_AidlInterface.aidl</span></span><br><span class="line"><span class="keyword">package</span> com.example.server;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare any non-default types here with import statements</span></span><br><span class="line"><span class="comment">//在新建AIDL文件里定义Service需要与Activity进行通信的内容（方法）</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IServer_AidlInterface</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Demonstrates some basic types that you can use as parameters</span></span><br><span class="line"><span class="comment">     * and return values in AIDL.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat,</span></span><br><span class="line"><span class="comment">//            double aDouble, String aString);</span></span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">connectTest</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function">String <span class="title">sendStartMsg</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>service 声明</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">queries</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">package</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.server&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">queries</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- exported =true 可以被其他进程访问--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.server.AidlService&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:process</span>=<span class="string">&quot;:remote&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">           &gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span>/&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--  //该Service可以响应带有scut.carson_ho.service_server.AIDL_Service1这个action的Intent。</span></span><br><span class="line"><span class="comment">           //此处Intent的action必须写成“服务器端包名.aidl文件名”--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.server.IServer_AidlInterface&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="客户端连接-服务端"><a href="#客户端连接-服务端" class="headerlink" title="客户端连接 服务端"></a>客户端连接 服务端</h4><p>拷贝server_app声明的aidl 和包名一起 ，创建src/main/aidl/包名/名字.adil, 最好什么都不修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口变量</span></span><br><span class="line">   <span class="keyword">private</span> IServer_AidlInterface maidl_service;</span><br><span class="line">   <span class="keyword">private</span> ServiceConnection connection = <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;name = &quot;</span> + name + <span class="string">&quot;, service = &quot;</span> + service);</span><br><span class="line">           maidl_service = IServer_AidlInterface.Stub.asInterface(service); <span class="comment">//获取服务端返回的binder 对象  讲ibinder 对象 复值给maidl_service;</span></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">//通过该对象调用在IServer_AidlInterface.aidl文件中定义的接口方法,从而实现跨进程通信</span></span><br><span class="line">               maidl_service.connectTest();</span><br><span class="line">               System.out.println(<span class="string">&quot;模拟发送&quot;</span>+maidl_service.sendStartMsg(<span class="number">100</span>));</span><br><span class="line">           &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//绑定服务</span></span><br><span class="line">   Intent intentService = <span class="keyword">new</span> Intent(<span class="string">&quot;com.example.server.IServer_AidlInterface&quot;</span>);</span><br><span class="line">   <span class="comment">//需要指定包名</span></span><br><span class="line">   <span class="comment">// intentService.setPackage(&quot;com.example.service_server&quot;);</span></span><br><span class="line">   intentService.setClassName(<span class="string">&quot;com.example.server&quot;</span>,<span class="string">&quot;com.example.server.AidlService&quot;</span>);</span><br><span class="line">   System.out.println(getApplicationContext().bindService(intentService, connection, Context.BIND_AUTO_CREATE));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//发送消息</span></span><br><span class="line">    System.out.println(<span class="string">&quot;模拟发送&quot;</span>+maidl_service.sendStartMsg(<span class="number">100</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="本地服务-service"><a href="#本地服务-service" class="headerlink" title="本地服务 service"></a>本地服务 service</h4><p>开启服务2中方式<br>bindserice:<br>oncreate-&gt;onBinder()–&gt;onUnbind()-&gt;onDestoy</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Intent intentService = <span class="keyword">new</span> Intent(<span class="string">&quot;android.test.local.service&quot;</span>);</span><br><span class="line">    <span class="comment">//需要指定包名</span></span><br><span class="line">  intentService.setPackage(<span class="string">&quot;com.example.webrtc&quot;</span>);</span><br><span class="line">   <span class="comment">// intentService.setClassName(&quot;com.example.server&quot;,&quot;com.example.server.AidlService&quot;);</span></span><br><span class="line">   getApplicationContext().bindService(intentService, localConnection, Context.BIND_AUTO_CREATE);</span><br></pre></td></tr></table></figure>

<p>startserice:<br>onCreate–&gt;onStartCommand(Intent intent,int flags,int starId)-&gt;StopService()-&gt;onDestory()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Intent mService = <span class="keyword">new</span> Intent(<span class="keyword">this</span>,MyLocalService.class);</span><br><span class="line">     startService(mService);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Aidl</tag>
      </tags>
  </entry>
  <entry>
    <title>AndroidJNI</title>
    <url>/2021/10/14/Android/AndroidJNI/</url>
    <content><![CDATA[<h3 id="一、谈谈你对-JNI-和-NDK-的理解"><a href="#一、谈谈你对-JNI-和-NDK-的理解" class="headerlink" title="一、谈谈你对 JNI 和 NDK 的理解"></a>一、谈谈你对 JNI 和 NDK 的理解</h3><h4 id="JNI："><a href="#JNI：" class="headerlink" title="JNI："></a>JNI：</h4><p>JNI 是 <code>Java Native Interface</code> 的缩写，即 Java 的本地接口。</p>
<p>目的是使得 Java 与本地其他语言（如 C/C++）进行交互。</p>
<p>JNI 是属于 Java 的，与 Android 无直接关系。</p>
<h4 id="NDK："><a href="#NDK：" class="headerlink" title="NDK："></a>NDK：</h4><p>NDK 是 <code>Native Development Kit</code> 的缩写，是 Android 的工具开发包。</p>
<p>作用是更方便和快速开发 C/C++ 的动态库，并自动将动态库与应用一起打包到 apk。</p>
<p>NDK 是属于 Android 的，与 Java 无直接关系。</p>
<h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>JNI 是实现的目的，NDK 是 Android 中实现 JNI 的手段。</p>
<h3 id="二、谈谈你对-JNIEnv-和-JavaVM-理解"><a href="#二、谈谈你对-JNIEnv-和-JavaVM-理解" class="headerlink" title="二、谈谈你对 JNIEnv 和 JavaVM 理解"></a>二、谈谈你对 JNIEnv 和 JavaVM 理解</h3><h4 id="JavaVM"><a href="#JavaVM" class="headerlink" title="JavaVM"></a>JavaVM</h4><p>JavaVM 是虚拟机在 JNI 层的代表。</p>
<p>一个进程只有一个 JavaVM。（重要！）</p>
<p>所有的线程共用一个 JavaVM。（重要！）</p>
<h4 id="JNIEnv"><a href="#JNIEnv" class="headerlink" title="JNIEnv"></a>JNIEnv</h4><p>JNIEnv 表示 Java 调用 native 语言的环境，封装了几乎全部 JNI 方法的指针。</p>
<p>JNIEnv 只在创建它的线程生效，不能跨线程传递，不同线程的 JNIEnv 彼此独立。（重要！）</p>
<h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>在 native 环境下创建的线程，要想和 java 通信，即需要获取一个 JNIEnv 对象。我们通过 <code>AttachCurrentThread</code> 和 <code>DetachCurrentThread</code> 方法将 native 的线程与 JavaVM 关联和解除关联。</p>
<h3 id="三、解释一下-JNI-中全局引用和局部引用的区别和使用"><a href="#三、解释一下-JNI-中全局引用和局部引用的区别和使用" class="headerlink" title="三、解释一下 JNI 中全局引用和局部引用的区别和使用"></a>三、解释一下 JNI 中全局引用和局部引用的区别和使用</h3><h4 id="全局引用"><a href="#全局引用" class="headerlink" title="全局引用"></a>全局引用</h4><p>通过 <code>NewGlobalRef</code> 和 <code>DeleteGlobalRef</code> 方法创建和释放一个全局引用。</p>
<p>全局引用能在多个线程中被使用，且不会被 GC 回收，只能手动释放。</p>
<h4 id="局部引用"><a href="#局部引用" class="headerlink" title="局部引用"></a>局部引用</h4><p>通过 <code>NewLocalRef</code> 和 <code>DeleteLocalRef</code> 方法创建和释放一个局部引用。</p>
<p>局部引用只在创建它的 native 方法中有效，包括其调用的其它函数中有效。因此我们不能寄望于将一个局部引用直接保存在全局变量中下次使用（请使用全局引用实现该需求）。</p>
<p>我们可以不用删除局部引用，它们会在 native 方法返回时全部自动释放，但是建议对于不再使用的局部引用手动释放，避免内存过度使用。</p>
<h4 id="扩展：弱全局引用"><a href="#扩展：弱全局引用" class="headerlink" title="扩展：弱全局引用"></a>扩展：弱全局引用</h4><p>通过 <code>NewWeakGlobalRef</code> 和 <code>DeleteWeakGlobalRef</code> 创建和释放一个弱全局引用。</p>
<p>弱全局引用类似于全局引用，唯一的区别是它不会阻止被 GC 回收。</p>
<h3 id="四、JNI-线程间数据怎么互相访问"><a href="#四、JNI-线程间数据怎么互相访问" class="headerlink" title="四、JNI 线程间数据怎么互相访问"></a>四、JNI 线程间数据怎么互相访问</h3><p>考察点和上体类似，线程本来就是共享内存区域的，因此我们需要使用 <code>全局引用</code></p>
<h3 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h3><p>原理：利用 RegisterNatives 方法来注册 java 方法与 JNI 函数的一一对应关系；</p>
<p>实现流程：</p>
<ol>
<li>利用结构体 JNINativeMethod 数组记录 java 方法与 JNI 函数的对应关系；</li>
<li>实现 JNI_OnLoad 方法，在加载动态库后，执行动态注册；</li>
<li>调用 FindClass 方法，获取 java 对象；</li>
<li>调用 RegisterNatives 方法，传入 java 对象，以及 JNINativeMethod 数组，以及注册数目完成注册；</li>
</ol>
<p>优点：</p>
<ol>
<li>流程更加清晰可控；</li>
<li>效率更高；</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">jstring <span class="title">stringFromJNI</span><span class="params">(JNIEnv *env, jobject thiz)</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> hello = <span class="string">&quot;Hello from C++&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(hello.c_str());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> JNINativeMethod gMethods[] = &#123;</span><br><span class="line">        &#123;<span class="string">&quot;stringFromJNI&quot;</span>, <span class="string">&quot;()Ljava/lang/String;&quot;</span>, (jstring*)stringFromJNI&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jint <span class="title">JNI_OnLoad</span><span class="params">(JavaVM* vm, <span class="keyword">void</span>* reserved)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;native&quot;</span>, <span class="string">&quot;Jni_OnLoad&quot;</span>);</span><br><span class="line">    JNIEnv* env = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(vm-&gt;GetEnv((<span class="keyword">void</span>**)&amp;env, JNI_VERSION_1_4) != JNI_OK) <span class="comment">//从JavaVM获取JNIEnv，一般使用1.4的版本</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    jclass clazz = env-&gt;FindClass(<span class="string">&quot;com/example/efan/jni_learn2/MainActivity&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!clazz)&#123;</span><br><span class="line">        __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;native&quot;</span>, <span class="string">&quot;cannot get class: com/example/efan/jni_learn2/MainActivity&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(env-&gt;RegisterNatives(clazz, gMethods, <span class="keyword">sizeof</span>(gMethods)/<span class="keyword">sizeof</span>(gMethods[<span class="number">0</span>])))</span><br><span class="line">    &#123;</span><br><span class="line">        __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;native&quot;</span>, <span class="string">&quot;register native method failed!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> JNI_VERSION_1_4;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">12345678910111213141516171819202122232425262728</span></span><br></pre></td></tr></table></figure>
<h2 id="JNINativeMethod"><a href="#JNINativeMethod" class="headerlink" title="JNINativeMethod"></a>JNINativeMethod</h2><p>在动态注册的过程中使用到了结构体 JNINativeMethod 用于记录 java 方法与 jni 函数的对应关系</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* name;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* signature;</span><br><span class="line">    <span class="keyword">void</span>*       fnPtr;</span><br><span class="line">&#125; JNINativeMethod;<span class="number">12345</span></span><br></pre></td></tr></table></figure>
<p>结构体的第一个参数 name 是java 方法名；</p>
<p>第二个参数 signature 用于描述方法的参数与返回值；</p>
<p>第三个参数 fnPtr 是函数指针，指向 jni 函数；</p>
<p>其中，第二个参数 signature 使用字符串记录方法的参数与返回值，具体格式形如“()V”、“(II)V”，其中分为两部分，括号内表示的是参数，括号右侧表示的是返回值；</p>
<h2 id="数据类型映射"><a href="#数据类型映射" class="headerlink" title="数据类型映射"></a>数据类型映射</h2><ol>
<li>基本数据类型</li>
</ol>
<table>
<thead>
<tr>
<th>java 类型</th>
<th>native 类型</th>
<th>域描述符</th>
<th>补充</th>
</tr>
</thead>
<tbody><tr>
<td>boolean</td>
<td>jboolean</td>
<td>Z</td>
<td></td>
</tr>
<tr>
<td>byte</td>
<td>jbyte</td>
<td>B</td>
<td></td>
</tr>
<tr>
<td>char</td>
<td>jchar</td>
<td>C</td>
<td></td>
</tr>
<tr>
<td>short</td>
<td>jshort</td>
<td>S</td>
<td></td>
</tr>
<tr>
<td>int</td>
<td>jint</td>
<td>I</td>
<td></td>
</tr>
<tr>
<td>long</td>
<td>jlong</td>
<td>J</td>
<td></td>
</tr>
<tr>
<td>float</td>
<td>jfloat</td>
<td>F</td>
<td></td>
</tr>
<tr>
<td>double</td>
<td>jdouble</td>
<td>D</td>
<td></td>
</tr>
<tr>
<td>void</td>
<td>void</td>
<td>V</td>
<td></td>
</tr>
</tbody></table>
<ol start="2">
<li>数组引用类型</li>
</ol>
<p>如果是一维数组则遵循下表，如果是二维数组或更高维数组则对应的 native 类型为 jobjectArray，域描述符中使用 ‘[’ 的个数表示维数</p>
<table>
<thead>
<tr>
<th>java 类型</th>
<th>native 类型</th>
<th>域描述符</th>
<th>补充</th>
</tr>
</thead>
<tbody><tr>
<td>int[]</td>
<td>jintArray</td>
<td>[I</td>
<td></td>
</tr>
<tr>
<td>float[]</td>
<td>jfloatArray</td>
<td>[f</td>
<td></td>
</tr>
<tr>
<td>byte[]</td>
<td>jbyteArray</td>
<td>[B</td>
<td></td>
</tr>
<tr>
<td>char[]</td>
<td>jcharArray</td>
<td>[C</td>
<td></td>
</tr>
<tr>
<td>short[]</td>
<td>jshortArray</td>
<td>[S</td>
<td></td>
</tr>
<tr>
<td>double[]</td>
<td>jdoubleArray</td>
<td>[D</td>
<td></td>
</tr>
<tr>
<td>long[]</td>
<td>jlongArray</td>
<td>[F</td>
<td></td>
</tr>
<tr>
<td>boolean[]</td>
<td>jbooleanArray</td>
<td>[Z</td>
<td></td>
</tr>
</tbody></table>
<ol start="3">
<li>对象引用类型</li>
</ol>
<p>对于其它引用类型，即 java 中的对象，其映射规则为</p>
<table>
<thead>
<tr>
<th>java 类型</th>
<th>native 类型</th>
<th>域描述符</th>
<th>补充</th>
</tr>
</thead>
<tbody><tr>
<td>类名（如 Surface）</td>
<td>通常是 jobject，仅有一种例外，如果 java 类型是 String，则对应的native 类型是 jstring</td>
<td>以”L”开头，以”;”结尾中间是用”/” 隔开的包及类名（如 Landroid/view/Surface;）如果内部类则使用$连接内部类；</td>
<td></td>
</tr>
</tbody></table>
<ol start="4">
<li>对象数组引用类型</li>
</ol>
<p>如果是一维数组则遵循下表，如果是二维数组或更高维数组则对应的 native 类型为 jobjectArray，域描述符中使用 ‘[’ 的个数表示维数</p>
<table>
<thead>
<tr>
<th>java 类型</th>
<th>native 类型</th>
<th>域描述符</th>
<th>补充</th>
</tr>
</thead>
<tbody><tr>
<td>类名（如 Surface）</td>
<td>通常是 jobject，仅有一种例外，如果 java 类型是 String，则对应的native 类型是 jstring</td>
<td>在对象引用类型的域描述符的基础上在左边添加’[‘字符</td>
<td></td>
</tr>
</tbody></table>
<h2 id="jni-函数默认参数"><a href="#jni-函数默认参数" class="headerlink" title="jni 函数默认参数"></a>jni 函数默认参数</h2><p>在 jni 函数中有两个默认参数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">JNIEnv *env, jobject thiz1</span><br></pre></td></tr></table></figure>
<p>其中 JNIEnv 指代的是当前 java 环境，可以利用 JNIEnv 可以操作 java 层代码；jobject 指代的是 jni 函数对应的 java native 方法的类实例，如果 java 方法是 static，则代表的是 class 对象；</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>JNI</tag>
      </tags>
  </entry>
  <entry>
    <title>AndroidLog</title>
    <url>/2021/11/02/Android/AndroidLog/</url>
    <content><![CDATA[<h4 id="街篮2-录频没有声音"><a href="#街篮2-录频没有声音" class="headerlink" title="街篮2 录频没有声音"></a>街篮2 录频没有声音</h4><p>反馈没有声音<br>解决：试了demo 正常，可能设备音频解码 丢包，重启设备解决</p>
<h4 id="帕斯卡-云化探出框慢-概率出现"><a href="#帕斯卡-云化探出框慢-概率出现" class="headerlink" title="帕斯卡 云化探出框慢 概率出现"></a>帕斯卡 云化探出框慢 概率出现</h4><p>云化后咪咕反馈 弹出权限框慢<br>解决：添加日志 出现问题分析<br>反编译 添加smalli文件 重新加固</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">::<span class="built_in">RD</span> /S /Q %~dp0\unpak</span><br><span class="line">::<span class="built_in">echo</span> dp0 = %~dp0\unpak</span><br><span class="line"><span class="built_in">set</span>  I=&quot;resign&quot;</span><br><span class="line">::<span class="built_in">echo</span> <span class="variable">%I%</span></span><br><span class="line"> </span><br><span class="line">::<span class="keyword">call</span> java -jar &quot;%~dp0\apktool.jar&quot; d %<span class="number">1</span> -o %~dp0\unpak</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">::<span class="keyword">for</span> <span class="variable">%%I</span> <span class="keyword">in</span> (taptap,<span class="number">4399</span>,kuaibao) <span class="keyword">do</span> (</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">::<span class="built_in">copy</span> /y <span class="variable">%~dp0\%</span>%I\ztsdk_config.properties %~dp0\unpak\assets\ztsdk_config.properties </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> java -jar &quot;%~dp0\apktool.jar&quot;  b %~dp0\unpak -o <span class="variable">%~dp0\%</span>I%.apk</span><br><span class="line"></span><br><span class="line">::<span class="keyword">call</span> jarsigner -verbose -sigalg MD5withRSA -digestalg SHA1 -keystore %~dp0\GaiaRelease.keystore -storepass <span class="number">123456</span> -signedjar <span class="variable">%~dp0\gaia_%</span>I%.apk <span class="variable">%~dp0\%</span>I%.apk GaiaAlias</span><br><span class="line">::jarsigner -keystore /working/mystore -storepass &lt;keystore password&gt; -keypass &lt;private key password&gt; MyJARFile.jar duke</span><br><span class="line"><span class="keyword">call</span> jarsigner -verbose -sigalg MD5withRSA -digestalg SHA1 -keystore %~dp0\pascals.keystore -storepass Tipsworks@B109   -keypass pascals123   -signedjar <span class="variable">%~dp0\gaia_%</span>I%.apk <span class="variable">%~dp0\%</span>I%.apk pascals</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">del</span> <span class="variable">%~dp0\%</span>I%.apk</span><br><span class="line"></span><br><span class="line">::)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">::<span class="built_in">RD</span> /S /Q %~dp0\unpak</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>配置好签名文件 ，目录为unpak </p>
<h4 id="街篮2-白屏"><a href="#街篮2-白屏" class="headerlink" title="街篮2 白屏"></a>街篮2 白屏</h4><p>安装后启动出现白屏</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>问题记录</tag>
      </tags>
  </entry>
  <entry>
    <title>Java通用代码分装</title>
    <url>/2021/01/05/Android/GeneralCode/</url>
    <content><![CDATA[<h4 id="封装通用类型"><a href="#封装通用类型" class="headerlink" title="封装通用类型"></a>封装通用类型</h4><a id="more"></a>
<blockquote>
<p>csharp 通过jni调用Java   </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">Show</span><span class="params">(String methodName, String args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (!TextUtils.isEmpty(methodName) &amp;&amp; methodName.equals(<span class="string">&quot;RegCallback&quot;</span>))&#123;</span><br><span class="line">           GiantSDK.athenaCallback(args.split(<span class="string">&quot;&amp;&quot;</span>)[<span class="number">0</span>],args.split(<span class="string">&quot;&amp;&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       ReflectUtils mReflectUtils = <span class="keyword">null</span>;</span><br><span class="line">       Method mReflectMothod = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">int</span> length = JumpArgs(args);</span><br><span class="line">       Log.e(TAG, <span class="string">&quot;args = &quot;</span> + args);</span><br><span class="line">       <span class="keyword">if</span> (mGaSdkClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="comment">//无返回值的方法</span></span><br><span class="line">           mReflectUtils = ReflectUtils.reflect(mGaSdkClass).newInstance();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line">                   mReflectMothod = mReflectUtils.get().getClass().getDeclaredMethod(methodName);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (length == <span class="number">1</span>) &#123;</span><br><span class="line">                   Class[] classes = <span class="keyword">new</span> Class[<span class="number">1</span>];</span><br><span class="line">                   classes[<span class="number">0</span>] = String.class;</span><br><span class="line">                   mReflectMothod = mReflectUtils.get().getClass().getDeclaredMethod(methodName, classes);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                   Class[] classes = <span class="keyword">new</span> Class[<span class="number">2</span>];</span><br><span class="line">                   classes[<span class="number">0</span>] = String.class;</span><br><span class="line">                   classes[<span class="number">1</span>] = String.class;</span><br><span class="line">                   mReflectMothod = mReflectUtils.get().getClass().getDeclaredMethod(methodName, classes);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (mReflectMothod.getReturnType().equals(Void.TYPE)) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line">                       <span class="comment">//无参数</span></span><br><span class="line">                       mReflectUtils.method(methodName);</span><br><span class="line">                       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">if</span> (length == <span class="number">1</span>) &#123;</span><br><span class="line">                       <span class="comment">//一个参数</span></span><br><span class="line">                       mReflectUtils.method(methodName, args);</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       String[] argsArray = args.split(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">                       mReflectUtils.method(methodName, argsArray[<span class="number">0</span>], argsArray[<span class="number">1</span>]);</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">//有返回值</span></span><br><span class="line">               String result = <span class="keyword">null</span>;</span><br><span class="line">               <span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line">                   result = <span class="string">&quot;&#123;\&quot;&quot;</span> + methodName + <span class="string">&quot;\&quot;:&quot;</span> + mReflectUtils.method(methodName).get() + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (length == <span class="number">1</span>) &#123;</span><br><span class="line">                   result = <span class="string">&quot;&#123;\&quot;&quot;</span> + methodName + <span class="string">&quot;\&quot;:&quot;</span> + mReflectUtils.method(methodName, args).get() + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                   String[] argsArray = args.split(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">                   result = <span class="string">&quot;&#123;\&quot;&quot;</span> + methodName + <span class="string">&quot;\&quot;:&quot;</span> + mReflectUtils.method(methodName, argsArray[<span class="number">0</span>], argsArray[<span class="number">1</span>]).get() + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               Log.d(TAG, <span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">               <span class="keyword">return</span> result;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Code</tag>
      </tags>
  </entry>
  <entry>
    <title>Video记录</title>
    <url>/2020/12/24/Android/Videoview/</url>
    <content><![CDATA[<h5 id="VideoView"><a href="#VideoView" class="headerlink" title="VideoView"></a>VideoView</h5><blockquote>
<p>测试链接 <strong><a href="https://media.w3.org/2010/05/sintel/trailer.mp4">https://media.w3.org/2010/05/sintel/trailer.mp4</a></strong></p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">lateinit</span> <span class="keyword">var</span> progressBar: ProgressBar</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> videoView: VideoView</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> mediaController: MediaController</span><br><span class="line">    <span class="keyword">var</span> positionWhenPause: <span class="built_in">Int</span> = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_audio)</span><br><span class="line"></span><br><span class="line">        videoView  = findViewById(R.id.videoVideo)</span><br><span class="line">        progressBar = findViewById(R.id.progress_circular)</span><br><span class="line"></span><br><span class="line"> mediaController = MediaController(<span class="keyword">this</span>)</span><br><span class="line">        videoView.setMediaController(mediaController)</span><br><span class="line">        mediaController.show(<span class="number">0</span>)</span><br><span class="line">        <span class="comment">//complete</span></span><br><span class="line">        videoView.setOnCompletionListener &#123; MediaPlayer.OnCompletionListener &#123;</span><br><span class="line">           Log.e(<span class="string">&quot;TAG&quot;</span>,<span class="string">&quot;播放 完成&quot;</span>)</span><br><span class="line">        &#125; &#125;</span><br><span class="line">        videoView.setOnErrorListener(MediaPlayer.OnErrorListener &#123; mp, what, extra -&gt;</span><br><span class="line">            println(<span class="string">&quot;<span class="variable">$mp</span>,what = <span class="variable">$what</span>,extra = <span class="variable">$extra</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span><span class="symbol">@OnErrorListener</span> <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">        videoView.setOnPreparedListener &#123;</span><br><span class="line">            videoView.start()</span><br><span class="line">            progressBar.visibility = View.GONE</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置videoView 的点击监听</span></span><br><span class="line">        videoView.setOnTouchListener(View.OnTouchListener &#123; v, event -&gt;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span><span class="symbol">@OnTouchListener</span> <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4</span></span><br><span class="line">        <span class="keyword">val</span> mp4id = resources.getIdentifier(<span class="string">&quot;trailer&quot;</span>,<span class="string">&quot;raw&quot;</span>,<span class="keyword">this</span>.packageName)</span><br><span class="line">     <span class="comment">//   val uri = Uri.parse(&quot;android.resource://com.bytedance.scenedemo/$mp4id&quot;)</span></span><br><span class="line">        <span class="keyword">val</span> uri = Uri.parse(<span class="string">&quot;http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4&quot;</span>)</span><br><span class="line"><span class="comment">//        videoView.setVideoPath()</span></span><br><span class="line">        videoView.setVideoURI(uri)</span><br><span class="line">        setVideoViewLayoutParams(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>view宽和高</strong></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">setVideoViewLayoutParams</span><span class="params">(x: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//全屏</span></span><br><span class="line">        <span class="keyword">val</span> layoutParams = RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.MATCH_PARENT)</span><br><span class="line">        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM)</span><br><span class="line">        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_TOP)</span><br><span class="line">        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_LEFT)</span><br><span class="line">        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT)</span><br><span class="line">        videoView.layoutParams = layoutParams</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//窗口模式</span></span><br><span class="line">        <span class="keyword">val</span> display = DisplayMetrics()</span><br><span class="line">        windowManager.defaultDisplay.getMetrics(display)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> vHeight = DisplayMetrics.DENSITY_HIGH</span><br><span class="line">        <span class="keyword">val</span> vWidth = DisplayMetrics.DENSITY_DEFAULT</span><br><span class="line">        <span class="keyword">val</span> layoutParams = RelativeLayout.LayoutParams(vWidth,vHeight)</span><br><span class="line">        layoutParams.addRule(RelativeLayout.ALIGN_TOP)</span><br><span class="line">        videoView.layoutParams = layoutParams</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>布局</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;VideoView</span><br><span class="line">       android:id=&quot;@+id/videoVideo&quot;</span><br><span class="line">       android:layout_width=&quot;match_parent&quot;</span><br><span class="line">       android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">       /&gt;</span><br><span class="line">   &lt;ProgressBar</span><br><span class="line">       android:id=&quot;@+id/progress_circular&quot;</span><br><span class="line">       android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">       android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">       android:layout_centerInParent=&quot;true&quot;</span><br><span class="line">       /&gt;</span><br></pre></td></tr></table></figure>
<p><strong>我测试的是本地视频</strong></p>
<blockquote>
<p>获取Raw资源</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> mp4id = resources.getIdentifier(<span class="string">&quot;trailer&quot;</span>,<span class="string">&quot;raw&quot;</span>,<span class="keyword">this</span>.packageName)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>VideoView</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin学习记录</title>
    <url>/2018/08/07/Android/Kotlin-Null/</url>
    <content><![CDATA[<h3 id="可空类型-和非空类型"><a href="#可空类型-和非空类型" class="headerlink" title="可空类型 和非空类型"></a>可空类型 和非空类型</h3><p> kotlin 的类型系统在消除代码的NullPointerExcepion NPE</p>
<p> 安全调用符：?.<br> b?.length</p>
<p>第三种 是为NPE爱好者准备的<br> 非空断言 运算符（!!）操作符 将任何值 转换为非空类型， 如果</p>
<a id="more"></a>
<h4 id="NULL-和-nullptr"><a href="#NULL-和-nullptr" class="headerlink" title="NULL 和 nullptr"></a>NULL 和 nullptr</h4><blockquote>
<p>在C的头文件中</p>
</blockquote>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NULL ((void*)0)</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>在C++ 中</p>
</blockquote>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NULL 0</span></span><br></pre></td></tr></table></figure>
<p><strong>如果你想表示空指针，那么使用nullptr，而不是NULL。</strong><br><strong>注：nullptr在C++ 11中才出现。</strong></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>webrtc记录</title>
    <url>/2020/12/21/Android/Webrtc/</url>
    <content><![CDATA[<h3 id="WebRtc-简介"><a href="#WebRtc-简介" class="headerlink" title="WebRtc 简介"></a>WebRtc 简介</h3><blockquote>
<p>WebRTC名称源自网页实时通信(Web Real-Time Communication)的缩写，是一个支持网页浏览器进行实时语音对话或视频对话的技术，是谷歌2010年以6820万美元收购Global IP Solutions公司而获得的一项技术。Google于2011年6月3日开源的即时通讯项目，旨在使其成为客户端视频通话的标准。其实在Google将WebRTC开源之前，微软和苹果各自的通讯产品已占用很大市场份额（如Skype），Google`也是为了快速扩大市场，所以将他给开源。在行业内得到了广泛的支持和应用，成为下一代视频通话的标准。更多介绍可以自行去官网上看。</p>
</blockquote>
<blockquote>
<p>WebRTC被誉为是web长期开源开发的一个新启元，是近年来Web开发的最重要创新。WebRTC允许Web开发者在其web应用中添加视频聊天或者点对点数据传输，不需要复杂的代码或者昂贵的配置。目前支持Chrome、Firefox和Opera，后续会支持更多的浏览器，它有能力达到数十亿的设备。</p>
</blockquote>
<h3 id="编译WebRTC"><a href="#编译WebRTC" class="headerlink" title="编译WebRTC"></a>编译WebRTC</h3><blockquote>
<p>参考声网的国内镜像（我试图编译 镜像下载失败）<strong><a href="https://webrtc.org.cn/mirror/">https://webrtc.org.cn/mirror/</a></strong></p>
</blockquote>
 <a id="more"></a>
<h3 id="Android-webrtc"><a href="#Android-webrtc" class="headerlink" title="Android-webrtc"></a>Android-webrtc</h3><blockquote>
<p>android依赖</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">implementation &#x27;org.webrtc:google-webrtc:1.0.26131&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>1.打开摄像头<br>2.本地回环<br>3.信令<br>4.多人视频</p>
]]></content>
  </entry>
  <entry>
    <title>androidJvm</title>
    <url>/2021/10/18/Android/androidJvm/</url>
    <content><![CDATA[<h3 id="Android-热修复"><a href="#Android-热修复" class="headerlink" title="Android 热修复"></a>Android 热修复</h3><pre><code>下发补丁（内含修复好的class）到用户手机，即让app从服务器上下载（网络传输）

app通过某种方式，使补丁（apk、dex、jar等文件）中的class被app调用（本地更新）

这里的某种方式，对本篇而言，就是使用Android的类加载器，通过类加载器加载这些修复好的class，覆盖对应有问题的class，理论上就能修复bug了。</code></pre>
<h3 id="一、类加载机制"><a href="#一、类加载机制" class="headerlink" title="一、类加载机制"></a>一、类加载机制</h3><h4 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h4><p> 验证多个类是同一个类的成立条件：</p>
<pre><code>相同的className
相同的packageName
被相同的classLoader加载</code></pre>
<h4 id="loadClass"><a href="#loadClass" class="headerlink" title="loadClass()"></a>loadClass()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">return</span> loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">    Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                c = findBootstrapClassOrNull(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">            <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">            <span class="comment">// to find the class.</span></span><br><span class="line">            c = findClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<h3 id="Android中的ClassLoader"><a href="#Android中的ClassLoader" class="headerlink" title="Android中的ClassLoader"></a>Android中的ClassLoader</h3><p>1、类加载器类型<br>Android跟java有很大的渊源，基于jvm的java应用是通过ClassLoader来加载应用中的class的，Android对jvm优化过，使用的是dalvik虚拟机，且class文件会被打包进一个dex文件中，底层虚拟机有所不同，那么它们的类加载器当然也是会有所区别。</p>
<p>Android中最主要的类加载器有如下4个：</p>
<p>BootClassLoader：加载Android Framework层中的class字节码文件（类似java的Bootstrap ClassLoader）<br>PathClassLoader：加载已经安装到系统中的Apk的class字节码文件（类似java的App ClassLoader）<br>DexClassLoader：加载制定目录的class字节码文件（类似java中的Custom ClassLoader）<br>BaseDexClassLoader：PathClassLoader和DexClassLoader的父类</p>
<p>一个app一定会用到BootClassLoader、PathClassLoader这2个类加载器，可通过如下代码进行验证：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        ClassLoader classLoader &#x3D; getClassLoader();</span><br><span class="line">        if (classLoader !&#x3D; null) &#123;</span><br><span class="line">            Log.e(TAG, &quot;classLoader &#x3D; &quot; + classLoader);</span><br><span class="line">            while (classLoader.getParent() !&#x3D; null) &#123;</span><br><span class="line">                classLoader &#x3D; classLoader.getParent();</span><br><span class="line">                Log.e(TAG, &quot;classLoader &#x3D; &quot; + classLoader);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="热修复的实现原理"><a href="#热修复的实现原理" class="headerlink" title="热修复的实现原理"></a>热修复的实现原理</h3><p>经过对PathClassLoader、DexClassLoader、BaseDexClassLoader、DexPathList的分析，我们知道，安卓的类加载器在加载一个类时会先从自身DexPathList对象中的Element数组中获取（Element[] dexElements）到对应的类，之后再加载。采用的是数组遍历的方式，不过注意，遍历出来的是一个个的dex文件。在for循环中，首先遍历出来的是dex文件，然后再是从dex文件中获取class，所以，我们只要让修复好的class打包成一个dex文件，放于Element数组的第一个元素，这样就能保证获取到的class是最新修复好的class了（当然，有bug的class也是存在的，不过是放在了Element数组的最后一个元素中，所以没有机会被拿到而已。</p>
<h3 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h3><p>(1) hashCode</p>
<pre><code>    返回对象的哈希值（散列码），不是实际地址值，不过可以理解为地址值。</code></pre>
<p>(2)finalize()</p>
<pre><code>在对象将被垃圾回收器清除前调用，但不确定时间，并且对象的finalize()方法只会被调用一次，调用后也不一定马上清除该对象。</code></pre>
<p>(3)clone()</p>
<pre><code>以实现对象的克隆，包括成员变量的数据复制，但是它和两个引用指向同一个对象是有区别的。
分类：
浅拷贝: 仅拷贝对象,不拷贝成员变量,仅复制了变量的引用,拷贝前后变量使用同一块内存,内存销毁后,必须重新定义(两者同生共死)
深拷贝: 不仅拷贝对象,也拷贝成员变量(真正意义上的复制, 两者独立无关)</code></pre>
<p>(4)toString()——重要</p>
<p>(5)equals()——重要</p>
<p>比较两个对象是否相同</p>
<p>默认情况下，比较的是地址值是否相同。</p>
<p>而比较地址值是没有意义的，所以，一般子类也会重写该方法。</p>
<p>在诸多子类，如String、Integer、Date 等均重写了equals()方法</p>
<p>改进思路：</p>
<p>我们可以将比较地址值转变为比较成员变量</p>
<p>因为name为String类型，而String类型为引用类型，所以不能够用==比较，应该用equal()<br>String中默认重写过的equal()方法是用来比较字符串内容是否相同<br>我们要使用的是学生类的成员变量，所以父类 Object不能调用子类Student的特有功能<br>所以使用向下转型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//重写v2.0 (可作为最终版)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>.name == o) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//测试它左边的对象是否是它右边的类的实例，返回 boolean 的数据类型。</span></span><br><span class="line">       <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Student)) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       Student s = (Student) o;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.name.equals(s.name) &amp;&amp; <span class="keyword">this</span>.age == s.age;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>equals() 和 == 的区别<br> == 的作用： 　　</p>
<p>基本类型：比较值是否相同 　　</p>
<p>引用类型：比较的就是堆内存地址是否相同</p>
<p>equals 的作用:</p>
<p>引用类型：默认情况下，比较的是地址值。</p>
<p>注：一般选择重写方法，比较对象的成员变量值是否相同 ，不过一般重写都是自动生成。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>cpp</title>
    <url>/2021/05/07/Android/cpp/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>network</title>
    <url>/2021/10/20/Android/network/</url>
    <content><![CDATA[<h4 id="短连方案-域名合并"><a href="#短连方案-域名合并" class="headerlink" title="短连方案 域名合并"></a>短连方案 域名合并</h4><pre><code> 合并域名</code></pre>
<h4 id="短连方案-IP-直联方案"><a href="#短连方案-IP-直联方案" class="headerlink" title="短连方案 IP 直联方案"></a>短连方案 IP 直联方案</h4><blockquote>
<p>方案很简单：程序启动的时候拉取&lt;api.dianping.com&gt;对应的所有的IP列表；对所有IP进行跑马测试，找到速度最快的IP。后续所有的HTTPS请求都将域名更换为跑马最快的IP即可。</p>
</blockquote>
<pre><code>举个例子，假如：经过跑马测试发现域名”api.dianping.com”对应最快的IP是”1.23.456.789”。

 &lt;http://api.dianping.com/ad/command?param1=123&gt;  

将被替换为&lt;http://1.23.456.789/ad/com
mand?param1=123&gt;
IP直连方案有下面几大优势： 
1. 摒弃了系统DNS，减少外界干扰，摆脱DNS劫持困扰。 
2. 自建DNS更新时机可以控制。
3. IP列表更换方便。</code></pre>
<p>HTTP短连的端到端成功率从95%提升到97.5%，网络延时从1500毫秒降低到了1000毫秒，可谓小投入大产出<br>接下来要想进一步提升端到端成功率，就要开始进行长连通道建设了。<br>    提到长连通道建设，首先让人想到的应该是HTTP/2技术。它具有异步连接多路复用、头部压缩、请求响<br>    应管线化等众多优点。</p>
<p>如果查看HTTP/2的拓扑结构，其实非常简单：<br><img src="network/img.png" alt="http"></p>
<p>HTTP/2在客户端与服务器之间建立长连通道，将同一域名的请求都放在长连通道上进行。这种拓扑结构有如下一些缺点：<br>    1. 请求基于DNS，仍将面临DNS劫持风险。<br>    2. 不同域名的请求需要建立多条连接。<br>    3. 网络通道难以优化。客户端与服务器之间是公网链路。如果在多地部署服务器，成本消耗又会很大。<br>    4. 业务改造难度大。部署HTTP/2，需要对业务服务器进行改造，而且使用的业务服务器越多，需要改造的成本也越大。<br>    5. 网络协议可订制程度小。</p>
<pre><code>与HTTP/2相区别，我们这里推荐另一种代理长连的模式。这种模式的拓扑图如下：</code></pre>
<p><img src="network/img_1.png">    </p>
<pre><code>基本思路为：在客户端与业务服务器之间架设代理长连服务器，客户端与代理服务器建立TCP长连通道，客户端的HTTP请求被转换为了TCP通道上的二进制数据包。
代理服务器负责与业务服务器进行HTTP请求，请求的结果通过长连通道送回客户端。

与HTTP/2模式对比，代理长连模式具有下面一些优势： 
1. 对DNS无依赖。客户端与代理服务器之间的长连通道是通过IP建立的，与DNS没有关系。客户端的HTTP请求被转换为二进制数据流送到代理服务
器，也不需要进行DNS解析。代理服务器转发请求到业务服务器时，都处于同一内网，因此可以自己搭建DNS服务，减少对公网DNS服务的依赖。从这个层面上说，代理长连模式天生具有防DNS劫持的能
力。 
2. 不同域名的请求可以复用同一条长连通道。 3. 通道易优化。与部署业务服务器相比，部署代理长连服务器的代价就小了很多，可以在全国甚至全世界多地部署代理长连服务器。客户端在选择代理长连服务器时，可以通过跑马找到最快的服务器IP进行连接。
另一方面，代理服务器与业务服务器之间的网络通道也可以进行优化，通过架设专线或者租用腾讯云等方式可以大大提升通道服务质量。 4. 对业务完全透明。客户端的业务代码只要接入网络层的SDK即可，完全不用关心网络请求使用的是长连通道还是短连通道。代理服务器将客户端的请求还原为HTTP短连方式送到业务服务器，业务服务器不需要进行任何改造。 
5. 网络协议完全自定义。

出于快速推进的目的，同时受限于建设代理长连服务器需要投入大量资金，我们首先接入使用了腾讯的维纳斯（WNS）服务</code></pre>
<h5 id="开发阶段"><a href="#开发阶段" class="headerlink" title="开发阶段"></a>开发阶段</h5><p><img src="network/img_2.png" alt="network"></p>
<p>代理服务器和业务服务器之间有专</p>
<p>4.自动降级Failover建设</p>
<p><img src="network/img_3.png" alt="Failover"></p>
<pre><code>由于客户端的请求都放在TCP通道上进行，当代理长连服务器需要升级或者由于极端情况发生了故障
时，将会造成客户端的整体网络服务不可用。为了解决这个问题，我们准备了Failover降级方案。当TCP 通道无法建立或者发生故障时，可以使用UDP面向无连接的特性提供另一条请求通道，
或者绕过代理长连服务器之间向业务服务器发起HTTP公网请求。本文的后面章节有展示Failover机制的实际效果。

在全国多地部署代理长连接入点。客户端与接入点建立长连通道时，可以选择最快的服务器就近接入，从而大大降低通道连接速度并提升通信质量。
我们在近两年的网络优化实践中，将客户端的网络通道服务整理成了一个独立的SDK，SDK内除了包含了自建的长连通信服务，也包含了WNS等网络通道。</code></pre>
<p><img src="network/img_4.png" alt="wns"></p>
<ol>
<li><p>CIP通道：CIP通道就是上文中提到的自建代理长连通道。</p>
<pre><code> CIP是China Internet Plus的缩写，为网络优化集团的注册英文名称。App中绝大部分的请求通过CIP通道中的TCP子通道与长连服务器（CIP Connection Server）通信，</code></pre>
<p> 长连服务器将收到的请求代理转发到业务服务器（API Server）。由于TCP子通道在一些极端情况下可能会无法工作，我们在CIP通道中额外部署了UDP子通道和HTTP子通道，<br> 其中HTTP子通道通过公网绕过长连服务器与业务服务器进行直接请求。CIP通道的平均端到端成功率目前已达99.7%，耗时平均在350毫秒左右。 </p>
</li>
<li><p>WNS通道：出于灾备的需要，腾讯的WNS目前仍被包含在网络通道SDK中。当极端情况发生，CIP通道不可用时，WNS通道还可以作为备用的长连替代方案。</p>
</li>
<li><p>HTTP通道：此处的HTTP通道是在公网直接请求API Server的网络通道。出于长连通道重要性的考虑，上传和下载大数据包的请求如果放在长连上进行都有可能导致长连通道的拥堵，因此我们将CDN访问、文件上传和频繁的日志上报等放在公网利用HTTP短连进行请求，同时也减轻代理长连服务器的负担。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>messenger</title>
    <url>/2021/10/20/Android/messenger/</url>
    <content><![CDATA[<h4 id="Messenger"><a href="#Messenger" class="headerlink" title="Messenger"></a>Messenger</h4><p>   服务端<br>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessagerService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;MessagerService&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> what_to_server = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> what_to_client = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> Handler handerServer = <span class="keyword">new</span> Handler(<span class="keyword">new</span> Handler.Callback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(<span class="meta">@NonNull</span> Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//fase 继续想下传递</span></span><br><span class="line">            <span class="comment">//true 不传递自己消费</span></span><br><span class="line">            <span class="keyword">switch</span> (msg.what)&#123;</span><br><span class="line">                <span class="keyword">case</span> what_to_server:</span><br><span class="line">                    System.out.println(<span class="string">&quot;---&gt;client = &quot;</span>+msg.what);</span><br><span class="line">                    Log.e(TAG, <span class="string">&quot;---&gt;client: &quot;</span> +msg.what +<span class="string">&quot;,obj = &quot;</span>+msg.obj);</span><br><span class="line">                    Messenger client = msg.replyTo;</span><br><span class="line">                    <span class="keyword">if</span> (client == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;---&gt;client null&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    Message toClient = Message.obtain(<span class="keyword">null</span>,what_to_client);</span><br><span class="line">                    toClient.arg1 = <span class="number">101</span>;</span><br><span class="line">                    toClient.obj = <span class="string">&quot;服务器发送消息&quot;</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        client.send(toClient);</span><br><span class="line">                        System.out.println(<span class="string">&quot;---&gt;server send &gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">private</span> Messenger serverMessenger = <span class="keyword">new</span> Messenger(handerServer);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessagerService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;onBind: &quot;</span>+serverMessenger.getBinder() );</span><br><span class="line">        <span class="keyword">return</span> serverMessenger.getBinder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>   客户端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Handler clientHandler = <span class="keyword">new</span> Handler(<span class="keyword">new</span> Handler.Callback() &#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(<span class="meta">@NonNull</span> Message msg)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">switch</span> (msg.what)&#123;</span><br><span class="line">               <span class="keyword">case</span> WHAT_TO_CLIENT:</span><br><span class="line">                   System.out.println(<span class="string">&quot; client from server &quot;</span>+msg.arg1+<span class="string">&quot;,&quot;</span>+msg.obj);</span><br><span class="line">                   <span class="comment">//TODO 向服务端发送消息</span></span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">default</span>:</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *  信使</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> Messenger clientMessenger = <span class="keyword">new</span> Messenger(clientHandler);</span><br><span class="line">   <span class="comment">//连接远程服务</span></span><br><span class="line">   <span class="keyword">private</span> Messenger serverMessager;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> ServiceConnection messengerConnection = <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;Success  name = &quot;</span> + name + <span class="string">&quot;, service = &quot;</span> + service);</span><br><span class="line">           Log.e(TAG, <span class="string">&quot;onServiceConnected: &quot;</span>);</span><br><span class="line">           serverMessager = <span class="keyword">new</span> Messenger(service);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot; disconnected name = &quot;</span> + name);</span><br><span class="line">           Log.e(TAG, <span class="string">&quot;onServiceDisconnected: &quot;</span> );</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bindServer1</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Log.e(TAG, <span class="string">&quot;bindServer1: &quot;</span> );</span><br><span class="line">       Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">       intent.setAction(<span class="string">&quot;com.example.service&quot;</span>);</span><br><span class="line">       intent.setPackage(<span class="string">&quot;com.example.webrtc&quot;</span>);</span><br><span class="line">       bindService(intent,messengerConnection,BIND_AUTO_CREATE);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Message serverMessage = Message.obtain(<span class="keyword">null</span>,WHAT_TO_SERVER);</span><br><span class="line">serverMessage.arg1 = <span class="number">100</span>;</span><br><span class="line">serverMessage.obj = <span class="string">&quot;客户端发送消息&quot;</span>;</span><br><span class="line"><span class="comment">//将toServer.replyTo = clientMessager，这样，对应于服务端接收到此消息，获取到clientMessager，用此clientMessager向客户端回送消息</span></span><br><span class="line">serverMessage.replyTo = clientMessenger;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    serverMessager.send(serverMessage);</span><br><span class="line">&#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>rePlugin</title>
    <url>/2021/10/23/Android/rePlugin/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Android二维码扫描</title>
    <url>/2021/02/09/Android/scans-md/</url>
    <content><![CDATA[<h4 id="二维码扫描"><a href="#二维码扫描" class="headerlink" title="二维码扫描"></a>二维码扫描</h4><blockquote>
<p>zxing 和华为的扫描控件 大为方便<br> 下面但功能也可以引入<br> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dependencies&#123;</span><br><span class="line"> implementation <span class="string">&#x27;com.huawei.hms:scan:&#123;version&#125;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我自己集成了 10分钟 搞定一个扫描控件 还是很方便的。</p>
</blockquote>
<a id="more"></a>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>zxing,scan</tag>
      </tags>
  </entry>
  <entry>
    <title>serialiable</title>
    <url>/2021/10/20/Android/serialiable/</url>
    <content><![CDATA[<h4 id="Serializable-："><a href="#Serializable-：" class="headerlink" title="Serializable ："></a>Serializable ：</h4><pre><code>Serializable 是Java中的序列化接口，其使用起来简单但开销很大，序列化与反序列化过程需要大量I/O操作。</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ball</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Parcelable："><a href="#Parcelable：" class="headerlink" title="Parcelable："></a>Parcelable：</h4><pre><code>Parcelable是Android中的序列化方式，因此更适合用在Android平台上，他的缺点是使用起来稍微麻烦点，但他的效率很高。
这是Android推荐的序列化方式，因此我们要首选Parcelable.Parcleable主要用在内存序列化上，
通过Parcelable将对象序列化到是存储设备中或者将对象序列化后通过网络传输也是可以的，但这个过程会稍微复杂，因此在这两种情况下建议大家使用Serializable。</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bird</span>  <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bird</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序列化  ：字节码 转 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Bird</span><span class="params">(Parcel in)</span> </span>&#123;</span><br><span class="line">        name = in.readString();</span><br><span class="line">        age = in.readInt();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Creator&lt;Bird&gt; CREATOR = <span class="keyword">new</span> Creator&lt;Bird&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Bird <span class="title">createFromParcel</span><span class="params">(Parcel in)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Bird(in);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Bird[] newArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Bird[size];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化  ： 对象转字节码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> flags</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">        dest.writeString(name);</span><br><span class="line">        dest.writeInt(age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>shadowsocks 二次开发</title>
    <url>/2021/10/20/Android/shadowsocks/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title>hook</title>
    <url>/2021/10/20/Android/hook/</url>
    <content><![CDATA[<h4 id="Hook（勾子）"><a href="#Hook（勾子）" class="headerlink" title="Hook（勾子）"></a>Hook（勾子）</h4><pre><code>反射和动态代理（看成重写 super）  改变代码的正常流程</code></pre>
<h4 id="查找Hook-点的原则"><a href="#查找Hook-点的原则" class="headerlink" title="查找Hook 点的原则"></a>查找Hook 点的原则</h4><pre><code>尽量静态变量或者单利对象
尽量Hook 静态方法 </code></pre>
<h4 id="Intrumation-java"><a href="#Intrumation-java" class="headerlink" title="Intrumation.java"></a>Intrumation.java</h4><pre><code>startactivity等方法都在这类里面    </code></pre>
<h4 id="AMS-检查Activity"><a href="#AMS-检查Activity" class="headerlink" title="AMS 检查Activity"></a>AMS 检查Activity</h4><h4 id="Hook-Java-和-Hook-Native"><a href="#Hook-Java-和-Hook-Native" class="headerlink" title="Hook Java 和 Hook Native"></a>Hook Java 和 Hook Native</h4><p>1.根据Hook的API语言划分，分为Hook Java 和 Hook Native<br>2.根据Hook进程划分，分为应用进程Hook 和 全局 Hook</p>
<h4 id="防止指令重排"><a href="#防止指令重排" class="headerlink" title="防止指令重排"></a>防止指令重排</h4><p>volatile关键字修饰的变量看到的随时是自己的最新值</p>
<h4 id="Hook-Activity"><a href="#Hook-Activity" class="headerlink" title="Hook Activity"></a>Hook Activity</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * android 10以上</span></span><br><span class="line"><span class="comment">     * activityTaskManager</span></span><br><span class="line"><span class="comment">     * activityManager</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hookAms</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// int result = ActivityTaskManager.getService().startActivity(whoThread,</span></span><br><span class="line">        <span class="comment">//                    who.getBasePackageName(), who.getAttributionTag(), intent,</span></span><br><span class="line">        <span class="comment">//                    intent.resolveTypeIfNeeded(who.getContentResolver()), token,</span></span><br><span class="line">        <span class="comment">//                    target != null ? target.mEmbeddedID : null, requestCode, 0, null, options);</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//6.ActivityManager的class 对象</span></span><br><span class="line">            Class&lt;?&gt; activityTaskManagerCls = Class.forName(<span class="string">&quot;android.app.ActivityTaskManager&quot;</span>);</span><br><span class="line">            <span class="comment">//5.IActivityTaskManagerSingleton 的 Field</span></span><br><span class="line">            Field iActivityTaskManagerFiled = activityTaskManagerCls.getDeclaredField(<span class="string">&quot;IActivityTaskManagerSingleton&quot;</span>);</span><br><span class="line">            iActivityTaskManagerFiled.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//4 .Singleton类对象</span></span><br><span class="line">            Object iActivityManagerSingleton = iActivityTaskManagerFiled.get(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3 singleton的class对象</span></span><br><span class="line">            Class&lt;?&gt; singletonClass = Class.forName(<span class="string">&quot;android.util.Singleton&quot;</span>);</span><br><span class="line">            <span class="comment">//2 mInstance的 Field</span></span><br><span class="line">            Field mInstanceField = singletonClass.getDeclaredField(<span class="string">&quot;mInstance&quot;</span>);</span><br><span class="line">            mInstanceField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//singletonClass获取get()方法</span></span><br><span class="line">            Method getMethod = singletonClass.getDeclaredMethod(<span class="string">&quot;get&quot;</span>);</span><br><span class="line">            getMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//1. 目的 minstance对象</span></span><br><span class="line">            <span class="keyword">final</span> Object mInstance = getMethod.invoke(iActivityManagerSingleton);</span><br><span class="line"></span><br><span class="line">            Object proxyObject = Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),</span><br><span class="line">                    <span class="keyword">new</span> Class[]&#123;Class.forName(<span class="string">&quot;android.app.IActivityTaskManager&quot;</span>)&#125;,</span><br><span class="line">                    <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                            <span class="comment">//过滤  系统走代理 方法</span></span><br><span class="line">                            <span class="keyword">if</span> (<span class="string">&quot;startActivity&quot;</span>.equals(method.getName())) &#123;</span><br><span class="line">                                System.out.println(<span class="string">&quot;--------------&gt;method = &quot;</span> + method.getName());</span><br><span class="line">                                <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">                                Intent intent = <span class="keyword">null</span>;</span><br><span class="line">                                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                                    <span class="keyword">if</span> (args[i] <span class="keyword">instanceof</span> Intent) &#123;</span><br><span class="line">                                        System.out.println(<span class="string">&quot;i = &quot;</span> + i);</span><br><span class="line">                                        index = i ;</span><br><span class="line">                                        intent = (Intent) args[i];</span><br><span class="line">                                        <span class="keyword">break</span>;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="comment">//plugin</span></span><br><span class="line"></span><br><span class="line">                                <span class="comment">//proxy intent</span></span><br><span class="line">                                Intent intentProxy = <span class="keyword">new</span> Intent();</span><br><span class="line">                                intentProxy.setClassName(<span class="string">&quot;com.example.webrtc&quot;</span>, <span class="string">&quot;com.example.webrtc.hookProxy.ProxyActivity&quot;</span>);</span><br><span class="line"></span><br><span class="line">                                <span class="comment">//保存插件</span></span><br><span class="line">                                intentProxy.putExtra(TARGET_INTENT, intent);</span><br><span class="line">                                <span class="comment">//替换成功</span></span><br><span class="line">                                System.out.println(<span class="string">&quot;替换成功&quot;</span>);</span><br><span class="line">                                args[index] = intentProxy;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="comment">//ToDO 拦截方法</span></span><br><span class="line">                            <span class="keyword">return</span> method.invoke(mInstance, args);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            <span class="comment">//替换系统的IActivityManager的 对象</span></span><br><span class="line">            mInstanceField.set(iActivityManagerSingleton, proxyObject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在 Handler 把activity 替换回来</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hookHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class activityThread = Class.forName(<span class="string">&quot;android.app.ActivityThread&quot;</span>);</span><br><span class="line">            <span class="comment">// private static volatile ActivityThread sCurrentActivityThread;</span></span><br><span class="line">            Field sCurrentActivityThreadField = activityThread.getDeclaredField(<span class="string">&quot;sCurrentActivityThread&quot;</span>);</span><br><span class="line">            sCurrentActivityThreadField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">// //sCurrentActivityThread是一个static的,所以参数给null即可</span></span><br><span class="line">            Object sCurrentActivityThread = sCurrentActivityThreadField.get(<span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// //拿到ActivityThread中mH对象</span></span><br><span class="line"></span><br><span class="line">            Field mHField = activityThread.getDeclaredField(<span class="string">&quot;mH&quot;</span>);</span><br><span class="line">            mHField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">           <span class="keyword">final</span> Handler mH = (Handler) mHField.get(sCurrentActivityThread);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//拿到Handler callback</span></span><br><span class="line">            Field mCallbackField = Handler.class.getDeclaredField(<span class="string">&quot;mCallback&quot;</span>);</span><br><span class="line">            mCallbackField.setAccessible(<span class="keyword">true</span>);<span class="comment">//可以访问</span></span><br><span class="line">            <span class="comment">//为这个mH设置一个Callback.在这个Callback中还原Activity,</span></span><br><span class="line">            <span class="comment">//这里还有一个逻辑,在这个callback中,只是还原了真实的Activity,接下来ActivityThread中的mH的处理流程,如:</span></span><br><span class="line">            <span class="comment">// performLaunchActivity, performResumeActivity,等</span></span><br><span class="line">            <span class="comment">// 我们是不做修改的,所以在执行完这个Callback后,还是调用mH的handleMessage方法</span></span><br><span class="line"></span><br><span class="line">            mCallbackField.set(mH, <span class="keyword">new</span> android.os.Handler.Callback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(<span class="meta">@NonNull</span> Message msg)</span> </span>&#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">&quot;handleMessage: &quot;</span> + msg);</span><br><span class="line">                    <span class="comment">//这个code:public static final int EXECUTE_TRANSACTION = 159;是ams请求启动activity的.</span></span><br><span class="line">                     <span class="keyword">switch</span> (msg.what)&#123;</span><br><span class="line">                         <span class="keyword">case</span> <span class="number">159</span>:</span><br><span class="line">                             <span class="keyword">try</span> &#123;</span><br><span class="line">                                 <span class="comment">//下面要做的事情,就是把Intent中put进去的真正要启动的activiyt的intent信息在拿出来.</span></span><br><span class="line">                                 <span class="comment">// 怎么拿呢?可以打印msg.obj的信息看,intent保存的位置.</span></span><br><span class="line">                                 <span class="comment">//具体为什么这么拿,在代码外面做解释</span></span><br><span class="line">                                 Object object = msg.obj;</span><br><span class="line">                                 Log.e(TAG, <span class="string">&quot;hookATHandler,object=&quot;</span> + object);</span><br><span class="line">                                 <span class="comment">//拿到ClientTransaction中的列表:mActivityCallbacks</span></span><br><span class="line">                                 Field mActivityCallbacksField =</span><br><span class="line">                                         object.getClass().getDeclaredField(<span class="string">&quot;mActivityCallbacks&quot;</span>);</span><br><span class="line">                                 mActivityCallbacksField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                                 List&lt;Object&gt; mActivityCallbacks = (List&lt;Object&gt;)mActivityCallbacksField.get(object);</span><br><span class="line">                                 <span class="comment">//拿到LaunchActivityItem的实例对象.</span></span><br><span class="line">                                 String itemName = <span class="string">&quot;android.app.servertransaction.LaunchActivityItem&quot;</span>;</span><br><span class="line">                                 <span class="keyword">for</span>(Object obj : mActivityCallbacks) &#123;</span><br><span class="line">                                     <span class="keyword">if</span> (obj.getClass().getCanonicalName().equals(itemName)) &#123;</span><br><span class="line">                                         <span class="comment">//拿到LaunchActivityItem中的mIntent.</span></span><br><span class="line">                                         Field mIntentField = obj.getClass().getDeclaredField(<span class="string">&quot;mIntent&quot;</span>);</span><br><span class="line">                                         mIntentField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                                         Intent sugerBullet = (Intent)mIntentField.get(obj);</span><br><span class="line">                                         Intent realIntent = sugerBullet.getParcelableExtra(TARGET_INTENT);</span><br><span class="line">                                         <span class="comment">//把真实的Activity信息写回去</span></span><br><span class="line">                                         sugerBullet.setComponent(realIntent.getComponent());</span><br><span class="line">                                         <span class="keyword">break</span>;</span><br><span class="line">                                     &#125;</span><br><span class="line">                                 &#125;</span><br><span class="line"></span><br><span class="line">                             &#125; <span class="keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;</span><br><span class="line">                                 e.printStackTrace();</span><br><span class="line">                             &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                                 e.printStackTrace();</span><br><span class="line">                             &#125;</span><br><span class="line"></span><br><span class="line">                             <span class="keyword">break</span>;</span><br><span class="line">                     &#125;</span><br><span class="line">                    <span class="comment">//处理完,返回true 消费</span></span><br><span class="line">                    <span class="comment">//插件化的原理实际就是代理模式加上反射,但是真正需要注意的地方,是对要hook的源码熟悉,要怎样选好hook点,要调整什么样的处理流程.</span></span><br><span class="line">                    mH.handleMessage(msg);</span><br><span class="line">                    Log.e(TAG, <span class="string">&quot;handleMessage: 处理完&quot;</span> );</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解决 报错问题</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hookPackageManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; forName = Class.forName(<span class="string">&quot;activity.app.ActivityThread&quot;</span>);</span><br><span class="line">            Field field = forName.getDeclaredField(<span class="string">&quot;sCurrentActivityThread&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//静态变量 field.get(null) 返回对象</span></span><br><span class="line">            Object activityThread = field.get(<span class="keyword">null</span>);</span><br><span class="line">           <span class="comment">// ActivityThread.sCurrentActivityThread.get().getPackageManager()</span></span><br><span class="line">            Method getPackageManager = activityThread.getClass().getDeclaredMethod(<span class="string">&quot;getPackageManager&quot;</span>);</span><br><span class="line">            Object iPackageManager = getPackageManager.invoke(activityThread);</span><br><span class="line">            Class&lt;?&gt;  iPackageManagerIntercept  = Class.forName(<span class="string">&quot;android.content.pm.IPackageManager&quot;</span>);</span><br><span class="line">            Object proxy = Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), <span class="keyword">new</span> Class[]&#123;iPackageManagerIntercept.getClass()&#125;, <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                    Log.e(TAG, <span class="string">&quot;invoke: method =&quot;</span>+method.getName());</span><br><span class="line">                    <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;getActivityInfo&quot;</span>))&#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (args[i] <span class="keyword">instanceof</span> ComponentName)&#123;</span><br><span class="line">                                ComponentName componentName = <span class="keyword">new</span> ComponentName(  App.mInstance.getApplicationContext().getPackageName(), <span class="string">&quot;com.example.testlib.PluginActivity&quot;</span>);</span><br><span class="line">                                args[i] = componentName;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> method.invoke(iPackageManager,args);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 获取 sPackageManager 属性</span></span><br><span class="line">            Field iPackageManagerField = activityThread.getClass().getDeclaredField(<span class="string">&quot;sPackageManager&quot;</span>);</span><br><span class="line">            iPackageManagerField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            iPackageManagerField.set(activityThread, proxy);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="动态代理-ClassLoader"><a href="#动态代理-ClassLoader" class="headerlink" title="动态代理 ClassLoader"></a>动态代理 ClassLoader</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//这一句是生成代理类的class文件，前提是你需要在工程根目录下创建com/sun/proxy目录，不然会报找不到路径的io异常</span></span><br><span class="line">     System.getProperties().put(<span class="string">&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">    <span class="comment">//new 重写</span></span><br><span class="line">    ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">    <span class="comment">//public static Object newProxyInstance(ClassLoader loader,</span></span><br><span class="line">    <span class="comment">//                                          Class&lt;?&gt;[] interfaces,</span></span><br><span class="line">    <span class="comment">//                                          InvocationHandler h)</span></span><br><span class="line">    Class&lt;?&gt;[] interfaces = foo.getClass().getInterfaces();</span><br><span class="line">    <span class="comment">//生成代理类</span></span><br><span class="line">    Foo foo1 = (Foo) Proxy.newProxyInstance(classLoader, interfaces, <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;proxy = &quot;</span> + <span class="string">&quot;, method = &quot;</span> + method.getName() + <span class="string">&quot;, args = &quot;</span> + args[<span class="number">0</span>].toString());</span><br><span class="line">            <span class="comment">//通过反射调用 被代理类的方法</span></span><br><span class="line">            <span class="keyword">for</span> (Object o : args) &#123;</span><br><span class="line">        <span class="comment">//        System.out.println(&quot;args = &quot; + o);</span></span><br><span class="line">            &#125;</span><br><span class="line">            args = <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;新的value&quot;</span>&#125;;</span><br><span class="line">            method.invoke(foo, args);</span><br><span class="line">            System.out.println(<span class="string">&quot;MyInvocationHandler invoke end&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    foo1.say(<span class="string">&quot;dy proxy9999&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Hook</tag>
      </tags>
  </entry>
  <entry>
    <title>ue4LoadImg</title>
    <url>/2021/11/04/Unreal/ue4-ue4LoadImg/</url>
    <content><![CDATA[<h4 id="加载本地图片-到Image"><a href="#加载本地图片-到Image" class="headerlink" title="加载本地图片 到Image"></a>加载本地图片 到Image</h4><p>引擎版本：4.25<br>支持图片类型：png,jpg,bmp,ico,exr,icns<br>输出图片：UTexture2D</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Engine/Texture2D.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">UFUNCTION(BlueprintCallable, Category = <span class="string">&quot;Image&quot;</span>)        </span><br><span class="line"><span class="function"><span class="keyword">static</span> UTexture2D* <span class="title">LoadTexture2D</span><span class="params">(<span class="keyword">const</span> FString path, <span class="keyword">bool</span>&amp; IsValid, int32&amp; OutWidth, int32&amp; OutHeight)</span></span>; </span><br><span class="line">.cpp <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot; ImageTest.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;FileManagerGeneric.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Runtime/ImageWrapper/Public/Interfaces/IImageWrapper.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Runtime/ImageWrapper/Public/Interfaces/IImageWrapperModule.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="图片类型"><a href="#图片类型" class="headerlink" title="图片类型"></a>图片类型</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> IImageWrapperPtr <span class="title">GetImageWrapperByExtention</span><span class="params">(<span class="keyword">const</span> FString InImagePath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IImageWrapperModule&amp; ImageWrapperModule = FModuleManager::LoadModuleChecked&lt;IImageWrapperModule&gt;(FName(<span class="string">&quot;ImageWrapper&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span> (InImagePath.EndsWith(<span class="string">&quot;.png&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ImageWrapperModule.CreateImageWrapper(EImageFormat::PNG);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (InImagePath.EndsWith(<span class="string">&quot;.jpg&quot;</span>)||InImagePath.EndsWith(<span class="string">&quot;.jpeg&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ImageWrapperModule.CreateImageWrapper(EImageFormat::JPEG);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (InImagePath.EndsWith(<span class="string">&quot;.bmp&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ImageWrapperModule.CreateImageWrapper(EImageFormat::BMP);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (InImagePath.EndsWith(<span class="string">&quot;.ico&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ImageWrapperModule.CreateImageWrapper(EImageFormat::ICO);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (InImagePath.EndsWith(<span class="string">&quot;exr&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ImageWrapperModule.CreateImageWrapper(EImageFormat::EXR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (InImagePath.EndsWith(<span class="string">&quot;.icns&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ImageWrapperModule.CreateImageWrapper(EImageFormat::ICNS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="根据路径加载贴图"><a href="#根据路径加载贴图" class="headerlink" title="根据路径加载贴图"></a>根据路径加载贴图</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">UTexture2D* <span class="title">ImageTest::LoadTexture2D</span><span class="params">(<span class="keyword">const</span> FString path,<span class="keyword">bool</span>&amp; IsValid,int32&amp; OutWidth,int32&amp; OutHeight)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    UTexture2D* Texture = <span class="literal">nullptr</span>;</span><br><span class="line">    IsValid = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (!FPlatformFileManager::Get().GetPlatformFile().FileExists(*path))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    TArray&lt;uint8&gt; RawFileData;</span><br><span class="line">    <span class="keyword">if</span> (!FFileHelper::LoadFileToArray(RawFileData,*path))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    IImageWrapperPtr ImageWrapper = GetImageWrapperByExtention(path);</span><br><span class="line">    <span class="keyword">if</span> (ImageWrapper.IsValid()&amp;&amp;ImageWrapper-&gt;SetCompressed(RawFileData.GetData(),RawFileData.Num()))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">const</span> TArray&lt;uint8&gt;* UncompressedRGBA = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">if</span> (ImageWrapper-&gt;GetRaw(ERGBFormat::</span><br><span class="line">        ,<span class="number">8</span>,UncompressedRGBA))</span><br><span class="line">        &#123;</span><br><span class="line">            Texture = UTexture2D::CreateTransient(ImageWrapper-&gt;GetWidth(), ImageWrapper-&gt;GetHeight(), PF_R8G8B8A8);</span><br><span class="line">            <span class="keyword">if</span> (Texture != <span class="literal">nullptr</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                IsValid = <span class="literal">true</span>;</span><br><span class="line">                OutWidth = ImageWrapper-&gt;GetWidth();</span><br><span class="line">                OutHeight = ImageWrapper-&gt;GetHeight();</span><br><span class="line">                <span class="keyword">void</span>* TextureData = Texture-&gt;PlatformData-&gt;Mips[<span class="number">0</span>].BulkData.Lock(LOCK_READ_WRITE);</span><br><span class="line">                FMemory::Memcpy(TextureData, UncompressedRGBA-&gt;GetData(), UncompressedRGBA-&gt;Num());</span><br><span class="line">                Texture-&gt;PlatformData-&gt;Mips[<span class="number">0</span>].BulkData.Unlock();</span><br><span class="line">                Texture-&gt;UpdateResource();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Texture;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="build-cs中添加ImageWrapper模块"><a href="#build-cs中添加ImageWrapper模块" class="headerlink" title=".build.cs中添加ImageWrapper模块"></a>.build.cs中添加ImageWrapper模块</h4><p>要解决JPG图片读入UE中出现的Red通道和Blue通道交叉出现的图片颜色错误问题，可将LoadTexture2D中ERGBFormat::RGBA和PF_R8G8B8A8替换为ERGBFormat::BGRA和PF_B8G8R8A8，以BGR存储颜色通道信息即可。</p>
]]></content>
      <categories>
        <category>UE4</category>
      </categories>
      <tags>
        <tag>UTexture2D</tag>
      </tags>
  </entry>
  <entry>
    <title>UE4遇到的WebView问题</title>
    <url>/2021/01/18/Unreal/RecordUe4/</url>
    <content><![CDATA[<h5 id="UE4-24-4版本最新-Android机-少数有webcrash"><a href="#UE4-24-4版本最新-Android机-少数有webcrash" class="headerlink" title="UE4-24-4版本最新 Android机 少数有webcrash"></a>UE4-24-4版本最新 Android机 少数有webcrash</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-01-18 18:20:23.149 4886-4886&#x2F;? E&#x2F;chromium: [ERROR:aw_browser_terminator.cc(125)] Renderer process (6237) crash detected (code -1).</span><br><span class="line">2021-01-18 18:20:23.149 4886-4886&#x2F;? E&#x2F;chromium: [ERROR:aw_browser_terminator.cc(90)] Render process (6237) kill (OOM or update) wasn&#39;t handed by all associated webviews, killing application.</span><br></pre></td></tr></table></figure>
<h5 id="推理测试"><a href="#推理测试" class="headerlink" title="推理测试"></a>推理测试</h5><blockquote>
<p>1.web内容改为本地 依然crash</p>
</blockquote>
<blockquote>
<p>2.改变web创建方式 代码创建 和布局中 依然无效</p>
</blockquote>
<blockquote>
<p>3.zipalign内存字节对齐 这是磁盘对齐，是在打完apk后<br> 在android中，资源文件通过内存映射对齐到4字节边界时，访问资源文件的代码才是有效率的<br> zipalign -c -v 4 xxx.apk</p>
</blockquote>
<p> <strong>优化出包</strong><br> zipalign -v 4  xx.apk havedGood.apk （文件大于2GB 无效)</p>
<blockquote>
<p>4.采用V2签名</p>
</blockquote>
<blockquote>
<p>5.关闭aapt2,开启aapt （编译资源方面无影响)</p>
</blockquote>
<blockquote>
<p>6.修改对应的ue4-24版本对应的gradle插件 3.2.1  发现游戏包大于2G 出现OOM,放弃<br> OOM 问题无法解决</p>
</blockquote>
<blockquote>
<p>7.游戏里添加按钮直接调用接口测试  或者跳转空白页面还是crash</p>
</blockquote>
<blockquote>
<p>8.Gradle版本 低于3.5.3  或者高于 如4.0.1 内存溢出 OOM（array to large ）越界 gralde.properties 里面内存加大<br><strong>org.gradle.jvmargs=-Xmx10240m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8</strong><br><img src="RecordUe4/Lark_gradle.png" alt="gradle"><br>9.游戏 包重新签名</p>
</blockquote>
<blockquote>
<p>10.游戏大于2GB有问题，对 taptap,es文件浏览器 引起crash,查询webview 推送漏洞 导致crash，如果绕开，让单个文件小于2GB。最终解决方法 升级chrome</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">--------- beginning of crash</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.028</span> <span class="number">27559</span> <span class="number">29808</span> F libc    : Fatal signal <span class="number">6</span> (SIGABRT), code <span class="number">0</span> (SI_USER) in tid <span class="number">29808</span> (pool-<span class="number">17</span>-thread-), pid <span class="number">27559</span> (com.taptap)</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.157</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   : *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.157</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   : Build fingerprint: <span class="string">&#x27;OnePlus/OnePlus8_CH/OnePlus8:10/QKQ1.191222.002/2004300255:user/release-keys&#x27;</span></span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.157</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   : Revision: <span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.157</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   : ABI: <span class="string">&#x27;arm&#x27;</span></span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.158</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   : Timestamp: <span class="number">2021</span>-<span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33</span>+0800</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.158</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   : pid: <span class="number">27559</span>, tid: <span class="number">29808</span>, name: pool-<span class="number">17</span>-thread-  &gt;&gt;&gt; com.taptap &lt;&lt;&lt;</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.158</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   : uid: <span class="number">10462</span></span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.158</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   : signal <span class="number">6</span> (SIGABRT), code <span class="number">0</span> (SI_USER), fault addr --------</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.158</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   : Abort message: <span class="string">&#x27;ubsan: implicit-conversion&#x27;</span></span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.158</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :     r0  <span class="number">00000000</span>  r1  <span class="number">00007470</span>  r2  <span class="number">00000006</span>  r3  beeb5898</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.158</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :     r4  beeb58ac  r5  beeb5890  r6  00006ba7  r7  0000016b</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.158</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :     r8  beeb58a8  r9  beeb5898  r10 beeb58c8  r11 beeb58b8</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.158</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :     ip  <span class="number">00007470</span>  sp  beeb5868  lr  f2cf94cb  pc  f2cf94de</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.427</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   : </span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.427</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   : backtrace:</span><br><span class="line">04-02 19:12:33.427 29830 29830 F DEBUG   :       #00 pc 000604de  /apex/com.android.runtime/lib/bionic/libc.so (abort+166) (BuildId: 821c77998fb681da63cc0cc2621d9479)</span><br><span class="line">04-02 19:12:33.427 29830 29830 F DEBUG   :       #01 pc 00011b60  /system/lib/libutils.so (abort_with_message(char const*)+24) (BuildId: 303a9d221465f0db9b5d760e0a0c6abe)</span><br><span class="line">04-02 19:12:33.427 29830 29830 F DEBUG   :       #02 pc 00011c58  /system/lib/libutils.so (__ubsan_handle_implicit_conversion_minimal_abort+24) (BuildId: 303a9d221465f0db9b5d760e0a0c6abe)</span><br><span class="line">04-02 19:12:33.427 29830 29830 F DEBUG   :       #03 pc 0000a1db  /system/lib/libutils.so (android::FileMap::create(char const*, int, long long, unsigned int, bool)+302) (BuildId: 303a9d221465f0db9b5d760e0a0c6abe)</span><br><span class="line">04-02 19:12:33.427 29830 29830 F DEBUG   :       #04 pc 00021d5b  /system/lib/libandroidfw.so (android::ApkAssets::Open(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, android::Asset::AccessMode) const+258) (BuildId: 21002c626ee1affa596c8d808483e06d)</span><br><span class="line">04-02 19:12:33.427 29830 29830 F DEBUG   :       #05 pc 00021255  /system/lib/libandroidfw.so (android::ApkAssets::LoadImpl(android::base::unique_fd_impl&lt;android::base::DefaultCloser&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unique_ptr&lt;android::Asset, std::__1::default_delete&lt;android::Asset&gt;&gt;, std::__1::unique_ptr&lt;android::LoadedIdmap const, std::__1::default_delete&lt;android::LoadedIdmap const&gt;&gt;, bool, bool)+392) (BuildId: 21002c626ee1affa596c8d808483e06d)</span><br><span class="line">04-02 19:12:33.427 29830 29830 F DEBUG   :       #06 pc 00021069  /system/lib/libandroidfw.so (android::ApkAssets::Load(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, bool)+40) (BuildId: 21002c626ee1affa596c8d808483e06d)</span><br><span class="line">04-02 19:12:33.428 29830 29830 F DEBUG   :       #07 pc 0012ac6f  /system/lib/libandroid_runtime.so (android::NativeLoad(_JNIEnv*, _jclass*, _jstring*, unsigned char, unsigned char, unsigned char)+630) (BuildId: 9e49e3e1d0bfa227ee91d698b0542a69)</span><br><span class="line">04-02 19:12:33.428 29830 29830 F DEBUG   :       #08 pc 00292769  /system/framework/arm/boot-framework.oat (art_jni_trampoline+136) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line">04-02 19:12:33.428 29830 29830 F DEBUG   :       #09 pc 003b4f29  /system/framework/arm/boot-framework.oat (android.app.ResourcesManager.loadApkAssets+440) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line">04-02 19:12:33.428 29830 29830 F DEBUG   :       #10 pc 003b5f5b  /system/framework/arm/boot-framework.oat (android.app.ResourcesManager.createAssetManager+170) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line">04-02 19:12:33.428 29830 29830 F DEBUG   :       #11 pc 003b39a7  /system/framework/arm/boot-framework.oat (android.app.ResourcesManager.createResourcesImpl+126) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line">04-02 19:12:33.428 29830 29830 F DEBUG   :       #12 pc 003b4693  /system/framework/arm/boot-framework.oat (android.app.ResourcesManager.getOrCreateResources+1258) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line">04-02 19:12:33.428 29830 29830 F DEBUG   :       #13 pc 003b6bc1  /system/framework/arm/boot-framework.oat (android.app.ResourcesManager.getResources+440) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line">04-02 19:12:33.428 29830 29830 F DEBUG   :       #14 pc 0047066f  /system/framework/arm/boot-framework.oat (android.app.ApplicationPackageManager.getResourcesForApplication+414) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line">04-02 19:12:33.428 29830 29830 F DEBUG   :       #15 pc 00470f99  /system/framework/arm/boot-framework.oat (android.app.ApplicationPackageManager.getText+192) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line">04-02 19:12:33.428 29830 29830 F DEBUG   :       #16 pc 003d287b  /system/framework/arm/boot-framework.oat (android.content.pm.PackageItemInfo.loadUnsafeLabel+114) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line">04-02 19:12:33.428 29830 29830 F DEBUG   :       #17 pc 003d2733  /system/framework/arm/boot-framework.oat (android.content.pm.PackageItemInfo.loadLabel+66) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line">04-02 19:12:33.428 29830 29830 F DEBUG   :       #18 pc 0060e579  /data/app/com.taptap-RTdXAVrkrlThKgnAxoFGrg==/oat/arm/base.odex (com.play.taptap.apps.LocalGameManager.initLocalAppsInner+872)</span><br><span class="line">04-02 19:12:33.428 29830 29830 F DEBUG   :       #19 pc 0060c815  /data/app/com.taptap-RTdXAVrkrlThKgnAxoFGrg==/oat/arm/base.odex (com.play.taptap.apps.LocalGameManager$1.run+108)</span><br><span class="line">04-02 19:12:33.428 29830 29830 F DEBUG   :       #20 pc 0028df17  /system/framework/arm/boot.oat (java.util.concurrent.ThreadPoolExecutor.runWorker+1014) (BuildId: 42f5d5a67be30f16b4db28d01054b7acd1a9df82)</span><br><span class="line">04-02 19:12:33.428 29830 29830 F DEBUG   :       #21 pc 0028bb7f  /system/framework/arm/boot.oat (java.util.concurrent.ThreadPoolExecutor$Worker.run+54) (BuildId: 42f5d5a67be30f16b4db28d01054b7acd1a9df82)</span><br><span class="line">04-02 19:12:33.428 29830 29830 F DEBUG   :       #22 pc 001737b9  /system/framework/arm/boot.oat (java.lang.Thread.run+64) (BuildId: 42f5d5a67be30f16b4db28d01054b7acd1a9df82)</span><br><span class="line">04-02 19:12:33.428 29830 29830 F DEBUG   :       #23 pc 000d7bc5  /apex/com.android.runtime/lib/libart.so (art_quick_invoke_stub_internal+68) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-02 19:12:33.428 29830 29830 F DEBUG   :       #24 pc 0043cdfd  /apex/com.android.runtime/lib/libart.so (art_quick_invoke_stub+248) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-02 19:12:33.428 29830 29830 F DEBUG   :       #25 pc 000dff81  /apex/com.android.runtime/lib/libart.so (art::ArtMethod::Invoke(art::Thread*, unsigned int*, unsigned int, art::JValue*, char const*)+168) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-02 19:12:33.428 29830 29830 F DEBUG   :       #26 pc 0037d187  /apex/com.android.runtime/lib/libart.so (art::(anonymous namespace)::InvokeWithArgArray(art::ScopedObjectAccessAlreadyRunnable const&amp;, art::ArtMethod*, art::(anonymous namespace)::ArgArray*, art::JValue*, char const*)+54) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-02 19:12:33.429 29830 29830 F DEBUG   :       #27 pc 0037df1b  /apex/com.android.runtime/lib/libart.so (art::InvokeVirtualOrInterfaceWithJValues(art::ScopedObjectAccessAlreadyRunnable const&amp;, _jobject*, _jmethodID*, jvalue const*)+302) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-02 19:12:33.429 29830 29830 F DEBUG   :       #28 pc 003afb7f  /apex/com.android.runtime/lib/libart.so (art::Thread::CreateCallback(void*)+1018) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-02 19:12:33.429 29830 29830 F DEBUG   :       #29 pc 000ab3dd  /apex/com.android.runtime/lib/bionic/libc.so (__pthread_start(void*)+20) (BuildId: 821c77998fb681da63cc0cc2621d9479)</span><br><span class="line">04-02 19:12:33.429 29830 29830 F DEBUG   :       #30 pc 00061989  /apex/com.android.runtime/lib/bionic/libc.so (__start_thread+30) (BuildId: 821c77998fb681da63cc0cc2621d9479)</span><br><span class="line"><span class="number">04</span>-<span class="number">03</span> <span class="number">18</span>:<span class="number">45</span>:<span class="number">05.648</span> <span class="number">27558</span> <span class="number">31142</span> F libc    : Fatal signal <span class="number">6</span> (SIGABRT), code <span class="number">0</span> (SI_USER) in tid <span class="number">31142</span> (pool-<span class="number">16</span>-thread-), pid <span class="number">27558</span> (com.taptap)</span><br><span class="line"><span class="number">04</span>-<span class="number">03</span> <span class="number">18</span>:<span class="number">45</span>:<span class="number">05.766</span> <span class="number">31186</span> <span class="number">31186</span> F DEBUG   : *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***</span><br><span class="line"></span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.208</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   : *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.208</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   : Build fingerprint: <span class="string">&#x27;OnePlus/OnePlus8_CH/OnePlus8:10/QKQ1.191222.002/2004300255:user/release-keys&#x27;</span></span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.208</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   : Revision: <span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.209</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   : ABI: <span class="string">&#x27;arm&#x27;</span></span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.214</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   : Timestamp: <span class="number">2021</span>-<span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11</span>+0800</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.214</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   : pid: <span class="number">19223</span>, tid: <span class="number">19321</span>, name: ocessService0:<span class="number">0</span>  &gt;&gt;&gt; com.google.android.webview:sandboxed_process0:org.chromium.content.app.SandboxedProcessService0:<span class="number">0</span> &lt;&lt;&lt;</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.214</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   : uid: <span class="number">99477</span></span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.214</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   : signal <span class="number">6</span> (SIGABRT), code -<span class="number">1</span> (SI_QUEUE), fault addr --------</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.214</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   : Abort message: <span class="string">&#x27;ubsan: implicit-conversion&#x27;</span></span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.214</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   :     r0  <span class="number">00000000</span>  r1  00004b79  r2  <span class="number">00000006</span>  r3  c5ee9778</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.214</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   :     r4  c5ee978c  r5  c5ee9770  r6  00004b17  r7  0000016b</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.214</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   :     r8  c5ee9788  r9  c5ee9778  r10 c5ee97a8  r11 c5ee9798</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.214</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   :     ip  00004b79  sp  c5ee9748  lr  f2cf94cb  pc  f2cf94de</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.523</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   : </span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.523</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   : backtrace:</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #00 pc 000604de  /apex/com.android.runtime/lib/bionic/libc.so (abort+166) (BuildId: 821c77998fb681da63cc0cc2621d9479)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #01 pc 00011b60  /system/lib/libutils.so (abort_with_message(char const*)+24) (BuildId: 303a9d221465f0db9b5d760e0a0c6abe)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #02 pc 00011c58  /system/lib/libutils.so (__ubsan_handle_implicit_conversion_minimal_abort+24) (BuildId: 303a9d221465f0db9b5d760e0a0c6abe)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #03 pc 0000a1db  /system/lib/libutils.so (android::FileMap::create(char const*, int, long long, unsigned int, bool)+302) (BuildId: 303a9d221465f0db9b5d760e0a0c6abe)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #04 pc 00021d5b  /system/lib/libandroidfw.so (android::ApkAssets::Open(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, android::Asset::AccessMode) const+258) (BuildId: 21002c626ee1affa596c8d808483e06d)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #05 pc 00021255  /system/lib/libandroidfw.so (android::ApkAssets::LoadImpl(android::base::unique_fd_impl&lt;android::base::DefaultCloser&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unique_ptr&lt;android::Asset, std::__1::default_delete&lt;android::Asset&gt;&gt;, std::__1::unique_ptr&lt;android::LoadedIdmap const, std::__1::default_delete&lt;android::LoadedIdmap const&gt;&gt;, bool, bool)+392) (BuildId: 21002c626ee1affa596c8d808483e06d)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #06 pc 00021069  /system/lib/libandroidfw.so (android::ApkAssets::Load(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, bool)+40) (BuildId: 21002c626ee1affa596c8d808483e06d)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #07 pc 0012ac6f  /system/lib/libandroid_runtime.so (android::NativeLoad(_JNIEnv*, _jclass*, _jstring*, unsigned char, unsigned char, unsigned char)+630) (BuildId: 9e49e3e1d0bfa227ee91d698b0542a69)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #08 pc 00292769  /system/framework/arm/boot-framework.oat (art_jni_trampoline+136) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #09 pc 003b4f29  /system/framework/arm/boot-framework.oat (android.app.ResourcesManager.loadApkAssets+440) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #10 pc 003b5f5b  /system/framework/arm/boot-framework.oat (android.app.ResourcesManager.createAssetManager+170) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #11 pc 003b39a7  /system/framework/arm/boot-framework.oat (android.app.ResourcesManager.createResourcesImpl+126) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #12 pc 003b4693  /system/framework/arm/boot-framework.oat (android.app.ResourcesManager.getOrCreateResources+1258) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #13 pc 003b6bc1  /system/framework/arm/boot-framework.oat (android.app.ResourcesManager.getResources+440) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #14 pc 0047066f  /system/framework/arm/boot-framework.oat (android.app.ApplicationPackageManager.getResourcesForApplication+414) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #15 pc 00470f99  /system/framework/arm/boot-framework.oat (android.app.ApplicationPackageManager.getText+192) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #16 pc 003d287b  /system/framework/arm/boot-framework.oat (android.content.pm.PackageItemInfo.loadUnsafeLabel+114) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #17 pc 003d2733  /system/framework/arm/boot-framework.oat (android.content.pm.PackageItemInfo.loadLabel+66) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #18 pc 0046ebe5  /system/framework/arm/boot-framework.oat (android.app.ApplicationPackageManager.getApplicationLabel+44) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #19 pc 001f22ad  /data/dalvik-cache/arm/product@app@WebViewGoogle@WebViewGoogle.apk@classes.dex (org.chromium.base.BuildInfo.&lt;init&gt;+468)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #20 pc 000d7bc5  /apex/com.android.runtime/lib/libart.so (art_quick_invoke_stub_internal+68) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #21 pc 0043cdfd  /apex/com.android.runtime/lib/libart.so (art_quick_invoke_stub+248) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #22 pc 000dff81  /apex/com.android.runtime/lib/libart.so (art::ArtMethod::Invoke(art::Thread*, unsigned int*, unsigned int, art::JValue*, char const*)+168) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #23 pc 00214963  /apex/com.android.runtime/lib/libart.so (art::interpreter::ArtInterpreterToCompiledCodeBridge(art::Thread*, art::ArtMethod*, art::ShadowFrame*, unsigned short, art::JValue*)+270) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #24 pc 00210b57  /apex/com.android.runtime/lib/libart.so (bool art::interpreter::DoCall&lt;false, false&gt;(art::ArtMethod*, art::Thread*, art::ShadowFrame&amp;, art::Instruction const*, unsigned short, art::JValue*)+738) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #25 pc 00433fc3  /apex/com.android.runtime/lib/libart.so (MterpInvokeDirect+370) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #26 pc 000d2914  /apex/com.android.runtime/lib/libart.so (mterp_op_invoke_direct+20) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #27 pc 000cef4c  /data/dalvik-cache/arm/product@app@WebViewGoogle@WebViewGoogle.apk@classes.vdex (Mq.&lt;clinit&gt;+6)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #28 pc 001f097f  /apex/com.android.runtime/lib/libart.so (_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb.llvm.6076538161558136159+166) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #29 pc 001f5393  /apex/com.android.runtime/lib/libart.so (art::interpreter::EnterInterpreterFromEntryPoint(art::Thread*, art::CodeItemDataAccessor const&amp;, art::ShadowFrame*)+122) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #30 pc 00426857  /apex/com.android.runtime/lib/libart.so (artQuickToInterpreterBridge+866) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #31 pc 000dc5a1  /apex/com.android.runtime/lib/libart.so (art_quick_to_interpreter_bridge+32) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #32 pc 000d7bc5  /apex/com.android.runtime/lib/libart.so (art_quick_invoke_stub_internal+68) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #33 pc 0043cf0f  /apex/com.android.runtime/lib/libart.so (art_quick_invoke_static_stub+246) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #34 pc 000dff95  /apex/com.android.runtime/lib/libart.so (art::ArtMethod::Invoke(art::Thread*, unsigned int*, unsigned int, art::JValue*, char const*)+188) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #35 pc 00101405  /apex/com.android.runtime/lib/libart.so (art::ClassLinker::InitializeClass(art::Thread*, art::Handle&lt;art::mirror::Class&gt;, bool, bool)+1916) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #36 pc 000f1533  /apex/com.android.runtime/lib/libart.so (art::ClassLinker::EnsureInitialized(art::Thread*, art::Handle&lt;art::mirror::Class&gt;, bool, bool)+58) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #37 pc 0041cb7f  /apex/com.android.runtime/lib/libart.so (artInitializeStaticStorageFromCode+58) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:02:11.523 19223 19321 F DEBUG   :       #38 pc 000d7f4f  /apex/com.android.runtime/lib/libart.so (art_quick_initialize_static_storage+30) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:02:11.524 19223 19321 F DEBUG   :       #39 pc 001f2cad  /data/dalvik-cache/arm/product@app@WebViewGoogle@WebViewGoogle.apk@classes.dex (org.chromium.base.BuildInfo.getAll+1244)</span><br><span class="line">04-09 13:02:11.524 19223 19321 F DEBUG   :       #40 pc 000d7bc5  /apex/com.android.runtime/lib/libart.so (art_quick_invoke_stub_internal+68) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:02:11.524 19223 19321 F DEBUG   :       #41 pc 0043cf0f  /apex/com.android.runtime/lib/libart.so (art_quick_invoke_static_stub+246) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:02:11.524 19223 19321 F DEBUG   :       #42 pc 000dff95  /apex/com.android.runtime/lib/libart.so (art::ArtMethod::Invoke(art::Thread*, unsigned int*, unsigned int, art::JValue*, char const*)+188) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:02:11.524 19223 19321 F DEBUG   :       #43 pc 0037d187  /apex/com.android.runtime/lib/libart.so (art::(anonymous namespace)::InvokeWithArgArray(art::ScopedObjectAccessAlreadyRunnable const&amp;, art::ArtMethod*, art::(anonymous namespace)::ArgArray*, art::JValue*, char const*)+54) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:02:11.524 19223 19321 F DEBUG   :       #44 pc 0037cf23  /apex/com.android.runtime/lib/libart.so (art::InvokeWithVarArgs(art::ScopedObjectAccessAlreadyRunnable const&amp;, _jobject*, _jmethodID*, std::__va_list)+290) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:02:11.524 19223 19321 F DEBUG   :       #45 pc 002b9b7f  /apex/com.android.runtime/lib/libart.so (art::JNI::CallStaticObjectMethodV(_JNIEnv*, _jclass*, _jmethodID*, std::__va_list)+494) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:02:11.524 19223 19321 F DEBUG   :       #46 pc 00284481  /apex/com.android.runtime/lib/libart.so (art::(anonymous namespace)::CheckJNI::CallMethodV(char const*, _JNIEnv*, _jobject*, _jclass*, _jmethodID*, std::__va_list, art::Primitive::Type, art::InvokeType)+1156) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:02:11.524 19223 19321 F DEBUG   :       #47 pc 00276b9b  /apex/com.android.runtime/lib/libart.so (art::(anonymous namespace)::CheckJNI::CallStaticObjectMethodV(_JNIEnv*, _jclass*, _jmethodID*, std::__va_list)+38) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:02:11.524 19223 19321 F DEBUG   :       #48 pc 0181a5b7  /product/app/TrichromeLibrary/TrichromeLibrary.apk!libmonochrome.so (offset 0x665000) (BuildId: 18a4115359876ab8b15ee84fe29a2942a145ea8d)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.142</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   : *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.143</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   : Build fingerprint: <span class="string">&#x27;OnePlus/OnePlus8_CH/OnePlus8:10/QKQ1.191222.002/2004300255:user/release-keys&#x27;</span></span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.143</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   : Revision: <span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.143</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   : ABI: <span class="string">&#x27;arm&#x27;</span></span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.143</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   : Timestamp: <span class="number">2021</span>-<span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32</span>+0800</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.143</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   : pid: <span class="number">19701</span>, tid: <span class="number">19775</span>, name: ocessService0:<span class="number">0</span>  &gt;&gt;&gt; com.google.android.webview:sandboxed_process0:org.chromium.content.app.SandboxedProcessService0:<span class="number">0</span> &lt;&lt;&lt;</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.143</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   : uid: <span class="number">99479</span></span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.143</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   : signal <span class="number">6</span> (SIGABRT), code -<span class="number">1</span> (SI_QUEUE), fault addr --------</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.143</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   : Abort message: <span class="string">&#x27;ubsan: implicit-conversion&#x27;</span></span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.143</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :     r0  <span class="number">00000000</span>  r1  00004d3f  r2  <span class="number">00000006</span>  r3  c5ee9778</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.143</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :     r4  c5ee978c  r5  c5ee9770  r6  00004cf5  r7  0000016b</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.143</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :     r8  c5ee9788  r9  c5ee9778  r10 c5ee97a8  r11 c5ee9798</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.143</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :     ip  00004d3f  sp  c5ee9748  lr  f2cf94cb  pc  f2cf94de</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   : </span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   : backtrace:</span><br><span class="line">04-09 13:03:32.395 19701 19775 F DEBUG   :       #00 pc 000604de  /apex/com.android.runtime/lib/bionic/libc.so (abort+166) (BuildId: 821c77998fb681da63cc0cc2621d9479)</span><br><span class="line">04-09 13:03:32.395 19701 19775 F DEBUG   :       #01 pc 00011b60  /system/lib/libutils.so (abort_with_message(char const*)+24) (BuildId: 303a9d221465f0db9b5d760e0a0c6abe)</span><br><span class="line">04-09 13:03:32.395 19701 19775 F DEBUG   :       #02 pc 00011c58  /system/lib/libutils.so (__ubsan_handle_implicit_conversion_minimal_abort+24) (BuildId: 303a9d221465f0db9b5d760e0a0c6abe)</span><br><span class="line">04-09 13:03:32.395 19701 19775 F DEBUG   :       #03 pc 0000a1db  /system/lib/libutils.so (android::FileMap::create(char const*, int, long long, unsigned int, bool)+302) (BuildId: 303a9d221465f0db9b5d760e0a0c6abe)</span><br><span class="line">04-09 13:03:32.395 19701 19775 F DEBUG   :       #04 pc 00021d5b  /system/lib/libandroidfw.so (android::ApkAssets::Open(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, android::Asset::AccessMode) const+258) (BuildId: 21002c626ee1affa596c8d808483e06d)</span><br><span class="line">04-09 13:03:32.395 19701 19775 F DEBUG   :       #05 pc 00021255  /system/lib/libandroidfw.so (android::ApkAssets::LoadImpl(android::base::unique_fd_impl&lt;android::base::DefaultCloser&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unique_ptr&lt;android::Asset, std::__1::default_delete&lt;android::Asset&gt;&gt;, std::__1::unique_ptr&lt;android::LoadedIdmap const, std::__1::default_delete&lt;android::LoadedIdmap const&gt;&gt;, bool, bool)+392) (BuildId: 21002c626ee1affa596c8d808483e06d)</span><br><span class="line">04-09 13:03:32.395 19701 19775 F DEBUG   :       #06 pc 00021069  /system/lib/libandroidfw.so (android::ApkAssets::Load(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, bool)+40) (BuildId: 21002c626ee1affa596c8d808483e06d)</span><br><span class="line">04-09 13:03:32.395 19701 19775 F DEBUG   :       #07 pc 0012ac6f  /system/lib/libandroid_runtime.so (android::NativeLoad(_JNIEnv*, _jclass*, _jstring*, unsigned char, unsigned char, unsigned char)+630) (BuildId: 9e49e3e1d0bfa227ee91d698b0542a69)</span><br><span class="line">04-09 13:03:32.395 19701 19775 F DEBUG   :       #08 pc 00292769  /system/framework/arm/boot-framework.oat (art_jni_trampoline+136) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line">04-09 13:03:32.395 19701 19775 F DEBUG   :       #09 pc 003b4f29  /system/framework/arm/boot-framework.oat (android.app.ResourcesManager.loadApkAssets+440) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line">04-09 13:03:32.395 19701 19775 F DEBUG   :       #10 pc 003b5f5b  /system/framework/arm/boot-framework.oat (android.app.ResourcesManager.createAssetManager+170) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line">04-09 13:03:32.395 19701 19775 F DEBUG   :       #11 pc 003b39a7  /system/framework/arm/boot-framework.oat (android.app.ResourcesManager.createResourcesImpl+126) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line">04-09 13:03:32.395 19701 19775 F DEBUG   :       #12 pc 003b4693  /system/framework/arm/boot-framework.oat (android.app.ResourcesManager.getOrCreateResources+1258) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line">04-09 13:03:32.395 19701 19775 F DEBUG   :       #13 pc 003b6bc1  /system/framework/arm/boot-framework.oat (android.app.ResourcesManager.getResources+440) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line">04-09 13:03:32.395 19701 19775 F DEBUG   :       #14 pc 0047066f  /system/framework/arm/boot-framework.oat (android.app.ApplicationPackageManager.getResourcesForApplication+414) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line">04-09 13:03:32.395 19701 19775 F DEBUG   :       #15 pc 00470f99  /system/framework/arm/boot-framework.oat (android.app.ApplicationPackageManager.getText+192) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line">04-09 13:03:32.395 19701 19775 F DEBUG   :       #16 pc 003d287b  /system/framework/arm/boot-framework.oat (android.content.pm.PackageItemInfo.loadUnsafeLabel+114) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line">04-09 13:03:32.395 19701 19775 F DEBUG   :       #17 pc 003d2733  /system/framework/arm/boot-framework.oat (android.content.pm.PackageItemInfo.loadLabel+66) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line">04-09 13:03:32.395 19701 19775 F DEBUG   :       #18 pc 0046ebe5  /system/framework/arm/boot-framework.oat (android.app.ApplicationPackageManager.getApplicationLabel+44) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line">04-09 13:03:32.395 19701 19775 F DEBUG   :       #19 pc 001f22ad  /data/dalvik-cache/arm/product@app@WebViewGoogle@WebViewGoogle.apk@classes.dex (org.chromium.base.BuildInfo.&lt;init&gt;+468)</span><br><span class="line">04-09 13:03:32.395 19701 19775 F DEBUG   :       #20 pc 000d7bc5  /apex/com.android.runtime/lib/libart.so (art_quick_invoke_stub_internal+68) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:03:32.395 19701 19775 F DEBUG   :       #21 pc 0043cdfd  /apex/com.android.runtime/lib/libart.so (art_quick_invoke_stub+248) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:03:32.395 19701 19775 F DEBUG   :       #22 pc 000dff81  /apex/com.android.runtime/lib/libart.so (art::ArtMethod::Invoke(art::Thread*, unsigned int*, unsigned int, art::JValue*, char const*)+168) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:03:32.395 19701 19775 F DEBUG   :       #23 pc 00214963  /apex/com.android.runtime/lib/libart.so (art::interpreter::ArtInterpreterToCompiledCodeBridge(art::Thread*, art::ArtMethod*, art::ShadowFrame*, unsigned short, art::JValue*)+270) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:03:32.395 19701 19775 F DEBUG   :       #24 pc 00210b57  /apex/com.android.runtime/lib/libart.so (bool art::interpreter::DoCall&lt;false, false&gt;(art::ArtMethod*, art::Thread*, art::ShadowFrame&amp;, art::Instruction const*, unsigned short, art::JValue*)+738) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:03:32.395 19701 19775 F DEBUG   :       #25 pc 00433fc3  /apex/com.android.runtime/lib/libart.so (MterpInvokeDirect+370) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:03:32.395 19701 19775 F DEBUG   :       #26 pc 000d2914  /apex/com.android.runtime/lib/libart.so (mterp_op_invoke_direct+20) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:03:32.395 19701 19775 F DEBUG   :       #27 pc 000cef4c  /data/dalvik-cache/arm/product@app@WebViewGoogle@WebViewGoogle.apk@classes.vdex (Mq.&lt;clinit&gt;+6)</span><br><span class="line">04-09 13:03:32.395 19701 19775 F DEBUG   :       #28 pc 001f097f  /apex/com.android.runtime/lib/libart.so (_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb.llvm.6076538161558136159+166) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:03:32.395 19701 19775 F DEBUG   :       #29 pc 001f5393  /apex/com.android.runtime/lib/libart.so (art::interpreter::EnterInterpreterFromEntryPoint(art::Thread*, art::CodeItemDataAccessor const&amp;, art::ShadowFrame*)+122) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:03:32.395 19701 19775 F DEBUG   :       #30 pc 00426857  /apex/com.android.runtime/lib/libart.so (artQuickToInterpreterBridge+866) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:03:32.395 19701 19775 F DEBUG   :       #31 pc 000dc5a1  /apex/com.android.runtime/lib/libart.so (art_quick_to_interpreter_bridge+32) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:03:32.396 19701 19775 F DEBUG   :       #32 pc 000d7bc5  /apex/com.android.runtime/lib/libart.so (art_quick_invoke_stub_internal+68) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:03:32.396 19701 19775 F DEBUG   :       #33 pc 0043cf0f  /apex/com.android.runtime/lib/libart.so (art_quick_invoke_static_stub+246) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:03:32.396 19701 19775 F DEBUG   :       #34 pc 000dff95  /apex/com.android.runtime/lib/libart.so (art::ArtMethod::Invoke(art::Thread*, unsigned int*, unsigned int, art::JValue*, char const*)+188) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:03:32.396 19701 19775 F DEBUG   :       #35 pc 00101405  /apex/com.android.runtime/lib/libart.so (art::ClassLinker::InitializeClass(art::Thread*, art::Handle&lt;art::mirror::Class&gt;, bool, bool)+1916) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:03:32.396 19701 19775 F DEBUG   :       #36 pc 000f1533  /apex/com.android.runtime/lib/libart.so (art::ClassLinker::EnsureInitialized(art::Thread*, art::Handle&lt;art::mirror::Class&gt;, bool, bool)+58) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:03:32.396 19701 19775 F DEBUG   :       #37 pc 0041cb7f  /apex/com.android.runtime/lib/libart.so (artInitializeStaticStorageFromCode+58) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:03:32.396 19701 19775 F DEBUG   :       #38 pc 000d7f4f  /apex/com.android.runtime/lib/libart.so (art_quick_initialize_static_storage+30) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:03:32.396 19701 19775 F DEBUG   :       #39 pc 001f2cad  /data/dalvik-cache/arm/product@app@WebViewGoogle@WebViewGoogle.apk@classes.dex (org.chromium.base.BuildInfo.getAll+1244)</span><br><span class="line">04-09 13:03:32.396 19701 19775 F DEBUG   :       #40 pc 000d7bc5  /apex/com.android.runtime/lib/libart.so (art_quick_invoke_stub_internal+68) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:03:32.396 19701 19775 F DEBUG   :       #41 pc 0043cf0f  /apex/com.android.runtime/lib/libart.so (art_quick_invoke_static_stub+246) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:03:32.396 19701 19775 F DEBUG   :       #42 pc 000dff95  /apex/com.android.runtime/lib/libart.so (art::ArtMethod::Invoke(art::Thread*, unsigned int*, unsigned int, art::JValue*, char const*)+188) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:03:32.396 19701 19775 F DEBUG   :       #43 pc 0037d187  /apex/com.android.runtime/lib/libart.so (art::(anonymous namespace)::InvokeWithArgArray(art::ScopedObjectAccessAlreadyRunnable const&amp;, art::ArtMethod*, art::(anonymous namespace)::ArgArray*, art::JValue*, char const*)+54) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:03:32.396 19701 19775 F DEBUG   :       #44 pc 0037cf23  /apex/com.android.runtime/lib/libart.so (art::InvokeWithVarArgs(art::ScopedObjectAccessAlreadyRunnable const&amp;, _jobject*, _jmethodID*, std::__va_list)+290) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:03:32.396 19701 19775 F DEBUG   :       #45 pc 002b9b7f  /apex/com.android.runtime/lib/libart.so (art::JNI::CallStaticObjectMethodV(_JNIEnv*, _jclass*, _jmethodID*, std::__va_list)+494) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:03:32.396 19701 19775 F DEBUG   :       #46 pc 00284481  /apex/com.android.runtime/lib/libart.so (art::(anonymous namespace)::CheckJNI::CallMethodV(char const*, _JNIEnv*, _jobject*, _jclass*, _jmethodID*, std::__va_list, art::Primitive::Type, art::InvokeType)+1156) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:03:32.396 19701 19775 F DEBUG   :       #47 pc 00276b9b  /apex/com.android.runtime/lib/libart.so (art::(anonymous namespace)::CheckJNI::CallStaticObjectMethodV(_JNIEnv*, _jclass*, _jmethodID*, std::__va_list)+38) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">04-09 13:03:32.396 19701 19775 F DEBUG   :       #48 pc 0181a5b7  /product/app/TrichromeLibrary/TrichromeLibrary.apk!libmonochrome.so (offset 0x665000) (BuildId: 18a4115359876ab8b15ee84fe29a2942a145ea8d)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">39</span>:<span class="number">09.679</span> <span class="number">16526</span> <span class="number">24176</span> F libc    : Fatal signal <span class="number">6</span> (SIGABRT), code <span class="number">0</span> (SI_USER) in tid <span class="number">24176</span> (thread_sp_norma), pid <span class="number">16526</span> (encent.mobileqq)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">39</span>:<span class="number">10.096</span> <span class="number">24236</span> <span class="number">24236</span> F DEBUG   : *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***</span><br></pre></td></tr></table></figure>
<p><strong>ApplicationPackageManager.getApplicationLabel和PackageItemInfo.loadLabel</strong><br>获取 应用名有问题<br>11.游戏这边webview内部会调用这个接口<br>终极方案 升级系统可以解决或者包体小于 2GB 解决</p>
<h5 id="chrome-版本"><a href="#chrome-版本" class="headerlink" title="chrome 版本"></a>chrome 版本</h5><p>1.oneplus8 </p>
<blockquote>
<p>04-10 17:13:48.169 18155 18175 I cr_LibraryLoader: Loaded native library version number “80.0.3987.99”<br><a href="https://forums.oneplus.com/threads/are-the-apps-suddenly-crashing-heres-the-solution-update-android-system-webview.1405651/">社区反馈</a></p>
</blockquote>
<p><a href="https://forums.oneplus.com/search/521198198/?q=webview&o=date&c%5Btitle_only%5D=1">过滤</a></p>
<p>2.系统webview版本漏洞 手机问题</p>
<p>3.Google Android System Bug<br><strong><a href="https://source.android.com/security/bulletin/">https://source.android.com/security/bulletin/</a></strong><br>[Bug][<a href="https://www.theverge.com/2021/3/22/22345696/google-android-apps-crashing-fix-system-webview]">https://www.theverge.com/2021/3/22/22345696/google-android-apps-crashing-fix-system-webview]</a></p>
<h5 id="apktool-反编译-回编重写签名"><a href="#apktool-反编译-回编重写签名" class="headerlink" title="apktool 反编译  回编重写签名"></a>apktool 反编译  回编重写签名</h5><blockquote>
<p>测试正常 apktool d xx.apk -o test/<br>apktool b test/ -o unsign.apk</p>
</blockquote>
<blockquote>
<p>apktool原理没有 特殊处理，小端字节等<br>apktool原理 编译和反编译 smalli 字节码</p>
</blockquote>
<a id="more"></a>

<blockquote>
<p>最后用apktool 反编译 回编出包</p>
</blockquote>
<h5 id="游戏多次收到回调问题"><a href="#游戏多次收到回调问题" class="headerlink" title="游戏多次收到回调问题"></a>游戏多次收到回调问题</h5><blockquote>
<p>SDK消息分发这里 打印日志 只发了一次 游戏收到多次说明多次注册 或者多次调用</p>
</blockquote>
<h5 id="aapt和aapt2-区别-为什么会有aapt2"><a href="#aapt和aapt2-区别-为什么会有aapt2" class="headerlink" title="aapt和aapt2 区别 为什么会有aapt2"></a>aapt和aapt2 区别 为什么会有aapt2</h5><blockquote>
<p>1.<strong>编译</strong>：将资源文件编译为二进制格式文件<br> <strong>链接</strong>：将编译后的所有文件合并，打包成一个单独文件</p>
</blockquote>
<blockquote>
<p>2.在aapt基础上做了优化</p>
</blockquote>
<blockquote>
<p>3.这种方式可以很好的提升资源的编译性能，比如只有一个资源文件发生改变时，你只需要重新编译改变的文件，然后将其与其他未改变的资源进行链接即可。而之前的aapt是将所有资源进行merge，merge完后将所有资源进行编译，产生一个资源ap_文件，该文件是一个压缩包，这样带来的后果就是即使只改变了一个资源文件，也要进行全量编译。</p>
</blockquote>
]]></content>
      <categories>
        <category>UE4</category>
      </categories>
      <tags>
        <tag>UE4WebView</tag>
      </tags>
  </entry>
</search>
