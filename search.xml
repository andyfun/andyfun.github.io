<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>mysql</title>
    <url>/2023/08/24/mysql/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Cocos_creator_3.6.1</title>
    <url>/2022/10/16/Cocos/Cocos-creator-3-6-1/</url>
    <content><![CDATA[<font size="2.9">

<h4 id="cocos"><a href="#cocos" class="headerlink" title="cocos"></a>cocos</h4><ol>
<li><a href="https://docs.cocos.com/creator/manual/zh/getting-started/first-game/">cocos</a></li>
<li>使用TypeScript</li>
<li>保存玩，回到编辑器页面刷新</li>
<li>开发小游戏</li>
</ol>
<h4 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">import</span> &#123; _decorator, Component, Vec3, input, Input, EventMouse, Animation, SkeletalAnimation &#125; <span class="keyword">from</span> <span class="string">&#x27;cc&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; ccclass, property &#125; = _decorator;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ccclass</span>(<span class="string">&quot;PlayerController&quot;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayerController</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    start () &#123;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="function"><span class="title">update</span>(<span class="params">deltaTime: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//都是组件 和Unity 相似</span></span><br><span class="line"><span class="comment">//cc.sys 系统类 判断手机 或者浏览器</span></span><br><span class="line"><span class="comment">//input.on(Input.EventType.MOUSE_UP, this.onMouseUp, this); 鼠标监听</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//手机滑动监听  input.on(Input.EventType.TOUCH_START,this.onTouchStar,this);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//this._deltaPos.x = this._curJumpSpeed * deltaTime; 距离= 速度*时间</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h4><ol>
<li>assets 目录下放资源</li>
<li>Animations ,Prefabs,Scenes,Scripts</li>
</ol>
<h4 id="cocos2dx-4-0"><a href="#cocos2dx-4-0" class="headerlink" title="cocos2dx-4.0"></a>cocos2dx-4.0</h4><pre><code>cocos new -p com.test  -l cpp Test

cocos run -d androd 
</code></pre>
</font>
]]></content>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Android架构</title>
    <url>/2018/08/07/Android/Android-Jetpack/</url>
    <content><![CDATA[<font size="2.9">

<h3 id="Android移动app架构设计浅谈"><a href="#Android移动app架构设计浅谈" class="headerlink" title="Android移动app架构设计浅谈"></a>Android移动app架构设计浅谈</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>架构，又名软件架构，是有关软件整体结构与组件的抽象描述，用于指导大型软件系统各个方面的设计。</p>
<h4 id="软件架构设计目标："><a href="#软件架构设计目标：" class="headerlink" title="软件架构设计目标："></a>软件架构设计目标：</h4><p>1.可靠性（Reliable）。软件架构的可靠是产品设计的前提。<br>2.安全性（Secure）。软件架构的安全性是产品可持续发展的条件。<br>3.可扩展性（Scalable）。软件架构必须能够不同的功能需求情况下，支持可扩散性。<br>4.可定制化（Customizable）。同样的一套软件，可以根据客户群的不同和市场需求的变化进行调整。<br>5.可伸缩 （Extensible）。在新技术出现的时候，一个软件架构应当允许导入新技术，从而对现有系统进行功能和性能的扩展。<br>6.可维护性（Maintainable）。软件系统的维护包括两方面，一是排除现有的错误，二是将新的软件需求反映到现有系统中去。一个易于维护的系统可以有效地降低技术支持的花费。</p>
<span id="more"></span>
<p>架构是项目形成到一定阶段的趋势。是对整个产品是否合格的有效保证。对于很多项目设计人员，在不考虑产品本身，不考虑团队，不考虑时间周期的前提下，一味的强调软件构架，是不合理的，也不利于整个产品的发展。当然，一个好的项目架构师，是很能清楚，项目在不同阶段，所需要处理的不同职责。能够最大限度的发挥能效，将产品周期，与功能模块做出最合适的匹配规划，这才是一个架构师所必须追求的。</p>
<p>以下是个人对Android移动项目架构设计简单的经验之谈。欢迎与更多的朋友交流，若有疑问，或不合理之处，都可以随时交流。</p>
<h4 id="从项目功能开始"><a href="#从项目功能开始" class="headerlink" title="从项目功能开始"></a>从项目功能开始</h4><p>每一个项目架构师，在拿到一个新项目的时候，都会不同的着重点。在项目规划风格上，都会有不同的考虑。而我个人在着手项目时，都会从功能上去着手。先了解项目整体的功能模块，区分出主体功能模块有哪些类，对不同的功能模块进行细致的划分。这是我开始的第一步。因为，只有对项目整体有个把握，才能更快的对项目有了解，才能知道怎样去合理安排项目的研发，才能更好的去安排项目进度流程，和人员的安排调度。</p>
<p>功能划分之后，接下来就是项目的实际研发阶段。这个阶段就是项目实际进展阶段了。必须要有合理的安排调度，才是保证项目的高效。比如：我们进行的大部分项目，都有网络交互的部分，也有本地功能部分，还有一些基础数据模块部分，这些功能必须要有合理的时间安排。</p>
<p>项目研发之前，几点提要说明：<br>一、团队之间统一编码规范。<br>二、需求文档统一管理。<br>三、多人协同开发，根据文档开发（一切以文档为主）。</p>
<p>项目以功能划分，功能以模块划分。在项目初期，除了产品原型可能是提前设计成形外，其它的项目文档都还未出来，产品也是有个确定功能，但是细节文档还未成形，这个时候已经是项目开始阶段，即使在有一些文档还未成形前，也可以开始项目的基础开发了。</p>
<h4 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h4><p>网络模块，数据库存储模块，数据加密模块，数据缓存模块，数据解析器，日志信息收集模块等。这些都是项目的基本模块，也可以独立于功能的模块，可以提前开发，测试。便于后期直接使用。</p>
<h4 id="移动安全机制"><a href="#移动安全机制" class="headerlink" title="移动安全机制"></a>移动安全机制</h4><p>做过移动项目的都知道，移动安全是项目前期需要考虑的一个重要环节。所以，在项目之初，就应该对自身的数据存储做必要的数据加密，对网络传输的数据进行必要加密。<br>移动数据加密分为两种：<br>一种是本地数据加密，只是本机存储的信息，本地加密保存。<br>一种是网络传输数据加密，这是涉及到网络协议，与服务器之间的加密协议。</p>
<p>本地加密方式有很多种：<br>一、MD5加密算法。 MD5是个不可逆的算法 没有解密的算法（目前据说也有方法破解）。<br>二、DES加密。可逆。<br>三、RSA加密。可逆<br>对于不是需要绝对足够安全的项目，以上三种加密足够用。</p>
<p>网络数据加密主要从两个方面考虑： </p>
<ol>
<li>保证API的调用者是经过自己授权的App； </li>
<li>保证数据传输的安全。</li>
</ol>
<p>保证API是自己授权的App，采用设计签名的方式。对每个移动平台，都会有不同的AppKey和AppSecret。在调用API时，将AppKey加入到请求参数中，然后，把AppSecret与其它参数，通过某种签名算法生成一个签名字符串，把数据传输给服务器端。而服务器根据AppKey和AppSecret，用相同的签名算法生成的签名与之一致，则说明请求安全。签名算法可以采用自己规定的一套签名算法（更安全），也可采用外部公开的签名算法（初期使用）。另外，在参数列表中再加入一个时间戳，还可以防止部分重放攻击。<br>对于数据传输安全，可以使用HTTPS。因为HTTPS添加了ssl安全协议。但是android项目开发，大部分都没有去实现。主要是没有对ssl证书进行安全性检查。</p>
<h4 id="API协议标准化"><a href="#API协议标准化" class="headerlink" title="API协议标准化"></a>API协议标准化</h4><p>项目开发，协议一定需要标准化，并且需要严格执行接口协议。完成每个版本的协议文档更新，方便后续使用者查看。<br>目前协议都是使用Json格式传输。需要注意的是，JSON数据和实体对象在传输时，序列化和反序列化因平台不同，会产生不同的区别。比如：JSON库将Date类型的数据序列化时会转为String，传输到服务器时，服务器反序列化经常会出现不同的结果。</p>
<h4 id="API接口版本控制"><a href="#API接口版本控制" class="headerlink" title="API接口版本控制"></a>API接口版本控制</h4><p>一般解决接口更新变化问题，我们采取的做法是，每个API接口，都会带有协议的版本，若是协议发生改变，则版本号相应改变，在处理数据请求时，则可以根据不同协议的版本进行处理，解决了版本的兼容性问题。</p>
<h4 id="架构分层"><a href="#架构分层" class="headerlink" title="架构分层"></a>架构分层</h4><p>架构设计，主要的目的就解决功能和代码的复用，减少重复开发，方便功能扩展，降低功能和代码层级的耦合。<br>目前移动设计框架，主流的有三种：MVC、MVP、MVVM三种方式（具体详情，请参考框架小结）。<br>任何的框架设计都是在满足开发需求为前提，千万不能为了设计而设计，不要问我这三种设计，哪种最合适开发？如果你还这样去问，那只能说你还不是一个成熟的产品设计者。三种框架都有各自的利弊，是应该在不同的阶段和不同人员的配备情况下，选择更合理的方式。我曾经参与一个创业团队开发视频项目，前期只有两个移动开发人员，项目时间紧的情况下。项目负责人就只会天天在那里修改需求，谈项目架构。初期的项目，在产品验证功能阶段，在项目需要快速迭代阶段，应该使用最有效的框架，才是合理的选择。而且项目的发展，一定是随着项目功能的确立，产品的定型和需求完善，对项目本身的稳定性和性能的要求，才是一个逐步提高的过程。想要一步达到完美的产品，不仅是在设计上很难做到，而且在目前所有的产品中，都是很难达到的。</p>
<p>任何框架都是在此三层数据模型上。View，Model，Controller/Presenter/ViewModel。上层View：用户行为操作，数据结果显示。底层Model：数据处理，提供显示数据。中间的就是业务逻辑层。<br>Android项目设计，重在对项目的理解，重在对需求功能的划分，重在对团队合理分配。高效的产出，快速的迭代，才是移动项目的生存之道。</p>
<h4 id="Android测试"><a href="#Android测试" class="headerlink" title="Android测试"></a>Android测试</h4><p>移动开发，为保证质量产出，需要进行必须要逻辑测试。而在项目框架设计中，简单的mvc模式，若view和model中混有业务逻辑，则不利于接口测试。所以，在后续版本的迭代中，需要逐渐使用mvp或mvvm框架设计，让view和model与业务逻辑实现完整的解耦合。</p>
<h4 id="Android环境"><a href="#Android环境" class="headerlink" title="Android环境"></a>Android环境</h4><p>自从Android提供了更高效稳定的android studio之后，对于开发者来说是更便捷，更方便了。在android gradle多平台打包。proguard代码优化，混淆。随着android studio的越来越强大，越来越稳定，相信开发android项目也会变得越来越so easy了。</p>
<h4 id="总结在最后"><a href="#总结在最后" class="headerlink" title="总结在最后"></a>总结在最后</h4><p>一个合格的移动项目架构师，必须是在不断的项目开发中成长的。不仅仅懂得项目的高效快速部署，也懂得怎样合理优化团队，才能有更优质的产品产出。移动产品，是一个快速产出的产品，怎样做出适合团队产出的产品，才是移动架构师的学习之道</p>
<h5 id="新方向"><a href="#新方向" class="headerlink" title="新方向"></a>新方向</h5><p><img src="https://juejin.cn/post/7032625978023084062" alt="资料"></p>
</font>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Jetpack</tag>
      </tags>
  </entry>
  <entry>
    <title>android编译</title>
    <url>/2020/12/21/Android/Android/</url>
    <content><![CDATA[<font size="2.9">

<h4 id="1-编译错误-Failed-to-apply-plugin"><a href="#1-编译错误-Failed-to-apply-plugin" class="headerlink" title="1.编译错误 Failed to apply plugin"></a>1.编译错误 Failed to apply plugin</h4><blockquote>
<p>一般gradle会有提示，根据提示解决<br>例如:<br> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">An exception occurred applying plugin request [id: &#x27;com.android.application&#x27;]</span><br><span class="line">&gt; Failed to apply plugin [id &#x27;com.android.internal.application&#x27;]</span><br><span class="line">   &gt; The option &#x27;android.enableUnitTestBinaryResources&#x27; is deprecated.</span><br><span class="line">     The current default is &#x27;false&#x27;.</span><br><span class="line">     It has been removed from the current version of the Android Gradle plugin.</span><br><span class="line">     The raw resource for unit test functionality is removed.</span><br></pre></td></tr></table></figure><br> 根据日志 显示 <strong>android.enableUnitTestBinaryResources</strong> 这个配置文件 有问题，找到改为 <strong>false</strong><br>还有不能找到 pluginid的 可能路径有中文（<strong>android.overridePathCheck=true</strong>）或者gradle.properties 文件里面报错</p>
</blockquote>
<span id="more"></span>

<h4 id="2-Activity-和-Service的区别"><a href="#2-Activity-和-Service的区别" class="headerlink" title="2.Activity 和 Service的区别"></a>2.Activity 和 Service的区别</h4><blockquote>
<p>1.Activity 用户交互管理者，有一个 可视界面，Service是后台运行的 没有界面呈现</p>
</blockquote>
<blockquote>
<p>2.生命周期不一样， Activity生命周期由系统 控制，service是程序控制 ，service不能自己启动，而且不能和用户交互。</p>
</blockquote>
<blockquote>
<p>3.intent就是传值区别</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   &#123;</span><br><span class="line">    也可以从<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, intstartId)</span>中取出从activity中传过来的值。intent.<span class="title">getExtra</span><span class="params">()</span>获得bundle对象，可从中取值。</span></span><br><span class="line"><span class="function">也可以用<span class="title">bindService</span><span class="params">(intent,conn,BIND_AUTO_CREATE)</span></span>;传值，把要传的值绑定在intent里，在service的<span class="function"><span class="keyword">public</span> <span class="title">IBinderonBind</span><span class="params">(Intent intent)</span> 方法里取得intent。</span></span><br><span class="line"><span class="function">可以在service里面注册一个广播，在activity里sendbroadcast（intent）传值。</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="3-android-知识碎片整理"><a href="#3-android-知识碎片整理" class="headerlink" title="3.android 知识碎片整理"></a>3.android 知识碎片整理</h4><blockquote>
<p> 创建 onCreate - 启动onStart – 开始 onResume – 暂停 onPause – 结束 &gt;     onStop – 销毁onDestroy</p>
<blockquote>
<p>•onCreate ：当活动第一次启动的时候，触发该方法，可以在此时完成活动的初始化工作。 onCreate 方法有一个参数，该参数可以为空（ null ），也可以是之前调用 onSaveInstanceState（）方法保存的状态信息。</p>
</blockquote>
</blockquote>
<blockquote>
<p>onStart ：该方法的触发表示所属活动将被展现给用户。</p>
</blockquote>
<blockquote>
<blockquote>
<p>•onResume ：当一个活动和用户发生交互的时候，触发该方法。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>•onPause ：当一个正在前台运行的活动因为其他的活动需要前台运行而转入后台运行的时候，触发该方法。这时候需要将活动的状态持久化，比如正在编辑的数据库记录等。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>•onStop ：当一个活动不再需要展示给用户的时候，触发该方法。如果内存紧张，系统会直接结束这个活动，而不会触发 onStop 方法。 所以保存状态信息是应该在onPause时做，而不是onStop时做。活动如果没有在前台运行，都将被停止或者Linux管理进程为了给新的活动预留足够的存储空间而随时结束这些活动。因此对于开发者来说，在设计应用程序的时候，必须时刻牢记这一原则。在一些情况下，onPause方法或许是活动触发的最后的方法，因此开发者需要在这个时候保存需要保存的信息。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>•onRestart ：当处于停止状态的活动需要再次展现给用户的时候，触发该方法。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>•onDestroy ：当活动销毁的时候，触发该方法。和 onStop 方法一样，如果内存紧张，系统会直接结束这个活动而不会触发该方法。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>•onSaveInstanceState ：系统调用该方法，允许活动保存之前的状态，比如说在一串字符串中的光标所处的位置等。 通常情况下，开发者不需要重写覆盖该方法，在默认的实现中，已经提供了自动保存活动所涉及到的用户界面组件的所有状态信息。</p>
</blockquote>
</blockquote>
<h4 id="4-Content-Provider"><a href="#4-Content-Provider" class="headerlink" title="4.Content Provider"></a>4.Content Provider</h4><h4 id="5-JobScheduler"><a href="#5-JobScheduler" class="headerlink" title="5.JobScheduler"></a>5.JobScheduler</h4><h4 id="6-android-asop-编译扩容"><a href="#6-android-asop-编译扩容" class="headerlink" title="6.android asop 编译扩容"></a>6.android asop 编译扩容</h4><blockquote>
<p><strong><a href="https://source.android.com/source/initializing?hl=zh-cn#setting-up-a-mac-os-x-build-environment">https://source.android.com/source/initializing?hl=zh-cn#setting-up-a-mac-os-x-build-environment</a></strong></p>
</blockquote>
<blockquote>
<p>hdiutil create -type SPARSE -fs ‘Case-sensitive Journaled HFS+’ -size 40g ~/android.dmg</p>
</blockquote>
<blockquote>
<p>hdiutil resize -size 200g ~/xxx.dmg   <strong>大小为总大小 扩容比较容易 缩减要用另外的方式</strong></p>
</blockquote>
</font>
]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>AndroidAidl</title>
    <url>/2021/10/20/Android/AndroidAidl/</url>
    <content><![CDATA[<font size="2.9">

<h4 id="为了让远程Service与多个应用程序的组件（四大组件）进行跨进程通信（IPC），需要使用AIDL"><a href="#为了让远程Service与多个应用程序的组件（四大组件）进行跨进程通信（IPC），需要使用AIDL" class="headerlink" title="为了让远程Service与多个应用程序的组件（四大组件）进行跨进程通信（IPC），需要使用AIDL"></a>为了让远程Service与多个应用程序的组件（四大组件）进行跨进程通信（IPC），需要使用AIDL</h4><p><img src="img.png"><br>IPC：Inter-Process Communication，即跨进程通信<br>AIDL：Android Interface Definition Language，即Android接口定义语言；用于让某个Service与多个应用程序组件之间进行跨进程通信，从而可以实现多个应用程序共享同一个Service的功能。</p>
<h5 id="远程服务-app"><a href="#远程服务-app" class="headerlink" title="远程服务 app"></a>远程服务 app</h5><p>新建一个server-app ，创建src/main/aidl/包名/名字.adil, src/main/java/包名/名字.service.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 远程服务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AidlService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;AidlService&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> IServer_AidlInterface.Stub mBinder = <span class="keyword">new</span> IServer_AidlInterface.Stub() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;------&gt;客户端通过aidl  和远程服务成功通信&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">sendStartMsg</span><span class="params">(<span class="keyword">int</span> a)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (a == <span class="number">100</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;hello a !!! from service&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        System.out.println(<span class="string">&quot;onCreate---&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;onStartCommand: &quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        System.out.println(<span class="string">&quot;OnDestroy---&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;OnBind--服务端启动-&gt;&quot;</span>);</span><br><span class="line">        <span class="comment">//在onBind()返回继承自Binder的Stub类型的Binder，非常重要</span></span><br><span class="line">        <span class="keyword">return</span> mBinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onUnbind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;onUnbind---&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onUnbind(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//aidl </span></span><br><span class="line"><span class="comment">// IServer_AidlInterface.aidl</span></span><br><span class="line"><span class="keyword">package</span> com.example.server;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare any non-default types here with import statements</span></span><br><span class="line"><span class="comment">//在新建AIDL文件里定义Service需要与Activity进行通信的内容（方法）</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IServer_AidlInterface</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Demonstrates some basic types that you can use as parameters</span></span><br><span class="line"><span class="comment">     * and return values in AIDL.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat,</span></span><br><span class="line"><span class="comment">//            double aDouble, String aString);</span></span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">connectTest</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function">String <span class="title">sendStartMsg</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>service 声明</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">queries</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">package</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.server&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">queries</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- exported =true 可以被其他进程访问--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.server.AidlService&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:process</span>=<span class="string">&quot;:remote&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">           &gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span>/&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--  //该Service可以响应带有scut.carson_ho.service_server.AIDL_Service1这个action的Intent。</span></span><br><span class="line"><span class="comment">           //此处Intent的action必须写成“服务器端包名.aidl文件名”--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.server.IServer_AidlInterface&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="客户端连接-服务端"><a href="#客户端连接-服务端" class="headerlink" title="客户端连接 服务端"></a>客户端连接 服务端</h4><p>拷贝server_app声明的aidl 和包名一起 ，创建src/main/aidl/包名/名字.adil, 最好什么都不修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口变量</span></span><br><span class="line">   <span class="keyword">private</span> IServer_AidlInterface maidl_service;</span><br><span class="line">   <span class="keyword">private</span> ServiceConnection connection = <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;name = &quot;</span> + name + <span class="string">&quot;, service = &quot;</span> + service);</span><br><span class="line">           maidl_service = IServer_AidlInterface.Stub.asInterface(service); <span class="comment">//获取服务端返回的binder 对象  讲ibinder 对象 复值给maidl_service;</span></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">//通过该对象调用在IServer_AidlInterface.aidl文件中定义的接口方法,从而实现跨进程通信</span></span><br><span class="line">               maidl_service.connectTest();</span><br><span class="line">               System.out.println(<span class="string">&quot;模拟发送&quot;</span>+maidl_service.sendStartMsg(<span class="number">100</span>));</span><br><span class="line">           &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//绑定服务</span></span><br><span class="line">   Intent intentService = <span class="keyword">new</span> Intent(<span class="string">&quot;com.example.server.IServer_AidlInterface&quot;</span>);</span><br><span class="line">   <span class="comment">//需要指定包名</span></span><br><span class="line">   <span class="comment">// intentService.setPackage(&quot;com.example.service_server&quot;);</span></span><br><span class="line">   intentService.setClassName(<span class="string">&quot;com.example.server&quot;</span>,<span class="string">&quot;com.example.server.AidlService&quot;</span>);</span><br><span class="line">   System.out.println(getApplicationContext().bindService(intentService, connection, Context.BIND_AUTO_CREATE));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//发送消息</span></span><br><span class="line">    System.out.println(<span class="string">&quot;模拟发送&quot;</span>+maidl_service.sendStartMsg(<span class="number">100</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="本地服务-service"><a href="#本地服务-service" class="headerlink" title="本地服务 service"></a>本地服务 service</h4><p>开启服务2中方式<br>bindserice:<br>oncreate-&gt;onBinder()–&gt;onUnbind()-&gt;onDestoy</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Intent intentService = <span class="keyword">new</span> Intent(<span class="string">&quot;android.test.local.service&quot;</span>);</span><br><span class="line">    <span class="comment">//需要指定包名</span></span><br><span class="line">  intentService.setPackage(<span class="string">&quot;com.example.webrtc&quot;</span>);</span><br><span class="line">   <span class="comment">// intentService.setClassName(&quot;com.example.server&quot;,&quot;com.example.server.AidlService&quot;);</span></span><br><span class="line">   getApplicationContext().bindService(intentService, localConnection, Context.BIND_AUTO_CREATE);</span><br></pre></td></tr></table></figure>


<p>startserice:<br>onCreate–&gt;onStartCommand(Intent intent,int flags,int starId)-&gt;StopService()-&gt;onDestory()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Intent mService = <span class="keyword">new</span> Intent(<span class="keyword">this</span>,MyLocalService.class);</span><br><span class="line">     startService(mService);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</font>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Aidl</tag>
      </tags>
  </entry>
  <entry>
    <title>AndroidHandler</title>
    <url>/2021/12/12/Android/AndroidHandler/</url>
    <content><![CDATA[<font size="2.9">

<h3 id="App-启动流程"><a href="#App-启动流程" class="headerlink" title="App 启动流程"></a>App 启动流程</h3><img src="/2021/12/12/Android/AndroidHandler/1.webp" class="">


<h3 id="webP"><a href="#webP" class="headerlink" title="webP"></a>webP</h3><p>WebP 对图片进行分块，然后对待填充的宏块使用了帧间预测技术，根据其附近已编码宏块的数据，预测出当前块数据。相比 JEPG 对图像原值进行编码，WebP 编码的是预测值和原值的差值，这是 WebP 体积更小的主要原因。最后，WebP 使用了更优秀的算数编码</p>
<p>WebP 完全兼容 Android 4.4 及其以上版本，而在另一大移动平台 iOS 上，则是完全不兼容 WebP。因此，我们需要在前端进行平台检测，对于支持 WebP 的平台输出 WebP，在不支持的平台上采用降级方案。</p>
<h3 id="模拟ANR"><a href="#模拟ANR" class="headerlink" title="模拟ANR"></a>模拟ANR</h3><ol>
<li>在oncreate,onstart,onresum  写一个耗时操作</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="comment">// android 前台服务 &gt; 5秒 ，卡主 ，这时候 请求主线程操作 比如更新UI 等 点击按钮等 出现ANR 。</span></span><br><span class="line">  <span class="comment">//1</span></span><br><span class="line">  Thread.sleep(<span class="number">10000</span>); <span class="comment">//</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2 比较容易出现</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">new</span> Handler().post(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">    <span class="meta">@overide</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">             <span class="keyword">long</span> current = System.currentTimeMillis();</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">long</span> time2 = System.currentTimeMillis();</span><br><span class="line">                    <span class="keyword">if</span> ((time2 - current) &gt;= <span class="number">10000</span>)&#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">&quot;run: ---------toatal----&quot;</span>+ (time2 -current));</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>


</font>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Handler,webp</tag>
      </tags>
  </entry>
  <entry>
    <title>AndroidJNI</title>
    <url>/2021/10/14/Android/AndroidJNI/</url>
    <content><![CDATA[<font size="2.9">

<h3 id="一、谈谈你对-JNI-和-NDK-的理解"><a href="#一、谈谈你对-JNI-和-NDK-的理解" class="headerlink" title="一、谈谈你对 JNI 和 NDK 的理解"></a>一、谈谈你对 JNI 和 NDK 的理解</h3><h4 id="JNI："><a href="#JNI：" class="headerlink" title="JNI："></a>JNI：</h4><p>JNI 是 <code>Java Native Interface</code> 的缩写，即 Java 的本地接口。</p>
<p>目的是使得 Java 与本地其他语言（如 C/C++）进行交互。</p>
<p>JNI 是属于 Java 的，与 Android 无直接关系。</p>
<h4 id="NDK："><a href="#NDK：" class="headerlink" title="NDK："></a>NDK：</h4><p>NDK 是 <code>Native Development Kit</code> 的缩写，是 Android 的工具开发包。</p>
<p>作用是更方便和快速开发 C/C++ 的动态库，并自动将动态库与应用一起打包到 apk。</p>
<p>NDK 是属于 Android 的，与 Java 无直接关系。</p>
<h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>JNI 是实现的目的，NDK 是 Android 中实现 JNI 的手段。</p>
<h3 id="二、谈谈你对-JNIEnv-和-JavaVM-理解"><a href="#二、谈谈你对-JNIEnv-和-JavaVM-理解" class="headerlink" title="二、谈谈你对 JNIEnv 和 JavaVM 理解"></a>二、谈谈你对 JNIEnv 和 JavaVM 理解</h3><h4 id="JavaVM"><a href="#JavaVM" class="headerlink" title="JavaVM"></a>JavaVM</h4><p>JavaVM 是虚拟机在 JNI 层的代表。</p>
<p>一个进程只有一个 JavaVM。（重要！）</p>
<p>所有的线程共用一个 JavaVM。（重要！）</p>
<h4 id="JNIEnv"><a href="#JNIEnv" class="headerlink" title="JNIEnv"></a>JNIEnv</h4><p>JNIEnv 表示 Java 调用 native 语言的环境，封装了几乎全部 JNI 方法的指针。</p>
<p>JNIEnv 只在创建它的线程生效，不能跨线程传递，不同线程的 JNIEnv 彼此独立。（重要！）</p>
<h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>在 native 环境下创建的线程，要想和 java 通信，即需要获取一个 JNIEnv 对象。我们通过 <code>AttachCurrentThread</code> 和 <code>DetachCurrentThread</code> 方法将 native 的线程与 JavaVM 关联和解除关联。</p>
<h3 id="三、解释一下-JNI-中全局引用和局部引用的区别和使用"><a href="#三、解释一下-JNI-中全局引用和局部引用的区别和使用" class="headerlink" title="三、解释一下 JNI 中全局引用和局部引用的区别和使用"></a>三、解释一下 JNI 中全局引用和局部引用的区别和使用</h3><h4 id="全局引用"><a href="#全局引用" class="headerlink" title="全局引用"></a>全局引用</h4><p>通过 <code>NewGlobalRef</code> 和 <code>DeleteGlobalRef</code> 方法创建和释放一个全局引用。</p>
<p>全局引用能在多个线程中被使用，且不会被 GC 回收，只能手动释放。</p>
<h4 id="局部引用"><a href="#局部引用" class="headerlink" title="局部引用"></a>局部引用</h4><p>通过 <code>NewLocalRef</code> 和 <code>DeleteLocalRef</code> 方法创建和释放一个局部引用。</p>
<p>局部引用只在创建它的 native 方法中有效，包括其调用的其它函数中有效。因此我们不能寄望于将一个局部引用直接保存在全局变量中下次使用（请使用全局引用实现该需求）。</p>
<p>我们可以不用删除局部引用，它们会在 native 方法返回时全部自动释放，但是建议对于不再使用的局部引用手动释放，避免内存过度使用。</p>
<h4 id="扩展：弱全局引用"><a href="#扩展：弱全局引用" class="headerlink" title="扩展：弱全局引用"></a>扩展：弱全局引用</h4><p>通过 <code>NewWeakGlobalRef</code> 和 <code>DeleteWeakGlobalRef</code> 创建和释放一个弱全局引用。</p>
<p>弱全局引用类似于全局引用，唯一的区别是它不会阻止被 GC 回收。</p>
<h3 id="四、JNI-线程间数据怎么互相访问"><a href="#四、JNI-线程间数据怎么互相访问" class="headerlink" title="四、JNI 线程间数据怎么互相访问"></a>四、JNI 线程间数据怎么互相访问</h3><p>考察点和上体类似，线程本来就是共享内存区域的，因此我们需要使用 <code>全局引用</code></p>
<h3 id="查看签名"><a href="#查看签名" class="headerlink" title="查看签名"></a>查看签名</h3><ol>
<li>javac -h .  xxx.java<br>生成jni 头文件</li>
</ol>
<h3 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h3><p>原理：利用 RegisterNatives 方法来注册 java 方法与 JNI 函数的一一对应关系；</p>
<p>实现流程：</p>
<ol>
<li>利用结构体 JNINativeMethod 数组记录 java 方法与 JNI 函数的对应关系；</li>
<li>实现 JNI_OnLoad 方法，在加载动态库后，执行动态注册；</li>
<li>调用 FindClass 方法，获取 java 对象；</li>
<li>调用 RegisterNatives 方法，传入 java 对象，以及 JNINativeMethod 数组，以及注册数目完成注册；</li>
</ol>
<p>优点：</p>
<ol>
<li>流程更加清晰可控；</li>
<li>效率更高；</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">jstring <span class="title">stringFromJNI</span><span class="params">(JNIEnv *env, jobject thiz)</span></span>&#123;</span><br><span class="line">    std::string hello = <span class="string">&quot;Hello from C++&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;<span class="built_in">NewStringUTF</span>(hello.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> JNINativeMethod gMethods[] = &#123;</span><br><span class="line">        &#123;<span class="string">&quot;stringFromJNI&quot;</span>, <span class="string">&quot;()Ljava/lang/String;&quot;</span>, (jstring*)stringFromJNI&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jint <span class="title">JNI_OnLoad</span><span class="params">(JavaVM* vm, <span class="keyword">void</span>* reserved)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;native&quot;</span>, <span class="string">&quot;Jni_OnLoad&quot;</span>);</span><br><span class="line">    JNIEnv* env = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(vm-&gt;<span class="built_in">GetEnv</span>((<span class="keyword">void</span>**)&amp;env, JNI_VERSION_1_4) != JNI_OK) <span class="comment">//从JavaVM获取JNIEnv，一般使用1.4的版本</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    jclass clazz = env-&gt;<span class="built_in">FindClass</span>(<span class="string">&quot;com/example/efan/jni_learn2/MainActivity&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!clazz)&#123;</span><br><span class="line">        __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;native&quot;</span>, <span class="string">&quot;cannot get class: com/example/efan/jni_learn2/MainActivity&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(env-&gt;<span class="built_in">RegisterNatives</span>(clazz, gMethods, <span class="built_in"><span class="keyword">sizeof</span></span>(gMethods)/<span class="built_in"><span class="keyword">sizeof</span></span>(gMethods[<span class="number">0</span>])))</span><br><span class="line">    &#123;</span><br><span class="line">        __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;native&quot;</span>, <span class="string">&quot;register native method failed!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> JNI_VERSION_1_4;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">12345678910111213141516171819202122232425262728</span></span><br></pre></td></tr></table></figure>

<h2 id="JNINativeMethod"><a href="#JNINativeMethod" class="headerlink" title="JNINativeMethod"></a>JNINativeMethod</h2><p>在动态注册的过程中使用到了结构体 JNINativeMethod 用于记录 java 方法与 jni 函数的对应关系</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* name;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* signature;</span><br><span class="line">    <span class="keyword">void</span>*       fnPtr;</span><br><span class="line">&#125; JNINativeMethod;<span class="number">12345</span></span><br></pre></td></tr></table></figure>

<p>结构体的第一个参数 name 是java 方法名；</p>
<p>第二个参数 signature 用于描述方法的参数与返回值；</p>
<p>第三个参数 fnPtr 是函数指针，指向 jni 函数；</p>
<p>其中，第二个参数 signature 使用字符串记录方法的参数与返回值，具体格式形如“()V”、“(II)V”，其中分为两部分，括号内表示的是参数，括号右侧表示的是返回值；</p>
<h2 id="数据类型映射"><a href="#数据类型映射" class="headerlink" title="数据类型映射"></a>数据类型映射</h2><ol>
<li>基本数据类型</li>
</ol>
<table>
<thead>
<tr>
<th>java 类型</th>
<th>native 类型</th>
<th>域描述符</th>
<th>补充</th>
</tr>
</thead>
<tbody><tr>
<td>boolean</td>
<td>jboolean</td>
<td>Z</td>
<td></td>
</tr>
<tr>
<td>byte</td>
<td>jbyte</td>
<td>B</td>
<td></td>
</tr>
<tr>
<td>char</td>
<td>jchar</td>
<td>C</td>
<td></td>
</tr>
<tr>
<td>short</td>
<td>jshort</td>
<td>S</td>
<td></td>
</tr>
<tr>
<td>int</td>
<td>jint</td>
<td>I</td>
<td></td>
</tr>
<tr>
<td>long</td>
<td>jlong</td>
<td>J</td>
<td></td>
</tr>
<tr>
<td>float</td>
<td>jfloat</td>
<td>F</td>
<td></td>
</tr>
<tr>
<td>double</td>
<td>jdouble</td>
<td>D</td>
<td></td>
</tr>
<tr>
<td>void</td>
<td>void</td>
<td>V</td>
<td></td>
</tr>
</tbody></table>
<ol start="2">
<li>数组引用类型</li>
</ol>
<p>如果是一维数组则遵循下表，如果是二维数组或更高维数组则对应的 native 类型为 jobjectArray，域描述符中使用 ‘[’ 的个数表示维数</p>
<table>
<thead>
<tr>
<th>java 类型</th>
<th>native 类型</th>
<th>域描述符</th>
<th>补充</th>
</tr>
</thead>
<tbody><tr>
<td>int[]</td>
<td>jintArray</td>
<td>[I</td>
<td></td>
</tr>
<tr>
<td>float[]</td>
<td>jfloatArray</td>
<td>[f</td>
<td></td>
</tr>
<tr>
<td>byte[]</td>
<td>jbyteArray</td>
<td>[B</td>
<td></td>
</tr>
<tr>
<td>char[]</td>
<td>jcharArray</td>
<td>[C</td>
<td></td>
</tr>
<tr>
<td>short[]</td>
<td>jshortArray</td>
<td>[S</td>
<td></td>
</tr>
<tr>
<td>double[]</td>
<td>jdoubleArray</td>
<td>[D</td>
<td></td>
</tr>
<tr>
<td>long[]</td>
<td>jlongArray</td>
<td>[F</td>
<td></td>
</tr>
<tr>
<td>boolean[]</td>
<td>jbooleanArray</td>
<td>[Z</td>
<td></td>
</tr>
</tbody></table>
<ol start="3">
<li>对象引用类型</li>
</ol>
<p>对于其它引用类型，即 java 中的对象，其映射规则为</p>
<table>
<thead>
<tr>
<th>java 类型</th>
<th>native 类型</th>
<th>域描述符</th>
<th>补充</th>
</tr>
</thead>
<tbody><tr>
<td>类名（如 Surface）</td>
<td>通常是 jobject，仅有一种例外，如果 java 类型是 String，则对应的native 类型是 jstring</td>
<td>以”L”开头，以”;”结尾中间是用”/” 隔开的包及类名（如 Landroid/view/Surface;）如果内部类则使用$连接内部类；</td>
<td></td>
</tr>
</tbody></table>
<ol start="4">
<li>对象数组引用类型</li>
</ol>
<p>如果是一维数组则遵循下表，如果是二维数组或更高维数组则对应的 native 类型为 jobjectArray，域描述符中使用 ‘[’ 的个数表示维数</p>
<table>
<thead>
<tr>
<th>java 类型</th>
<th>native 类型</th>
<th>域描述符</th>
<th>补充</th>
</tr>
</thead>
<tbody><tr>
<td>类名（如 Surface）</td>
<td>通常是 jobject，仅有一种例外，如果 java 类型是 String，则对应的native 类型是 jstring</td>
<td>在对象引用类型的域描述符的基础上在左边添加’[‘字符</td>
<td></td>
</tr>
</tbody></table>
<h2 id="jni-函数默认参数"><a href="#jni-函数默认参数" class="headerlink" title="jni 函数默认参数"></a>jni 函数默认参数</h2><p>在 jni 函数中有两个默认参数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">JNIEnv *env, jobject thiz1</span><br></pre></td></tr></table></figure>

<p>其中 JNIEnv 指代的是当前 java 环境，可以利用 JNIEnv 可以操作 java 层代码；jobject 指代的是 jni 函数对应的 java native 方法的类实例，如果 java 方法是 static，则代表的是 class 对象；</p>
</font>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>JNI</tag>
      </tags>
  </entry>
  <entry>
    <title>AndroidRecord</title>
    <url>/2021/11/02/Android/AndroidLog/</url>
    <content><![CDATA[<font size="2.9">

<h4 id="街篮2-录频没有声音"><a href="#街篮2-录频没有声音" class="headerlink" title="街篮2 录频没有声音"></a>街篮2 录频没有声音</h4><p>反馈没有声音<br>解决：试了demo 正常，可能设备音频解码 丢包，重启设备解决</p>
<h4 id="帕斯卡-云化探出框慢-概率出现"><a href="#帕斯卡-云化探出框慢-概率出现" class="headerlink" title="帕斯卡 云化探出框慢 概率出现"></a>帕斯卡 云化探出框慢 概率出现</h4><p>云化后咪咕反馈 弹出权限框慢<br>解决：添加日志 出现问题分析<br>反编译 添加smalli文件 重新加固</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">::<span class="built_in">RD</span> /S /Q %~dp0\unpak</span><br><span class="line">::<span class="built_in">echo</span> dp0 = %~dp0\unpak</span><br><span class="line"><span class="built_in">set</span>  I=&quot;resign&quot;</span><br><span class="line">::<span class="built_in">echo</span> <span class="variable">%I%</span></span><br><span class="line"> </span><br><span class="line">::<span class="keyword">call</span> java -jar &quot;%~dp0\apktool.jar&quot; d %<span class="number">1</span> -o %~dp0\unpak</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">::<span class="keyword">for</span> <span class="variable">%%I</span> <span class="keyword">in</span> (taptap,<span class="number">4399</span>,kuaibao) <span class="keyword">do</span> (</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">::<span class="built_in">copy</span> /y <span class="variable">%~dp0\%</span>%I\ztsdk_config.properties %~dp0\unpak\assets\ztsdk_config.properties </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> java -jar &quot;%~dp0\apktool.jar&quot;  b %~dp0\unpak -o <span class="variable">%~dp0\%</span>I%.apk</span><br><span class="line"></span><br><span class="line">::<span class="keyword">call</span> jarsigner -verbose -sigalg MD5withRSA -digestalg SHA1 -keystore %~dp0\GaiaRelease.keystore -storepass <span class="number">123456</span> -signedjar <span class="variable">%~dp0\gaia_%</span>I%.apk <span class="variable">%~dp0\%</span>I%.apk GaiaAlias</span><br><span class="line">::jarsigner -keystore /working/mystore -storepass &lt;keystore password&gt; -keypass &lt;private key password&gt; MyJARFile.jar duke</span><br><span class="line"><span class="keyword">call</span> jarsigner -verbose -sigalg MD5withRSA -digestalg SHA1 -keystore %~dp0\pascals.keystore -storepass Tipsworks@B109   -keypass pascals123   -signedjar <span class="variable">%~dp0\gaia_%</span>I%.apk <span class="variable">%~dp0\%</span>I%.apk pascals</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">del</span> <span class="variable">%~dp0\%</span>I%.apk</span><br><span class="line"></span><br><span class="line">::)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">::<span class="built_in">RD</span> /S /Q %~dp0\unpak</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> 日志显示 初始化2次。导致慢 Application 2次，初始化2次</p>
<p>配置好签名文件 ，目录为unpak </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Execution failed for task &#x27;:processReleaseResources&#x27;.</span><br><span class="line">&gt; A failure occurred while executing com.android.build.gradle.internal.tasks.Workers$ActionFacade</span><br><span class="line">   &gt; AAPT2 aapt2-3.6.0-6040484-osx Daemon #1: Unexpected error during link, attempting to stop daemon.</span><br><span class="line">     This should not happen under normal circumstances, please file an issue if it does.</span><br></pre></td></tr></table></figure>
<p>游戏编译出错，通过排除发现 不压缩超出限制,游戏有33000多个字符长度<br>改成下面这个 就可以了。<br>aaptOptions {<br>      noCompress = [‘.unity3d’, ‘.ress’, ‘.resource’,’.obb’] </p>
<pre><code>  &#125; 
</code></pre>
<h4 id="街篮2-白屏"><a href="#街篮2-白屏" class="headerlink" title="街篮2 白屏"></a>街篮2 白屏</h4><p>安装后启动出现白屏</p>
<p>二次打包 R文件 引用 提示找不到</p>
<blockquote>
<p>原因 ：第三方SDK 是当前包名 sdk.packageName.R.color.xxxx,非字符串调用</p>
</blockquote>
<p>导致使用apktool 时候 这个包名下没有生成，正常编译可以生成。</p>
<p>R生成原理 aar里面生成临时的，统一生成 static final 变量</p>
<blockquote>
<p>对于第三方SDK 里面R的调用 反编译替换，或者apktool使用aapt 手动生成。</p>
</blockquote>
<p>编译生成 和apktool    逆向不一样</p>
<h3 id="Dialog-全屏适配"><a href="#Dialog-全屏适配" class="headerlink" title="Dialog 全屏适配"></a>Dialog 全屏适配</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--此属性设置的dialog可以依照布局的宽高去设定而不是wrap_content--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;dialog_style_2&quot;</span>&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--注意此处 又设置全屏，不能设置这个属性为true 否则会有遮挡--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowIsFloating&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;/style</span></span><br></pre></td></tr></table></figure>
<p>或者</p>
<p><item name="android:windowFullscreen">true</item></p>
<p>总结：此方法通过设置theme 的windowIsFloating 为false ，从而使得contentView 的match_parent 对window起作用，从而达到全屏的效果，<br>否则会设置window的宽高为wrap_content，无法全屏,当然你可以通过设置一个空的Style,也可达到相同效果（windowIsFloating 默认为false），<br>但不可以不设置Style，因为会有默认的Style。</p>
<p>优点：简单，显示的window在状态栏下面</p>
<p>缺点：粒度小，且window一直为match_parent 即使内容变小，window仍不变小 ，导致外部无法触发点击消失事件，适合显示在状态栏下全屏的dialog，只适合全屏</p>
<h3 id="通过代码设置Dilaog全屏或者任意宽高"><a href="#通过代码设置Dilaog全屏或者任意宽高" class="headerlink" title="通过代码设置Dilaog全屏或者任意宽高"></a>通过代码设置Dilaog全屏或者任意宽高</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dialog3</span> <span class="keyword">extends</span> <span class="title">Dialog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Dialog3</span><span class="params">(<span class="meta">@NonNull</span> Context context, <span class="keyword">float</span> widthPercent, <span class="keyword">float</span> heightPercent)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(context);</span><br><span class="line">    setContentView(R.layout.dialog_test_layout);</span><br><span class="line">    <span class="comment">// 注意此方法一定要在setContentView后面，否则设置内容会被setContentView覆盖，此时由于默认没使用theme,按照默认的背景图来设置</span></span><br><span class="line">    <span class="comment">// 此时再设置window的宽高进行更细致的修改window参数</span></span><br><span class="line">    initWidthAndHeightByPercent(widthPercent, heightPercent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 用于根据传入的宽高的比例显示window</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initWidthAndHeightByPercent</span><span class="params">(<span class="keyword">float</span> widthPercent, <span class="keyword">float</span> heightPercent)</span> </span>&#123;</span><br><span class="line">        WindowManager windowManager = getWindow().getWindowManager();</span><br><span class="line">        Display display = windowManager.getDefaultDisplay();</span><br><span class="line">        WindowManager.LayoutParams lp = getWindow().getAttributes();</span><br><span class="line">        <span class="comment">//decorView是window中的最顶层view，可以从window中获取到decorView,获取状态栏的高度</span></span><br><span class="line">        <span class="keyword">int</span> statusBarHeight = getStatusBarHeight();</span><br><span class="line">        lp.width = (<span class="keyword">int</span>) (display.getWidth() * widthPercent); <span class="comment">//设置宽度</span></span><br><span class="line">        <span class="comment">//高度值需要减去状态栏的高度</span></span><br><span class="line">        lp.height = (<span class="keyword">int</span>) ((display.getHeight() - statusBarHeight) * heightPercent);</span><br><span class="line">        getWindow().setAttributes(lp);</span><br><span class="line">        <span class="comment">// 注意此处必须设置,因为window默认会设置一个有padding 的背景</span></span><br><span class="line">        getWindow().setBackgroundDrawable(<span class="keyword">new</span> ColorDrawable(Color.WHITE));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getStatusBarHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> statusBarHeight1 = -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//获取status_bar_height资源的ID</span></span><br><span class="line">        <span class="keyword">int</span> resourceId = getContext().getResources().getIdentifier(<span class="string">&quot;status_bar_height&quot;</span>, <span class="string">&quot;dimen&quot;</span>, <span class="string">&quot;android&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (resourceId &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//根据资源ID获取响应的尺寸值</span></span><br><span class="line">        statusBarHeight1 = getContext().getResources().getDimensionPixelSize(resourceId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> statusBarHeight1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="全屏显示（隐藏状态栏-和-底部导航栏）"><a href="#全屏显示（隐藏状态栏-和-底部导航栏）" class="headerlink" title="全屏显示（隐藏状态栏 和 底部导航栏）"></a>全屏显示（隐藏状态栏 和 底部导航栏）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//界面操作后 自动隐藏 交互</span></span><br><span class="line">view.setOnSystemUiVisibilityChangeListener(<span class="keyword">new</span> View.OnSystemUiVisibilityChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSystemUiVisibilityChange</span><span class="params">(<span class="keyword">int</span> visibility)</span> </span>&#123;</span><br><span class="line">                systemUiHide(view);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">systemUiHide</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//隐藏虚拟按键，并且全屏</span></span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt; <span class="number">11</span> &amp;&amp; Build.VERSION.SDK_INT &lt; <span class="number">19</span>) &#123; <span class="comment">// lower api</span></span><br><span class="line">            v.setSystemUiVisibility(View.GONE);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">19</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> uiOptions = View.SYSTEM_UI_FLAG_HIDE_NAVIGATION</span><br><span class="line">                    | View.SYSTEM_UI_FLAG_FULLSCREEN</span><br><span class="line">                    | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION</span><br><span class="line">                    | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY</span><br><span class="line">                    | View.SYSTEM_UI_FLAG_LAYOUT_STABLE</span><br><span class="line">                    | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN;</span><br><span class="line">            v.setSystemUiVisibility(uiOptions);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Shows the system bars by removing all the flags</span></span><br><span class="line"><span class="comment">// except for the ones that make the content appear under the system bars.</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showSystemUI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        View decorView = getWindow().getDecorView();</span><br><span class="line">        decorView.setSystemUiVisibility(</span><br><span class="line">                View.SYSTEM_UI_FLAG_LAYOUT_STABLE</span><br><span class="line">                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION</span><br><span class="line">                | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<h4 id="海外支付-Now-gg"><a href="#海外支付-Now-gg" class="headerlink" title="海外支付 Now.gg"></a>海外支付 Now.gg</h4><p>正常支付流程（登录成功后调，翻墙，配置沙箱模式，添加guid 白名单）</p>
<p>玩家正常支付 没有通过服务器验证，，需要自动补单(makeup) 消费</p>
<p>恢复购买（20消息，游戏调用）该sdk 没有</p>
<p>Androidstudio<br>使用快捷键“ctrl + alt +[”和“ctrl + alt + ]”快速切换。</p>
<p>F11 返回桌面</p>
<h4 id="查找ANR分析"><a href="#查找ANR分析" class="headerlink" title="查找ANR分析"></a>查找ANR分析</h4><ol>
<li><p>adb bugreport  目录 ，  拉去日志  分析  ，里面有个墓碑日志，保留堆栈函数调用现场。</p>
<p>bugrepotxxxx.txt </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep &quot;am_anr&quot; bugreport-PD2178-SP1A.210812.003-2022-06-16-14-20-45.txt</span><br><span class="line">0369  grep -r &quot;am_proc_died&quot;</span><br><span class="line">grep -r &quot;am_anr&quot;</span><br><span class="line"> grep -r &quot;anr&quot;</span><br><span class="line"> grep &quot;am_anr&quot;</span><br><span class="line">grep &quot;am_anr&quot; bugreport-PD2178-SP1A.210812.003-2022-06-16-14-20-45.txt</span><br><span class="line">grep &quot;ANR&quot; bugreport-PD2178-SP1A.210812.003-2022-06-16-14-20-45.txt</span><br><span class="line">grep &quot;com.ztgame.fire&quot; bugreport-PD2178-SP1A.210812.003-2022-06-16-14-20-45.txt</span><br><span class="line">grep &quot;com.ztgame.fir&quot; bugreport-PD2178-SP1A.210812.003-2022-06-16-14-20-45.txt</span><br><span class="line">grep &quot;com.ztgame.fir.vivo&quot; bugreport-PD2178-SP1A.210812.003-2022-06-16-14-20-45.txt</span><br><span class="line">grep &quot;am_low_memory&quot; bugreport-PD2178-SP1A.210812.003-2022-06-16-14-20-45.txt</span><br><span class="line">grep &quot;com.ztgame&quot;</span><br><span class="line">grep  -r   &quot;com.ztgame&quot;</span><br><span class="line">grep  -r   &quot;com.ztgame.fir.eagle&quot;</span><br><span class="line">grep  -r   &quot;com.ztgame.fir.vivo&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>adb pull /data/local/traces</code></p>
</li>
<li><p>查找依赖</p>
</li>
</ol>
<p><code>./gradlew -q app:dependencies</code></p>
<ol start="3">
<li>查看apk v1 v2 签名</li>
</ol>
<p><code>./apksigner verify -v /Users/caiyuhao/Downloads/Newzt_1.0.0tt\(1\).apk </code></p>
<h3 id="frida"><a href="#frida" class="headerlink" title="frida"></a>frida</h3><ol>
<li><p>端口相关<br><code>Unable to start: Error binding to address 127.0.0.1:27042: Address already in use</code></p>
<p><code>adb shell</code>  下查找 进程 <code>netstat -tunlp </code></p>
</li>
</ol>
<p><code>kill  -9 pid</code></p>
<ol start="2">
<li><p>启动 <code>./androidhook --fs-start</code></p>
</li>
<li><p><code>adb shell getprop ro.product.cpu.abi</code> 获取abi <code>https://github.com/frida/frida/releases</code></p>
</li>
</ol>
<p><code>adb pull frida-server*  /data/local/tmp/</code></p>
<p><code>adb shell chmod  777 frida-server* </code></p>
<p><code>./frida-server</code></p>
<ol start="4">
<li> 查看进程  <code>frida-ps -U</code></li>
</ol>
<h3 id="python-websocket"><a href="#python-websocket" class="headerlink" title="python websocket"></a>python websocket</h3><ol>
<li>ModuleNotFoundError：即使我安装了pip install websocket，也没有名为“ websocket”的模块</li>
</ol>
<p><code>pip3 install websocket -i -i https://pypi.tuna.tsinghua.edu.cn/simple  </code></p>
<p>客户端相关<br><code>pip3 install websocket-client -i -i https://pypi.tuna.tsinghua.edu.cn/simple  </code></p>
<h3 id="Pixel-2xl-刷机"><a href="#Pixel-2xl-刷机" class="headerlink" title="Pixel 2xl 刷机"></a>Pixel 2xl 刷机</h3><ol>
<li><p>对应recovery 是 twrp.img(临时)和 twrp.zip(永久)<code>https://twrp.me/Devices/</code>搜索对应设备</p>
</li>
<li><p>然后通过Magisk 刷root  </p>
</li>
<li><p>版本对应</p>
</li>
<li><p>因为当时刷的twrp.img,oat11降到oat8 ,取法 启动，出现机器人<code>nocommand</code>,一直卡这里。</p>
</li>
<li><p>后来通过。。。知道 电源键 + 音量上键 出现刷机recory 界面，<code>swip factory /yes ,instal  from adb</code> ,<code>adb sideload xx.zip</code>  可以砖就回来。</p>
</li>
</ol>
</font>

]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>问题记录</tag>
      </tags>
  </entry>
  <entry>
    <title>AndroidSdkHotFix</title>
    <url>/2022/08/13/Android/AndroidSdkHotFix/</url>
    <content><![CDATA[<font size="2.9">

<h6 id="关于插件"><a href="#关于插件" class="headerlink" title="关于插件"></a>关于插件</h6><p>插件化的使用场景：</p>
<p>1、线上新增功能（如淘宝、支付宝等）</p>
<p>2、热修复（通过下发补丁插件，完成对功能的修复）</p>
<p>3、当编译太慢时，可以使用插件化，对某些不改动的代码做成插件，加快编译速度</p>
<h6 id="关于类加载"><a href="#关于类加载" class="headerlink" title="关于类加载"></a>关于类加载</h6><img src="/2022/08/13/Android/AndroidSdkHotFix/img.webp" class="" title="classLoader">


<h5 id="关于插件实现"><a href="#关于插件实现" class="headerlink" title="关于插件实现"></a>关于插件实现</h5><p><code>占位式实现插件化</code></p>
<p>1、特点</p>
<p>1、插件遵从宿主的定义的标准，使用宿主的上下文环境。</p>
<p>2、优点：只使用了少量反射，无hook，实现简单</p>
<p>3、缺点：在插件中只能使用宿主提供的上下文环境，如插件Activity中，不能使用this当上下文，也就是说有一定侵入性，需要修改插件Activity的实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ActivityInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把宿主(app)的环境  给  插件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> appActivity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertAppContext</span><span class="params">(Activity appActivity)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生命周期方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//此处省略了其他声明周期，只做演示使用</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>在插件模块中，根据标准实现插件Activity</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据标准实现的插件模块中的BaseActivity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> <span class="keyword">implements</span> <span class="title">ActivityInterface</span> </span>&#123;</span><br><span class="line">	<span class="comment">//宿主传递过来的上下文</span></span><br><span class="line">    <span class="keyword">public</span> Activity appActivity; <span class="comment">// 宿主的环境</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertAppContext</span><span class="params">(Activity appActivity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.appActivity = appActivity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint(&quot;MissingSuperCall&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint(&quot;MissingSuperCall&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint(&quot;MissingSuperCall&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint(&quot;MissingSuperCall&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//实际上走的是宿主的setContentView方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(<span class="keyword">int</span> resId)</span> </span>&#123;</span><br><span class="line">        appActivity.setContentView(resId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">findViewById</span><span class="params">(<span class="keyword">int</span> layoutId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> appActivity.findViewById(layoutId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        Intent intentNew = <span class="keyword">new</span> Intent();</span><br><span class="line">        intentNew.putExtra(<span class="string">&quot;className&quot;</span>, intent.getComponent().getClassName()); <span class="comment">// TestActivity 全类名</span></span><br><span class="line">        appActivity.startActivity(intentNew);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//BaseActivity是关键</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PluginActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.plugin_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// this 会报错，因为插件没有安装，也没有组件的环境，所以必须使用宿主环境</span></span><br><span class="line">        Toast.makeText(appActivity, <span class="string">&quot;我是插件&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">		</span><br><span class="line">        findViewById(R.id.bt_start_activity).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            	<span class="comment">//这个startActivity走的是BaseActivity的startActivity，也是被代理过的</span></span><br><span class="line">                startActivity(<span class="keyword">new</span> Intent(appActivity, TestActivity.class));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>将插件模块打包apk，在宿主中加载该apk</code></p>
<p>对插件apk的加载主要分为两个步骤，即加载类和加载资源。加载类使用的是自定义的DexClassLoader，加载资源使用的是反射调用AssetManager的addAssetPath方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PluginManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = PluginManager.class.getSimpleName();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> PluginManager pluginManager;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PluginManager <span class="title">getInstance</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pluginManager == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (PluginManager.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (pluginManager == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    pluginManager = <span class="keyword">new</span> PluginManager(context);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pluginManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PluginManager</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> DexClassLoader dexClassLoader;</span><br><span class="line">    <span class="keyword">private</span> Resources resources;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、加载类</span></span><br><span class="line"><span class="comment">     * 2、加载资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadPlugin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File file = AssetUtils.copyAssetPlugin(context, <span class="string">&quot;p.apk&quot;</span>, <span class="string">&quot;plugin&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;插件包 不存在...&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String pluginPath = file.getAbsolutePath();</span><br><span class="line">            File fileDir = context.getDir(<span class="string">&quot;pDir&quot;</span>, Context.MODE_PRIVATE);</span><br><span class="line">            dexClassLoader = <span class="keyword">new</span> DexClassLoader(pluginPath, fileDir.getAbsolutePath(), <span class="keyword">null</span>, context.getClassLoader());</span><br><span class="line"></span><br><span class="line">         </span><br><span class="line">            <span class="comment">// 加载资源</span></span><br><span class="line">            AssetManager assetManager = AssetManager.class.newInstance();</span><br><span class="line">            Method addAssetPathMethod = assetManager.getClass().getMethod(<span class="string">&quot;addAssetPath&quot;</span>, String.class); </span><br><span class="line">            addAssetPathMethod.invoke(assetManager, pluginPath); <span class="comment">// 插件包的路径   pluginPath</span></span><br><span class="line">            Resources r = context.getResources(); <span class="comment">// 宿主的资源配置信息</span></span><br><span class="line">            <span class="comment">// 特殊的 Resources，加载插件里面的资源的 Resources</span></span><br><span class="line">            resources = <span class="keyword">new</span> Resources(assetManager, r.getDisplayMetrics(), r.getConfiguration()); </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClassLoader <span class="title">getClassLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dexClassLoader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Resources <span class="title">getResources</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> resources;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>在宿主中定义占位的Activity</code><br>这里最重要的步骤为：</p>
<p>1、重写getResources和getClassLoader方法，使用插件的ClassLoader和插件的Resources</p>
<p>2、实例化出来插件Activity</p>
<p>3、给插件Activity注入上下文</p>
<p>4、调用插件Activity的onCreate方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里使用的是插件中的资源</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Resources <span class="title">getResources</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PluginManager.getInstance(<span class="keyword">this</span>).getResources();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里使用的是插件中的类加载器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClassLoader <span class="title">getClassLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PluginManager.getInstance(<span class="keyword">this</span>).getClassLoader();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 真正的加载 插件里面的 Activity</span></span><br><span class="line">        String className = getIntent().getStringExtra(<span class="string">&quot;className&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class mPluginActivityClass = getClassLoader().loadClass(className);</span><br><span class="line">            <span class="comment">// 实例化 插件包里面的 Activity</span></span><br><span class="line">            Constructor constructor = mPluginActivityClass.getConstructor(<span class="keyword">new</span> Class[]&#123;&#125;);</span><br><span class="line">            Object mPluginActivity = constructor.newInstance(<span class="keyword">new</span> Object[]&#123;&#125;);</span><br><span class="line"></span><br><span class="line">            ActivityInterface activityInterface = (ActivityInterface) mPluginActivity;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 给插件注入上下文</span></span><br><span class="line">            activityInterface.insertAppContext(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">            Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">            bundle.putString(<span class="string">&quot;appName&quot;</span>, <span class="string">&quot;我是宿主传递过来的信息&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行插件里面的onCreate方法</span></span><br><span class="line">            activityInterface.onCreate(bundle);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        String className = intent.getStringExtra(<span class="string">&quot;className&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Intent proxyIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, ProxyActivity.class);</span><br><span class="line">        proxyIntent.putExtra(<span class="string">&quot;className&quot;</span>, className); <span class="comment">// 包名+TestActivity</span></span><br><span class="line">        <span class="comment">// 要给TestActivity 进栈</span></span><br><span class="line">        <span class="keyword">super</span>.startActivity(proxyIntent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>小结</code></p>
<p>至此，可以实现简单的占位式插件化了，我们来总结下步骤：<br>1、定义宿主和插件之间的标准，如Activity的标准为IActivityInterface</p>
<p>2、根据标准实现插件模块，打成apk文件（这里最重要的是插件中使用的上下文是宿主中传递过来的）</p>
<p>3、宿主中加载插件模块apk</p>
<p>4、定义占位Activity，在OnCreate方法中，根据Intent携带的插件Activity信息，反射插件Activity实例，为插件Activity注入占位Activity的上下文，调用插件Activity实例的onCreate方法启动<br>这种实现方式的优点是：全程仅有少量的反射，并无hook系统操作，适配工作简单。<br>缺点也很明显，在插件Activity中，需要遵守宿主规则，如果要做成框架，侵入性这个问题难以解决</p>
<h5 id="关于dpi"><a href="#关于dpi" class="headerlink" title="关于dpi"></a>关于dpi</h5><img src="/2022/08/13/Android/AndroidSdkHotFix/img_1.webp" class="" title="classLoader">


<h5 id="Java还有两个和动态化相关的特性，一个是接口，另一个是向上转型。"><a href="#Java还有两个和动态化相关的特性，一个是接口，另一个是向上转型。" class="headerlink" title="Java还有两个和动态化相关的特性，一个是接口，另一个是向上转型。"></a>Java还有两个和动态化相关的特性，一个是接口，另一个是向上转型。</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; implClass = classLoader.loadClass(<span class="string">&quot;com.xxx.AImpl&quot;</span>);</span><br><span class="line">Object implObject = implClass.newInstance();</span><br><span class="line">A a = (A) implObject;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里假设classLoader动态加载了一些Java类，其中就有一个类叫做com.xxx.AImpl，AImpl继承自A，或者AImpl实现了A接口。注意这里用了强制类型转换，是因为代码层面是将Object类型向下转型成了A。但实际上我们知道implObject的类型是AImpl，AImpl转换成A是一个向上转型。向上转型总是安全的。所以用这种方法总是可以先定义出接口，精心设计接口，让接口足够通用和稳定。只要接口不变，它的实现总是可以修改的。我们将接口打包在宿主中，接口就轻易不能更新了。但是它的实现总是可以更新的。</p>
<p>所有的插件框架中，Activity的加载都是这样的，new一个DexClassLoader加载插件apk。然后从插件ClassLoader中load指定的插件Activity名字，newInstance之后强转为Activity类型使用。实际上Android系统自身在启动Activity时也是这样做的。所以这就是插件机制能动态更新Activity的基本原理。<br>所以，所有的插件框架在解决的问题都不是如何动态加载类，而是动态加载的Activity没有在AndroidManifest中注册，该如何能正常运行。如果Android系统没有AndroidManifest的限制，那么所有插件框架都没有存在的必要了。因为Java语言本身就支持动态更新实现的能力。</p>
</font>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>HotFix</tag>
      </tags>
  </entry>
  <entry>
    <title>Java通用代码分装</title>
    <url>/2021/01/05/Android/GeneralCode/</url>
    <content><![CDATA[<font size="2.9">

<h4 id="封装通用类型"><a href="#封装通用类型" class="headerlink" title="封装通用类型"></a>封装通用类型</h4><span id="more"></span>
<blockquote>
<p>csharp 通过jni调用Java   </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">Show</span><span class="params">(String methodName, String args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (!TextUtils.isEmpty(methodName) &amp;&amp; methodName.equals(<span class="string">&quot;RegCallback&quot;</span>))&#123;</span><br><span class="line">           GiantSDK.athenaCallback(args.split(<span class="string">&quot;&amp;&quot;</span>)[<span class="number">0</span>],args.split(<span class="string">&quot;&amp;&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       ReflectUtils mReflectUtils = <span class="keyword">null</span>;</span><br><span class="line">       Method mReflectMothod = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">int</span> length = JumpArgs(args);</span><br><span class="line">       Log.e(TAG, <span class="string">&quot;args = &quot;</span> + args);</span><br><span class="line">       <span class="keyword">if</span> (mGaSdkClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="comment">//无返回值的方法</span></span><br><span class="line">           mReflectUtils = ReflectUtils.reflect(mGaSdkClass).newInstance();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line">                   mReflectMothod = mReflectUtils.get().getClass().getDeclaredMethod(methodName);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (length == <span class="number">1</span>) &#123;</span><br><span class="line">                   Class[] classes = <span class="keyword">new</span> Class[<span class="number">1</span>];</span><br><span class="line">                   classes[<span class="number">0</span>] = String.class;</span><br><span class="line">                   mReflectMothod = mReflectUtils.get().getClass().getDeclaredMethod(methodName, classes);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                   Class[] classes = <span class="keyword">new</span> Class[<span class="number">2</span>];</span><br><span class="line">                   classes[<span class="number">0</span>] = String.class;</span><br><span class="line">                   classes[<span class="number">1</span>] = String.class;</span><br><span class="line">                   mReflectMothod = mReflectUtils.get().getClass().getDeclaredMethod(methodName, classes);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (mReflectMothod.getReturnType().equals(Void.TYPE)) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line">                       <span class="comment">//无参数</span></span><br><span class="line">                       mReflectUtils.method(methodName);</span><br><span class="line">                       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">if</span> (length == <span class="number">1</span>) &#123;</span><br><span class="line">                       <span class="comment">//一个参数</span></span><br><span class="line">                       mReflectUtils.method(methodName, args);</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       String[] argsArray = args.split(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">                       mReflectUtils.method(methodName, argsArray[<span class="number">0</span>], argsArray[<span class="number">1</span>]);</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">//有返回值</span></span><br><span class="line">               String result = <span class="keyword">null</span>;</span><br><span class="line">               <span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line">                   result = <span class="string">&quot;&#123;\&quot;&quot;</span> + methodName + <span class="string">&quot;\&quot;:&quot;</span> + mReflectUtils.method(methodName).get() + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (length == <span class="number">1</span>) &#123;</span><br><span class="line">                   result = <span class="string">&quot;&#123;\&quot;&quot;</span> + methodName + <span class="string">&quot;\&quot;:&quot;</span> + mReflectUtils.method(methodName, args).get() + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                   String[] argsArray = args.split(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">                   result = <span class="string">&quot;&#123;\&quot;&quot;</span> + methodName + <span class="string">&quot;\&quot;:&quot;</span> + mReflectUtils.method(methodName, argsArray[<span class="number">0</span>], argsArray[<span class="number">1</span>]).get() + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               Log.d(TAG, <span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">               <span class="keyword">return</span> result;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</font>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Code</tag>
      </tags>
  </entry>
  <entry>
    <title>HandlerBinder</title>
    <url>/2021/12/06/Android/HandlerBinder/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Kotlin学习记录</title>
    <url>/2018/08/07/Android/Kotlin-Null/</url>
    <content><![CDATA[<font size="2.9">

<h3 id="可空类型-和非空类型"><a href="#可空类型-和非空类型" class="headerlink" title="可空类型 和非空类型"></a>可空类型 和非空类型</h3><p> kotlin 的类型系统在消除代码的NullPointerExcepion NPE</p>
<p> 安全调用符：?.<br> b?.length</p>
<p>第三种 是为NPE爱好者准备的<br> 非空断言 运算符（!!）操作符 将任何值 转换为非空类型， 如果</p>
<span id="more"></span>
<h4 id="NULL-和-nullptr"><a href="#NULL-和-nullptr" class="headerlink" title="NULL 和 nullptr"></a>NULL 和 nullptr</h4><blockquote>
<p>在C的头文件中</p>
</blockquote>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NULL ((void*)0)</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>在C++ 中</p>
</blockquote>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NULL 0</span></span><br></pre></td></tr></table></figure>

<p><strong>如果你想表示空指针，那么使用nullptr，而不是NULL。</strong><br><strong>注：nullptr在C++ 11中才出现。</strong></p>
</font>

]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>Video记录</title>
    <url>/2020/12/24/Android/Videoview/</url>
    <content><![CDATA[<font size="2.9">

<h5 id="VideoView"><a href="#VideoView" class="headerlink" title="VideoView"></a>VideoView</h5><blockquote>
<p>测试链接 <strong><a href="https://media.w3.org/2010/05/sintel/trailer.mp4">https://media.w3.org/2010/05/sintel/trailer.mp4</a></strong></p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">lateinit</span> <span class="keyword">var</span> progressBar: ProgressBar</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> videoView: VideoView</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> mediaController: MediaController</span><br><span class="line">    <span class="keyword">var</span> positionWhenPause: <span class="built_in">Int</span> = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_audio)</span><br><span class="line"></span><br><span class="line">        videoView  = findViewById(R.id.videoVideo)</span><br><span class="line">        progressBar = findViewById(R.id.progress_circular)</span><br><span class="line"></span><br><span class="line"> mediaController = MediaController(<span class="keyword">this</span>)</span><br><span class="line">        videoView.setMediaController(mediaController)</span><br><span class="line">        mediaController.show(<span class="number">0</span>)</span><br><span class="line">        <span class="comment">//complete</span></span><br><span class="line">        videoView.setOnCompletionListener &#123; MediaPlayer.OnCompletionListener &#123;</span><br><span class="line">           Log.e(<span class="string">&quot;TAG&quot;</span>,<span class="string">&quot;播放 完成&quot;</span>)</span><br><span class="line">        &#125; &#125;</span><br><span class="line">        videoView.setOnErrorListener(MediaPlayer.OnErrorListener &#123; mp, what, extra -&gt;</span><br><span class="line">            println(<span class="string">&quot;<span class="variable">$mp</span>,what = <span class="variable">$what</span>,extra = <span class="variable">$extra</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span><span class="symbol">@OnErrorListener</span> <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">        videoView.setOnPreparedListener &#123;</span><br><span class="line">            videoView.start()</span><br><span class="line">            progressBar.visibility = View.GONE</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置videoView 的点击监听</span></span><br><span class="line">        videoView.setOnTouchListener(View.OnTouchListener &#123; v, event -&gt;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span><span class="symbol">@OnTouchListener</span> <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4</span></span><br><span class="line">        <span class="keyword">val</span> mp4id = resources.getIdentifier(<span class="string">&quot;trailer&quot;</span>,<span class="string">&quot;raw&quot;</span>,<span class="keyword">this</span>.packageName)</span><br><span class="line">     <span class="comment">//   val uri = Uri.parse(&quot;android.resource://com.bytedance.scenedemo/$mp4id&quot;)</span></span><br><span class="line">        <span class="keyword">val</span> uri = Uri.parse(<span class="string">&quot;http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4&quot;</span>)</span><br><span class="line"><span class="comment">//        videoView.setVideoPath()</span></span><br><span class="line">        videoView.setVideoURI(uri)</span><br><span class="line">        setVideoViewLayoutParams(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p><strong>view宽和高</strong></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">setVideoViewLayoutParams</span><span class="params">(x: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//全屏</span></span><br><span class="line">        <span class="keyword">val</span> layoutParams = RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.MATCH_PARENT)</span><br><span class="line">        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM)</span><br><span class="line">        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_TOP)</span><br><span class="line">        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_LEFT)</span><br><span class="line">        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT)</span><br><span class="line">        videoView.layoutParams = layoutParams</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//窗口模式</span></span><br><span class="line">        <span class="keyword">val</span> display = DisplayMetrics()</span><br><span class="line">        windowManager.defaultDisplay.getMetrics(display)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> vHeight = DisplayMetrics.DENSITY_HIGH</span><br><span class="line">        <span class="keyword">val</span> vWidth = DisplayMetrics.DENSITY_DEFAULT</span><br><span class="line">        <span class="keyword">val</span> layoutParams = RelativeLayout.LayoutParams(vWidth,vHeight)</span><br><span class="line">        layoutParams.addRule(RelativeLayout.ALIGN_TOP)</span><br><span class="line">        videoView.layoutParams = layoutParams</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>布局</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">VideoView</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:id</span>=<span class="string">&quot;@+id/videoVideo&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">       /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ProgressBar</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:id</span>=<span class="string">&quot;@+id/progress_circular&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_centerInParent</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">       /&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>我测试的是本地视频</strong></p>
<blockquote>
<p>获取Raw资源</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> mp4id = resources.getIdentifier(<span class="string">&quot;trailer&quot;</span>,<span class="string">&quot;raw&quot;</span>,<span class="keyword">this</span>.packageName)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</font>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>VideoView</tag>
      </tags>
  </entry>
  <entry>
    <title>webrtc记录</title>
    <url>/2020/12/21/Android/Webrtc/</url>
    <content><![CDATA[<font size="2.9">

<h3 id="WebRtc-简介"><a href="#WebRtc-简介" class="headerlink" title="WebRtc 简介"></a>WebRtc 简介</h3><blockquote>
<p>WebRTC名称源自网页实时通信(Web Real-Time Communication)的缩写，是一个支持网页浏览器进行实时语音对话或视频对话的技术，是谷歌2010年以6820万美元收购Global IP Solutions公司而获得的一项技术。Google于2011年6月3日开源的即时通讯项目，旨在使其成为客户端视频通话的标准。其实在Google将WebRTC开源之前，微软和苹果各自的通讯产品已占用很大市场份额（如Skype），Google`也是为了快速扩大市场，所以将他给开源。在行业内得到了广泛的支持和应用，成为下一代视频通话的标准。更多介绍可以自行去官网上看。</p>
</blockquote>
<blockquote>
<p>WebRTC被誉为是web长期开源开发的一个新启元，是近年来Web开发的最重要创新。WebRTC允许Web开发者在其web应用中添加视频聊天或者点对点数据传输，不需要复杂的代码或者昂贵的配置。目前支持Chrome、Firefox和Opera，后续会支持更多的浏览器，它有能力达到数十亿的设备。</p>
</blockquote>
<h3 id="编译WebRTC"><a href="#编译WebRTC" class="headerlink" title="编译WebRTC"></a>编译WebRTC</h3><blockquote>
<p>参考声网的国内镜像（我试图编译 镜像下载失败）<strong><a href="https://webrtc.org.cn/mirror/">https://webrtc.org.cn/mirror/</a></strong></p>
</blockquote>
 <span id="more"></span>
<h3 id="Android-webrtc"><a href="#Android-webrtc" class="headerlink" title="Android-webrtc"></a>Android-webrtc</h3><blockquote>
<p>android依赖</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">implementation &#x27;org.webrtc:google-webrtc:1.0.26131&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>1.打开摄像头<br>2.本地回环<br>3.信令<br>4.多人视频</p>
</font>]]></content>
  </entry>
  <entry>
    <title>adbTools</title>
    <url>/2022/09/05/Android/adbTools/</url>
    <content><![CDATA[<font size='2.9'>

<h4 id="adb-shell"><a href="#adb-shell" class="headerlink" title="adb shell"></a>adb shell</h4><ol>
<li><p>获取当前任务栈</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">adb shell dumpsys activity | grep -i run</span><br><span class="line"><span class="comment">//查看activity 栈   </span></span><br><span class="line">adb shell dumpsys activity activities | findstr com.ztgame.yyzy</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取手机安装包</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//grep 搜索</span></span><br><span class="line">adb shell pm list packages | grep -i 包名  </span><br><span class="line"></span><br><span class="line"><span class="comment">//路径</span></span><br><span class="line">adb shell pm path com.ztgame.yyzy</span><br><span class="line"></span><br><span class="line">adb pull path</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>清楚数据缓存目录</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">adb shell pm clear com.ztgame.yyzy</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动activity</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">adb shell am start -n com.googleplayapp.storerootsuaction/.MainActivity</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动service</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line">adb shell am startService  com.googleplayapp.storerootsuaction/.MainActivity  </span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>发送广播</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">adb shell am broadcast -a <span class="string">&quot;xxxAction&quot;</span></span><br><span class="line">adb shell am broadcast -n  com.ztgame.yyzy/.MyService</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>adb shell logcat 过滤字符串</p>
<pre><code class="shell">
  logcat ｜ grep &quot;com.ztgame.bob&quot;
</code></pre>
</li>
</ol>
<ol start="8">
<li><p>本地检索</p>
<pre><code class="shell">
    find . -name &quot;xxx.java&quot; | xargs grep &quot;content&quot;
</code></pre>
</li>
<li><p>app 使用相关内存</p>
</li>
</ol>
<pre><code>```shell

   adb shell  dumpsys meminfo com.ztgame.pz

```   
</code></pre>




</font>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>adb</tag>
      </tags>
  </entry>
  <entry>
    <title>android_framework</title>
    <url>/2022/08/28/Android/android-framework/</url>
    <content><![CDATA[<font size="2.6">

<h5 id="配置中心以及灰度测试"><a href="#配置中心以及灰度测试" class="headerlink" title="配置中心以及灰度测试"></a>配置中心以及灰度测试</h5><p>app必备工具之一，配置中心主要负责的就是动态化的配置，比如文本展示类似这些的。sdk提供方需要负责的是提供动态更新能力，这里有个差异化更新，只更新dif部分，还有就是流量优化等等需要开发同学考虑的。然后可以考虑下存储性能方面的提升等。<br>而abtest也是app必备工具之一了，动态的下发实验策略，之后开发同学可以切换实验的页面。另外主要需要考虑灰度结果计算，分桶以及版本过滤白名单等等。这里只是一个简单的介绍不展开，因为我只是一个使用方。</p>
<h5 id="调试组件"><a href="#调试组件" class="headerlink" title="调试组件"></a>调试组件</h5><p>个人还是更推荐滴滴的 <a href="https://github.com/didi/DoraemonKit">Dokit</a>，功能点比较多而且接入相对来说比较简单。而且提供了很多给开发同学定制的能力，可以在debug情况下增加很多业务相关的测试功能，方便测试同学，核心还是浮窗太方便了。<br>当然很多实验性的预研功能等其实都可以直接接在这里，然后在测试环境下充分展开，之后在进行线上灰度方案。还有一些具有风险的hook操作，个人也比较建议放在debug组件上。</p>
<h5 id="性能监控框架"><a href="#性能监控框架" class="headerlink" title="性能监控框架"></a>性能监控框架</h5><p>这部分有几个不同的方面，首先是异常崩溃方面的，另外则是性能监控方面的，但是他们整体是划分在一起的，都属于线上性能监控体系的。<br>Crash相关的，可以从爱奇艺的<a href="https://github.com/iqiyi/xCrash">xCrash</a>学起。包含了崩溃日志，ANR以及native crash，因为版本适配的问题ANR在高版本上已经不是这么好捞了，还有就是native crash相关的。是一个非常牛逼的库了。<br>而线上的性能监控框架可以从腾讯的<a href="https://github.com/Tencent/matrix">Matrix</a>学起,以前有两篇文章介绍的内容也都是和Matrix相关的, Matrix首页上也有介绍，比如fps，卡顿，IO，电池，内存等等方面的监控。其中卡顿监控涉及到的就是方法前后插桩，同时要有函数的mapping表，插桩部分整体来说比较简单感觉。<br>另外关于线上内存相关的，推荐各位可以学习下快手的<a href="https://github.com/KwaiAppTeam/KOOM">koom</a>, 对于hprof的压缩比例听说能达到70%，也能完成线上的数据回捞以及监控等等，是一个非常屌的框架。下面给大家一个抄答案的方式。字节也有一个类似的原理其实也差不多。</p>
<blockquote>
<p>主进程发现内存到达阈值的时候，用leakcanary的方案，通过shark fork进程内存，之后生成hrop。由于hrop文件相对较大，所以我们需要对于我们所要分析的内容进行筛选，可以通过xhook，之后对hrop的写入操作进行hook，当发现写入内容的类型符合我们的需要的情况下才进行写入。</p>
</blockquote>
<blockquote>
<p>而当我们要做线上日志回捞的情况，需要对hprof 进行压缩，具体算法可以参考koom/raphel，有提供对应的压缩算法。</p>
</blockquote>
<blockquote>
<p>最后线上回捞机制就是基于一个指令，回捞线上符合标准的用户的文件操作，这个自行设计。</p>
</blockquote>
<p>其实上述几个库都还是有一个本质相关的东西，那么就是plthook,这个上面三个库应该都有对其的使用，之前是爱奇艺的<a href="https://github.com/iqiyi/xHook">xhook</a>，现在是字节的<a href="https://github.com/bytedance/bhook">bhook</a>, 这个大佬也是我的偶像之一了，非常离谱了算是。</p>
<blockquote>
<p><a href="https://juejin.cn/post/6890754507639095303">Android 性能采集之Fps,Memory,Cpu</a> 和 <a href="https://juejin.cn/post/6900810600188739592">Android IO监控</a></p>
</blockquote>
<p>最近已经不咋写这部分相关了，所以也就没有深挖，但是后续可能会有一篇关于phtead hook相关的，也是之前matrix更新的一个新东西，还在测试环境灰度阶段。</p>
<h5 id="基础网络组件"><a href="#基础网络组件" class="headerlink" title="基础网络组件"></a>基础网络组件</h5><p>虽然核心可能还是三方网络库，但是因为基本所有公司都对网络方面有调整和改动，以及解析器等方面的优化，其实可以挖的东西也还是蛮多的。<br>应付面试的同学可以看看<a href="https://juejin.cn/post/6896302142542315533">Android网络优化方案</a>。当然还是要具体问题具体分析，毕竟头疼医头，脚疼医脚对吧。<br>之前和另外一个朋友聊了下，其实很多厂对json解析这部分有优化调整，通过apt之后更换原生成原生的解析方式，加快反序列化速度的都是可以考虑考虑的。</p>
<h5 id="埋点框架"><a href="#埋点框架" class="headerlink" title="埋点框架"></a>埋点框架</h5><p>其实这个应该要放在更前面一点的，数据上报数据分析啥的其实都还是蛮重要的。<br>这部分因为我完全没写过哦，所以我压根不咋会，但是如果你会的话，面试的时候展开说说，可以帮助你不少。<br>另外还需要有线上的异常用户数据回捞系统，方便开发同学主动去把线上有异常的用户的日志给收集回来。<br>但是有些刁钻的页面曝光监控啦，自动化埋点啥的其实还是写过一点的，有兴趣的可以翻翻历史，还有github 上还有demo。</p>
<blockquote>
<p><a href="https://github.com/Leifzhang/AndroidAutoTrack">AndroidAutoTrack</a> demo工程</p>
</blockquote>
<h5 id="启动相关"><a href="#启动相关" class="headerlink" title="启动相关"></a>启动相关</h5><p>通过DAG(有向无环图)的方式将sdk的初始化拆解成一个个task，之后理顺依赖关系，让他们能按照固定的顺序向下执行。<br>核心需要处理的是依赖关系，比如说其实埋点库依赖于网络库初始化，然后APM相关的则依赖于埋点库和配置中心abtest等等，这样的依赖关系需要开发同学去理顺的。<br>另外就是把sdk的粒度打的细碎一点，更容易观察每个sdk任务的耗时情况，之后增加task阈值告警，超过某个加载速度就通知到相应的同学改一下。<br>多线程是能优化掉一部分，但是也需要避免频繁线程调度。还有就是我个人觉得这些启动相关的东西因为都无法使用sdk级别的灰度，所以改动最好慎重一点。出发点始终都是好的，但是还是结果导向吧。<br>启动优化的核心，我个人始终坚持的就是延迟才能优化。开发人员很难做到优化代码执行的复杂度，执行时间之类的。尽人事听天命，玄学代码。</p>
<h5 id="中间件-图片-日志-存储-基础信息"><a href="#中间件-图片-日志-存储-基础信息" class="headerlink" title="中间件(图片 日志 存储 基础信息)"></a>中间件(图片 日志 存储 基础信息)</h5><p>这部分没啥，最好是对第三方库有一层隔离的思维，但是这个隔离也需要对应的同学对于程序设计方面有很好的思维，说起来简单，其实也蛮复杂的。<br>这里就不展开了，感觉面试也很少会问的很细。</p>
<p>第三方sdk大杂烩（偏中台方向）</p>
<p>基本一个app现在都有啥分享啦，推送啦，支付啦，账号体系啦，webview，jsbridge等等服务于应用内的一些sdk，这些东西就比较偏向于业务。<br>有兴趣的可以看看之前写的两篇关于sdk设计相关的。</p>
<blockquote>
<p>活学活用责任链  <a href="https://juejin.cn/post/6881414546859229192">SDK开发的一点点心得  Android厂商推送Plugin化</a></p>
</blockquote>
<h5 id="其他方面"><a href="#其他方面" class="headerlink" title="其他方面"></a>其他方面</h5><p>大公司可能都会有些动态化方案的考虑，比如插件化啊动态化之类的。这部分在下确实不行，我就不展开了啊。<br>编译相关</p>
<h5 id="描述下android编译流程"><a href="#描述下android编译流程" class="headerlink" title="描述下android编译流程"></a>描述下android编译流程</h5><p>基架很容易碰到的面试题，以前简单的描述写过。聊聊Android编译流程<br>虽然是几年前的知识点了，但是还是要拆开高低版本的agp做比较的。所以这部分可以回答下，基本这题就能简单的拿下了。</p>
<h5 id="Gradle-生命周期"><a href="#Gradle-生命周期" class="headerlink" title="Gradle 生命周期"></a>Gradle 生命周期</h5><p>简单的说下就是buildSrc先编译，之后是根目录的settings.gradle, 根build.gradle，最后才是module build<br>网上一堆，你自己翻一番就知道了。</p>
<h5 id="apt是编译中哪个阶段"><a href="#apt是编译中哪个阶段" class="headerlink" title="apt是编译中哪个阶段"></a>apt是编译中哪个阶段</h5><p>APT解析的是java 抽象语法树(AST)，属于javac的一部分流程。大概流程：.java -&gt; AST -&gt; .class</p>
<p>聊聊AbstractProcessor和Java编译流程</p>
<h5 id="Dex和class有什么区别"><a href="#Dex和class有什么区别" class="headerlink" title="Dex和class有什么区别"></a>Dex和class有什么区别</h5><p>链接传送门<br>Class与dex的区别<br>1）虚拟机： class用jvm执行，dex用dvm执行<br>2）文档： class中冗余信息多，dex会去除冗余信息，包含所有类，查找方便，适合手机端<br>JVM与DVM<br>1）JVM基于栈（使用栈帧，内存），DVM基于寄存器，速度更快，适合手机端<br>2）JVM执行Class字节码，DVM执行DEX<br>3）JVM只能有一个实例，一个应用启动运行在一个DVM<br>DVM与ART<br>1）DVM：每次运行应用都需要一次编译，效率降低。JIT<br>2）ART：Android5.0以上默认为ART，系统会在进程安装后进行一次预编译，将代码转为机器语言存在本地，这样在每次运行时不用再进行编译，提高启动效率；。 AOP &amp; JIT</p>
<h5 id="Transform是如何被执行的"><a href="#Transform是如何被执行的" class="headerlink" title="Transform是如何被执行的"></a>Transform是如何被执行的</h5><p>Transform 在编译过程中会被封装成Task 依赖其他编译流程的Task执行。</p>
<p>Transform和其他系统Transform执行的顺序</p>
<p>其实这个题目已经是个过期了，后面对这些都合并整合了，而且最新版的api也做了替换，要不然考虑下回怼下面试官？<br>Transform和Task之间有关？</p>
<p>如何监控编译速度变慢问题</p>
<p>./gradlew xxxxx – scan</p>
<p>之后会生成一个gradle的网页，填写下你的邮箱就好了。<br>另外一个相对来说比较简单了。通过gradle原生提供的listener进行就行了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 耗时统计kt化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimingsListener</span> : <span class="title">TaskExecutionListener</span>, <span class="title">BuildListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> startTime: Long = <span class="number">0L</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> timings = linkedMapOf&lt;String, Long&gt;()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">beforeExecute</span><span class="params">(task: Task)</span> </span>&#123;</span><br><span class="line">        startTime = System.nanoTime()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">afterExecute</span><span class="params">(task: Task, state: TaskState)</span> </span>&#123;</span><br><span class="line">        val ms = TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS)</span><br><span class="line">        task.path</span><br><span class="line">        timings[task.path] = ms</span><br><span class="line">        project.logger.warn(<span class="string">&quot;$&#123;task.path&#125; took $&#123;ms&#125;ms&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">buildFinished</span><span class="params">(result: BuildResult)</span> </span>&#123;</span><br><span class="line">        project.logger.warn(<span class="string">&quot;Task timings:&quot;</span>)</span><br><span class="line">        timings.forEach &#123;</span><br><span class="line">            <span class="keyword">if</span> (it.value &gt;= <span class="number">50</span>) &#123;</span><br><span class="line">                project.logger.warn(<span class="string">&quot;$&#123;it.key&#125; cos  ms  $&#123;it.value&#125;\n&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">buildStarted</span><span class="params">(gradle: Gradle)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">settingsEvaluated</span><span class="params">(settings: Settings)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">projectsLoaded</span><span class="params">(gradle: Gradle)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">projectsEvaluated</span><span class="params">(gradle: Gradle)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gradle.addListener(TimingsListener())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="Gradle中如何给一个Task前后插入别的任务"><a href="#Gradle中如何给一个Task前后插入别的任务" class="headerlink" title="Gradle中如何给一个Task前后插入别的任务"></a>Gradle中如何给一个Task前后插入别的任务</h5><p>最简单的可以考虑直接获取到Task实例，之后在after和before插入一些你所需要的代码。<br>另外一个就是通过dependOn前置和finalizedBy挂载一个任务 mustAfter<br>Gradle 使用指南 – Gradle Task</p>
<p>ksp APT Transform的区别</p>
<p>ksp 是kotlin专门独立的ast语法树<br>apt 是java 的ast语法树<br>transform是 agp 专门修改字节码的一个方法。<br>反杀时刻AsmClassVisitorFactory,可以看看我之前写的那篇文章。</p>
<p>Transform上的编译优化能做哪些？</p>
<p>虽然是个即将过期的api，但是大家对他的改动还是都比较多的。<br>首先肯定是需要完成增量编译的，具体的可以参考我的demo工程。记住，所有的transfrom都要全量。<br>另外可以考虑多线程优化，将转化操作移动到子线程内，建议使用gradle内部的共享线程。<br>参考agp最新做法，抽象出一个新的interface，之后通过spi串联，之后将asm链式调用。我的文章也介绍过，具体的点在哪里自己盘算。<br>现在准备好告别Transform了吗</p>
<h5 id="aar-源码切换插件原理"><a href="#aar-源码切换插件原理" class="headerlink" title="aar 源码切换插件原理"></a>aar 源码切换插件原理</h5><p>这个前几天刚介绍过，原理和方案业内都差不多，mulite-repo应该都需要这个东西的。我的版本也比较简陋，大厂内部肯定都会有些魔改的。<br>相对来说功能肯定会更丰富，更全面一点。</p>
<p>aar和源码切换插件Plus</p>
<p>你们有哪些保证代码质量的手段</p>
<p>最简单的方式还是通过静态扫描+pipline 处理，之后在合并mr之前进行一次拦截。<br>静态扫描方式比较多，下面给大家简单的介绍下<br>阿里的sonar 但是对kt的支持很糟糕，因为阿里使用，所以有很多现成的规则可以使用，但是如果从0-1接入，你可能会直接放弃。<br>原生的lint，可以基于原生提供的lint api，对其进行开发，支持种类也多，基本上算是一个非常优秀的方案了，但是由于文档资料较少，对于开发的要求可能会较高。</p>
<p>AndroidLint</p>
<h5 id="如何对第三方的依赖做静态检查？"><a href="#如何对第三方的依赖做静态检查？" class="headerlink" title="如何对第三方的依赖做静态检查？"></a>如何对第三方的依赖做静态检查？</h5><p>魔高一尺道高一丈。lint还是能解决这个问题的。<br>Tree Api+ClassScanner = 识别三方隐私权限调用</p>
<p>R.java code too large 解决方案</p>
<p>又是一个过期的问题，尽早升级agp版本，让R8帮你解决这个问题，R文件完全可以内联的。<br>或者用别的AGP插件的R inline也可以解决这个问题。</p>
<p>R inline 你需要注意些什么？</p>
<p>预扫描，先收集调用的信息，之后在进行替换。还有javac 的时候可能就因为文件过大，直接挂掉了。</p>
<p>一个类替换父类  比如所有activity实现类替换baseactivity</p>
<p>class node 直接替换 superName ，想起了之前另外一个问题，感觉主要是要对构造函数进行修改，否则也会出异常。</p>
<p>R8 D8 以及混淆相关的，还有R8除了混淆还能干些什么？ 混淆规则有没有碰到什么奇怪的问题？<br>D8和Dx的区别，主要涉及到编译速度以及编译产物的体积，包体积大概小11%。</p>
<p>R8 则是变更了整个编译流程的，其中我觉得最微妙的就是java8 lambda相关的，脱糖前后的差别还是比较大的。同时R8也少了很多之前的Transform。<br>R8的混淆部分，混淆除了能增加代码阅读难度意外，更多的是对于代码优化方面的。 比如无效代码优化，  同时也删除代码等等都可以做。</p>
<h5 id="编译的时候有没有碰到javac的常量优化"><a href="#编译的时候有没有碰到javac的常量优化" class="headerlink" title="编译的时候有没有碰到javac的常量优化"></a>编译的时候有没有碰到javac的常量优化</h5><p>javac会将静态常量直接优化成具体的数值。但是尤其是多模块场景下尤其容易出现异常，看起来是个实际的常量引用，但是产物上却是一个具体的常量值了。<br>其他部分<br>组件化相关<br>不仅仅要聊到路由，还需要聊下业务仓库的设计，如何避免两个模块之间相互相互引用导致的环问题。<br>另外就是路由的apt aop的部分都可以深入的聊一下。<br>如果只聊路由的话，你就只说了一个字符串匹配规则，非常无聊了。<br>路由跳转<br>路由跳转只是一小部分，其核心原理就是字符串匹配，之后筛选出符合逻辑的页面进行跳转。<br>另外就是拦截器的设计，同步异步拦截器两种完全不同的写法。<br>其原理基于apt+transform ，apt负责生成模块德 路由表，而transform则负责将各个模块的路由表进行收集。<br>服务发现<br>类似路由表，但是维护的是一个基于键值的类构造。ab之间当有相互依赖的情况下，可以通过基于接口编程的方式进行调整，互相只依赖抽象的接口，之后实现类在内部，通过注册的机制。之后在实际的使用地方用服务发现的机制寻找。<br>依赖注入<br>和服务发现类似，也是拿来解决不同模块间的依赖问题。可以使用hilt，依赖注入的好处就是连构造的这部分工作也有di完成了，而且构造能力更多样。可以多参数构造。<br>虚拟机部分<br>很多人会觉得虚拟机这部分都是硬八股，比较无聊。但是其实有时候我们碰到的一些字节码相关的问题就和这部分基础姿势相关了。<br>虽然用的比较少，但是也不是一个硬八股，比hashmap好玩太多了。<br>总</p>
<h5 id="android-电量统计工具"><a href="#android-电量统计工具" class="headerlink" title="android 电量统计工具"></a>android 电量统计工具</h5><blockquote>
<p>Battery Historian </p>
</blockquote>
<p><a href="http://127.0.0.1:9999/">http://127.0.0.1:9999/</a></p>
<p>docker 安装</p>
<p>docker – run -p 9999:9999 gcr.io/android-battery-historian/stable:3.0 –port 9999</p>
<blockquote>
<p>CgBugReport</p>
</blockquote>
<p><img src="https://github.com/sonyxperiadev/ChkBugReport/wiki/How-to-install-it" alt="CgBugReport"></p>
<p>java -jar chkbugreport-0.5-215.jar  bugreport-NX709S-SKQ1.220502.001-2023-03-27-17-14-47.txt</p>
<h4 id="系统app-开发"><a href="#系统app-开发" class="headerlink" title="系统app 开发"></a>系统app 开发</h4><ol>
<li><p>添加Android.bp ，编译需要的配置文件</p>
</li>
<li><p>device/rice14/添加目录</p>
</li>
<li><p>编译，source build/enriment.sh ,lunch ,make</p>
</li>
<li><p>向系统添加aar,已经找到对应的aar</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -name &quot;xxx.bp&quot; | xargs grep &quot;androidx.*&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</li>
</ol>
</font>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>tree</tag>
      </tags>
  </entry>
  <entry>
    <title>android_system</title>
    <url>/2023/04/05/Android/android-system/</url>
    <content><![CDATA[<font size="2.9">

<h4 id="1-虚拟机的安装"><a href="#1-虚拟机的安装" class="headerlink" title="1.虚拟机的安装"></a>1.虚拟机的安装</h4><p>参考这篇文章 做一些简单补充</p>
<p><img src="https://mp.weixin.qq.com/s/uFllernXiZHdd3fg4nwpYQ" alt="framwork"></p>
<p> 在官网下载好 Ubuntu20.04 桌面版系统镜像</p>
<img src="/2023/04/05/Android/android-system/640.webp" class="" title="img">

<p>VMware 新建虚拟机</p>
<blockquote>
<p>打开 VMware，菜单栏选择 文件 -&gt; 新建虚拟机 后，出现以下界面：</p>
</blockquote>
<img src="/2023/04/05/Android/android-system/641.webp" class="" title="img">

<blockquote>
<p>选择 自定义高级，然后点击 下一步，出现以下界面：</p>
</blockquote>
<img src="/2023/04/05/Android/android-system/642.webp" class="" title="img">

<blockquote>
<p>这里不用改，点击 下一步，出现以下界面：</p>
</blockquote>
<img src="/2023/04/05/Android/android-system/643.webp" class="" title="img">

<blockquote>
<p>选择 稍候安装操作系统，点击 下一步，出现以下界面：</p>
</blockquote>
<img src="/2023/04/05/Android/android-system/645.webp" class="" title="img">

<blockquote>
<p>然后选择 虚拟机位置。</p>
</blockquote>
<blockquote>
<p>设置处理器，内存等 也可以后面设置</p>
</blockquote>
<blockquote>
<p>安装Ubuntu 这里选择英文</p>
</blockquote>
<h4 id="2-开发环境搭建"><a href="#2-开发环境搭建" class="headerlink" title="2. 开发环境搭建"></a>2. 开发环境搭建</h4><blockquote>
<p>安装好系统后需要安装必要的软件：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">sudo apt-get install git-core gnupg flex bison build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 libncurses5 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig python</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-下载源码"><a href="#3-下载源码" class="headerlink" title="3. 下载源码"></a>3. 下载源码</h4><blockquote>
<p>下载repo 工具</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">mkdir ~/bin</span><br><span class="line">curl https://mirrors.tuna.tsinghua.edu.cn/git/git-repo -o ~/bin/repo</span><br><span class="line">chmod +x ~/bin/repo</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>repo 的运行过程中会尝试访问官方的 git 源更新自己，如果想使用 tuna 的镜像源进行更新，可以将如下内容复制到你的 ~/.bashrc 或者 ~/.zshrc 里。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> REPO_URL=<span class="string">&#x27;https://mirrors.tuna.tsinghua.edu.cn/git/git-repo&#x27;</span></span><br><span class="line">PATH=~/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>初始化仓库并同步远程代码</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;you@example.com&quot;</span></span><br><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">mkdir aosp </span><br><span class="line"><span class="built_in">cd</span> asop</span><br><span class="line"><span class="comment">#初始化仓库,-b 指示分支，这里使用 android10</span></span><br><span class="line">repo init -u https://mirrors.tuna.tsinghua.edu.cn/git/AOSP/platform/manifest -b android-10.0.0_r41</span><br><span class="line"><span class="comment">#同步远程代码</span></span><br><span class="line">repo sync</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>-b 后面的值参考源代码标记和 build。这里选用了 android-10.0.0_r41 版本用于学习。Android 每年都会更新一个大版本，学习的角度来说，选择一个不太老的版本即可，不必追新</p>
<blockquote>
<p>编译源码</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">source</span> build/envsetup.sh</span><br><span class="line">lunch aosp_x86_64-eng</span><br><span class="line">make -j16  内存小了容易出错</span><br><span class="line"></span><br><span class="line">make </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>报exit 1 错误： 扩张swap 分区，ubuntu 默认分配的是2G，挂载20GB</p>
<blockquote>
<p>运行模拟器</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">emulator -verbose -cores 4 -show-kernel</span><br><span class="line"></span><br><span class="line">emulator -verbose</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="从一个简单的实际开发需求体验-Framework-开发"><a href="#从一个简单的实际开发需求体验-Framework-开发" class="headerlink" title="从一个简单的实际开发需求体验 Framework 开发"></a>从一个简单的实际开发需求体验 Framework 开发</h4><blockquote>
<p>需求：去掉原生 Launcher 中的 google 搜索栏。</p>
</blockquote>
<p>很多产品，比如用于仓库，电商，物流的 pda 等，更多的是考虑功能性和稳定性，UI 的美观和易用性是其次的。这些产品一般是不会重新开发和定制 Launcher 的，但是会对 Launcher 做一些修改，比如一个常见的需求是：去掉原生 Launcher 中的 google 搜索栏。<br>由于众所周知的原因 google 搜索栏在中国是没有办法使用的。在中国销售的产品，肯定是要把它去掉的。</p>
<blockquote>
<p>第一步：修改文件 packages/apps/Launcher3/res/layout/search_container_workspace.xml，将以下内容注释掉：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- &lt;fragment</span><br><span class="line">    android:name=<span class="string">&quot;com.android.launcher3.qsb.QsbContainerView<span class="variable">$QsbFragment</span>&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:tag=<span class="string">&quot;qsb_view&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span>/&gt; --&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>第二步：修改文件：packages/apps/Launcher3/src/com/android/launcher3/Workspace.java 将以下内容注释掉：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// CellLayout.LayoutParams lp = new CellLayout.LayoutParams(0, 0, firstPage.getCountX(), 1);</span><br><span class="line">// lp.canReorder = <span class="literal">false</span>;</span><br><span class="line">// <span class="keyword">if</span> (!firstPage.addViewToCellLayout(qsb, 0, R.id.search_container_workspace, lp, <span class="literal">true</span>)) &#123;</span><br><span class="line">//     Log.e(TAG, <span class="string">&quot;Failed to add to item at (0, 0) to CellLayout&quot;</span>);</span><br><span class="line">// &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>第三步：重新编译源码，启动模拟器:(因为有编译缓存，重新编译速度比较快)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">emulator</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</font>
]]></content>
      <tags>
        <tag>source,compile</tag>
      </tags>
  </entry>
  <entry>
    <title>androidJvm</title>
    <url>/2021/10/18/Android/androidJvm/</url>
    <content><![CDATA[<font size="2.9">

<h3 id="Android-热修复"><a href="#Android-热修复" class="headerlink" title="Android 热修复"></a>Android 热修复</h3><pre><code>下发补丁（内含修复好的class）到用户手机，即让app从服务器上下载（网络传输）

app通过某种方式，使补丁（apk、dex、jar等文件）中的class被app调用（本地更新）

这里的某种方式，对本篇而言，就是使用Android的类加载器，通过类加载器加载这些修复好的class，覆盖对应有问题的class，理论上就能修复bug了。
</code></pre>
<h3 id="一、类加载机制"><a href="#一、类加载机制" class="headerlink" title="一、类加载机制"></a>一、类加载机制</h3><h4 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h4><p> 验证多个类是同一个类的成立条件：</p>
<pre><code>相同的className
相同的packageName
被相同的classLoader加载
</code></pre>
<h4 id="loadClass"><a href="#loadClass" class="headerlink" title="loadClass()"></a>loadClass()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">return</span> loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">    Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                c = findBootstrapClassOrNull(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">            <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">            <span class="comment">// to find the class.</span></span><br><span class="line">            c = findClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h3 id="Android中的ClassLoader"><a href="#Android中的ClassLoader" class="headerlink" title="Android中的ClassLoader"></a>Android中的ClassLoader</h3><p>1、类加载器类型<br>Android跟java有很大的渊源，基于jvm的java应用是通过ClassLoader来加载应用中的class的，Android对jvm优化过，使用的是dalvik虚拟机，且class文件会被打包进一个dex文件中，底层虚拟机有所不同，那么它们的类加载器当然也是会有所区别。</p>
<p>Android中最主要的类加载器有如下4个：</p>
<p>BootClassLoader：加载Android Framework层中的class字节码文件（类似java的Bootstrap ClassLoader）<br>PathClassLoader：加载已经安装到系统中的Apk的class字节码文件（类似java的App ClassLoader）<br>DexClassLoader：加载制定目录的class字节码文件（类似java中的Custom ClassLoader）<br>BaseDexClassLoader：PathClassLoader和DexClassLoader的父类</p>
<p>一个app一定会用到BootClassLoader、PathClassLoader这2个类加载器，可通过如下代码进行验证：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        ClassLoader classLoader = getClassLoader();</span><br><span class="line">        if (classLoader != null) &#123;</span><br><span class="line">            Log.e(TAG, &quot;classLoader = &quot; + classLoader);</span><br><span class="line">            while (classLoader.getParent() != null) &#123;</span><br><span class="line">                classLoader = classLoader.getParent();</span><br><span class="line">                Log.e(TAG, &quot;classLoader = &quot; + classLoader);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="热修复的实现原理"><a href="#热修复的实现原理" class="headerlink" title="热修复的实现原理"></a>热修复的实现原理</h3><p>经过对PathClassLoader、DexClassLoader、BaseDexClassLoader、DexPathList的分析，我们知道，安卓的类加载器在加载一个类时会先从自身DexPathList对象中的Element数组中获取（Element[] dexElements）到对应的类，之后再加载。采用的是数组遍历的方式，不过注意，遍历出来的是一个个的dex文件。在for循环中，首先遍历出来的是dex文件，然后再是从dex文件中获取class，所以，我们只要让修复好的class打包成一个dex文件，放于Element数组的第一个元素，这样就能保证获取到的class是最新修复好的class了（当然，有bug的class也是存在的，不过是放在了Element数组的最后一个元素中，所以没有机会被拿到而已。</p>
<h3 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h3><p>(1) hashCode</p>
<pre><code>    返回对象的哈希值（散列码），不是实际地址值，不过可以理解为地址值。
</code></pre>
<p>(2)finalize()</p>
<pre><code>在对象将被垃圾回收器清除前调用，但不确定时间，并且对象的finalize()方法只会被调用一次，调用后也不一定马上清除该对象。
</code></pre>
<p>(3)clone()</p>
<pre><code>以实现对象的克隆，包括成员变量的数据复制，但是它和两个引用指向同一个对象是有区别的。
分类：
浅拷贝: 仅拷贝对象,不拷贝成员变量,仅复制了变量的引用,拷贝前后变量使用同一块内存,内存销毁后,必须重新定义(两者同生共死)
深拷贝: 不仅拷贝对象,也拷贝成员变量(真正意义上的复制, 两者独立无关)
</code></pre>
<p>(4)toString()——重要</p>
<p>(5)equals()——重要</p>
<p>比较两个对象是否相同</p>
<p>默认情况下，比较的是地址值是否相同。</p>
<p>而比较地址值是没有意义的，所以，一般子类也会重写该方法。</p>
<p>在诸多子类，如String、Integer、Date 等均重写了equals()方法</p>
<p>改进思路：</p>
<p>我们可以将比较地址值转变为比较成员变量</p>
<p>因为name为String类型，而String类型为引用类型，所以不能够用==比较，应该用equal()<br>String中默认重写过的equal()方法是用来比较字符串内容是否相同<br>我们要使用的是学生类的成员变量，所以父类 Object不能调用子类Student的特有功能<br>所以使用向下转型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//重写v2.0 (可作为最终版)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>.name == o) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//测试它左边的对象是否是它右边的类的实例，返回 boolean 的数据类型。</span></span><br><span class="line">       <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Student)) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       Student s = (Student) o;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.name.equals(s.name) &amp;&amp; <span class="keyword">this</span>.age == s.age;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>equals() 和 == 的区别<br> == 的作用： 　　</p>
<p>基本类型：比较值是否相同 　　</p>
<p>引用类型：比较的就是堆内存地址是否相同</p>
<p>equals 的作用:</p>
<p>引用类型：默认情况下，比较的是地址值。</p>
<p>注：一般选择重写方法，比较对象的成员变量值是否相同 ，不过一般重写都是自动生成。</p>
</font>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>androidota</title>
    <url>/2021/11/12/Android/androidota/</url>
    <content><![CDATA[<font size="2.9">

<h4 id="刷入ota"><a href="#刷入ota" class="headerlink" title="刷入ota"></a>刷入ota</h4><p>连接adb 开启开发者模式 </p>
<p><code>https://developer.android.google.cn/about/versions/12/download-ota</code></p>
<p>1.adb reboot recovery (或者手动 电源键 + 音量+/-) </p>
<p>2.选择adb 安装</p>
<p>3.adb sideload filename.zip</p>
<p>4.reboot system now 重启系统</p>
</font>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>ota</tag>
      </tags>
  </entry>
  <entry>
    <title>frida</title>
    <url>/2023/07/12/Android/frida-android/</url>
    <content><![CDATA[<font size='2.8'>

<h5 id="frida-android"><a href="#frida-android" class="headerlink" title="frida-android"></a>frida-android</h5><p><code>注意 ios ,android 都可以识别 ，每次电脑usb 插一个</code></p>
<ol>
<li>原生启动</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">frida-ps -help</span><br><span class="line"></span><br><span class="line">frida-ps -U -a  #显示包名 -U usb to device</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">注入脚本</span></span><br><span class="line">frida -U -f com.ztgame.bob.kuaishou -l test.js</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> Activity = Java.use(<span class="string">&quot;android.app.Activity&quot;</span>);</span><br><span class="line"> <span class="comment">//如果没有同名函数，hook这个函数</span></span><br><span class="line">  Activity.onResume.implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  send(<span class="string">&quot;activity: &quot;</span>+ <span class="built_in">this</span> + <span class="string">&quot;, onResume!!!&quot;</span>);</span><br><span class="line">  <span class="built_in">this</span>.onResume();</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="comment">//如果有同名函数，需要用overload和所有参数类型来确定到底是哪个函数</span></span><br><span class="line"> Activity.startActivity.overload(<span class="string">&#x27;android.content.Intent&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">intent</span>)</span>&#123;</span><br><span class="line">  send(<span class="string">&quot;activity: &quot;</span>+ <span class="built_in">this</span> + <span class="string">&quot;, startActivity!!!&quot;</span>);</span><br><span class="line">  <span class="built_in">this</span>.startActivity(intent);</span><br><span class="line"> &#125;;</span><br><span class="line"> Activity.startActivity.overload(<span class="string">&#x27;android.content.Intent&#x27;</span>, <span class="string">&#x27;android.os.Bundle&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">intent, bundle</span>)</span>&#123;</span><br><span class="line">  send(<span class="string">&quot;activity: &quot;</span>+ <span class="built_in">this</span> + <span class="string">&quot;, startActivity!!!&quot;</span>);</span><br><span class="line">  <span class="built_in">this</span>.startActivity(intent, bundle);</span><br><span class="line"> &#125;;</span><br><span class="line">     </span><br><span class="line"> <span class="comment">//hook构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  var ZTLib = Java.use(&quot;com.kwai.sdk.subbus.pay.model.KwaiPayInfo&quot;);</span></span><br><span class="line"><span class="comment">//  ZTLib.toString.overload().implementation = function()&#123;</span></span><br><span class="line"><span class="comment">//      var  result = ZTLib.toString();</span></span><br><span class="line"><span class="comment">//      console.log(&quot;result | &quot;+result);</span></span><br><span class="line"><span class="comment">//      return ZTLib.toString();</span></span><br><span class="line"><span class="comment">//  &#125;;</span></span><br><span class="line"></span><br><span class="line">hookGetGiantDataLog()</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hookGetGiantDataLog</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> GADCLog = Java.use(<span class="string">&quot;com.ztgame.mobileappsdk.datasdk.internal.GADCLog&quot;</span>);</span><br><span class="line">    GADCLog.open(<span class="literal">true</span>);</span><br><span class="line">    GADCLog.i.overload(<span class="string">&#x27;java.lang.String&#x27;</span>,<span class="string">&#x27;[Ljava.lang.Object;&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">p1,p2</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;[SDK数据]Called -GADCLog(i) msg = &quot;</span>+p1+<span class="string">&quot;\r\n &quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// GADCLog.d.overload(&#x27;java.lang.String&#x27;,&#x27;[Ljava.lang.Object;&#x27;).implementation = function(p1,p2) &#123;</span></span><br><span class="line">    <span class="comment">// console.log(&quot;[SDK数据]Called -GADCLog(d) msg = &quot;+p1 +p2 +&quot;\r\n &quot;);</span></span><br><span class="line">    <span class="comment">// &#125;;</span></span><br><span class="line">    <span class="comment">// GADCLog.d.overload(&#x27;java.lang.Throwable&#x27;,&#x27;java.lang.String&#x27;,&#x27;[Ljava.lang.Object;&#x27;).implementation = function(p1,p2,p3) &#123;</span></span><br><span class="line">    <span class="comment">//     console.log(&quot;[SDK数据]Called -GADCLog(d) msg = &quot;+p2  +&quot;\r\n &quot;);</span></span><br><span class="line">    <span class="comment">//     &#125;;</span></span><br><span class="line">    GADCLog.v.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">p1</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;[SDK数据]Called -GADCLog(v) msg = &quot;</span>+p1  +<span class="string">&quot;\r\n &quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    GADCLog.e.overload(<span class="string">&#x27;java.lang.String&#x27;</span>,<span class="string">&#x27;[Ljava.lang.Object;&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">p1,p2</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;[SDK数据]Called -GADCLog(e) msg = &quot;</span>+p1  +<span class="string">&quot;\r\n &quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    GADCLog.e.overload(<span class="string">&#x27;java.lang.Throwable&#x27;</span>,<span class="string">&#x27;java.lang.String&#x27;</span>,<span class="string">&#x27;[Ljava.lang.Object;&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">p1,p2,p3</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;[SDK数据]Called -GADCLog(e) msg = &quot;</span>+p2  +<span class="string">&quot;\r\n &quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ol start="2">
<li>第三方 插件 启动</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">./androidhook  -p com.ztgame.bob.kuaishou -s frida-scripts/android_main.js</span><br><span class="line"><span class="meta">#</span><span class="bash"> match 15.1.2 <span class="string">&#x27;s version</span></span> </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> one device</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>出现错误 不能匹配，试试端口转发</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">adb forward tcp:27042 tcp:27042</span><br><span class="line"></span><br></pre></td></tr></table></figure>




<font>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>frida</tag>
      </tags>
  </entry>
  <entry>
    <title>Hook</title>
    <url>/2021/10/20/Android/hook/</url>
    <content><![CDATA[<font size="2.9">

<h3 id="反射静态方法"><a href="#反射静态方法" class="headerlink" title="反射静态方法"></a>反射静态方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;android.os.Build&quot;</span>);</span><br><span class="line"></span><br><span class="line">Method method = cls.getDeclaredMethod(<span class="string">&quot;getString&quot;</span>,String.class);</span><br><span class="line"></span><br><span class="line">method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">String result = method.invoke(<span class="keyword">null</span>,<span class="string">&quot;o.product.model&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Hook（勾子）"><a href="#Hook（勾子）" class="headerlink" title="Hook（勾子）"></a>Hook（勾子）</h4><pre><code>反射和动态代理（看成重写 super）  改变代码的正常流程
</code></pre>
<h4 id="查找Hook-点的原则"><a href="#查找Hook-点的原则" class="headerlink" title="查找Hook 点的原则"></a>查找Hook 点的原则</h4><pre><code>尽量静态变量或者单利对象
尽量Hook 静态方法 
</code></pre>
<h4 id="Intrumation-java"><a href="#Intrumation-java" class="headerlink" title="Intrumation.java"></a>Intrumation.java</h4><pre><code>startactivity等方法都在这类里面    
</code></pre>
<h4 id="AMS-检查Activity"><a href="#AMS-检查Activity" class="headerlink" title="AMS 检查Activity"></a>AMS 检查Activity</h4><h4 id="Hook-Java-和-Hook-Native"><a href="#Hook-Java-和-Hook-Native" class="headerlink" title="Hook Java 和 Hook Native"></a>Hook Java 和 Hook Native</h4><p>1.根据Hook的API语言划分，分为Hook Java 和 Hook Native<br>2.根据Hook进程划分，分为应用进程Hook 和 全局 Hook</p>
<h4 id="防止指令重排"><a href="#防止指令重排" class="headerlink" title="防止指令重排"></a>防止指令重排</h4><p>volatile关键字修饰的变量看到的随时是自己的最新值</p>
<h4 id="Hook-Activity"><a href="#Hook-Activity" class="headerlink" title="Hook Activity"></a>Hook Activity</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * android 10以上</span></span><br><span class="line"><span class="comment">     * activityTaskManager</span></span><br><span class="line"><span class="comment">     * activityManager</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hookAms</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// int result = ActivityTaskManager.getService().startActivity(whoThread,</span></span><br><span class="line">        <span class="comment">//                    who.getBasePackageName(), who.getAttributionTag(), intent,</span></span><br><span class="line">        <span class="comment">//                    intent.resolveTypeIfNeeded(who.getContentResolver()), token,</span></span><br><span class="line">        <span class="comment">//                    target != null ? target.mEmbeddedID : null, requestCode, 0, null, options);</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//6.ActivityManager的class 对象</span></span><br><span class="line">            Class&lt;?&gt; activityTaskManagerCls = Class.forName(<span class="string">&quot;android.app.ActivityTaskManager&quot;</span>);</span><br><span class="line">            <span class="comment">//5.IActivityTaskManagerSingleton 的 Field</span></span><br><span class="line">            Field iActivityTaskManagerFiled = activityTaskManagerCls.getDeclaredField(<span class="string">&quot;IActivityTaskManagerSingleton&quot;</span>);</span><br><span class="line">            iActivityTaskManagerFiled.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//4 .Singleton类对象</span></span><br><span class="line">            Object iActivityManagerSingleton = iActivityTaskManagerFiled.get(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3 singleton的class对象</span></span><br><span class="line">            Class&lt;?&gt; singletonClass = Class.forName(<span class="string">&quot;android.util.Singleton&quot;</span>);</span><br><span class="line">            <span class="comment">//2 mInstance的 Field</span></span><br><span class="line">            Field mInstanceField = singletonClass.getDeclaredField(<span class="string">&quot;mInstance&quot;</span>);</span><br><span class="line">            mInstanceField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//singletonClass获取get()方法</span></span><br><span class="line">            Method getMethod = singletonClass.getDeclaredMethod(<span class="string">&quot;get&quot;</span>);</span><br><span class="line">            getMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//1. 目的 minstance对象</span></span><br><span class="line">            <span class="keyword">final</span> Object mInstance = getMethod.invoke(iActivityManagerSingleton);</span><br><span class="line"></span><br><span class="line">            Object proxyObject = Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),</span><br><span class="line">                    <span class="keyword">new</span> Class[]&#123;Class.forName(<span class="string">&quot;android.app.IActivityTaskManager&quot;</span>)&#125;,</span><br><span class="line">                    <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                            <span class="comment">//过滤  系统走代理 方法</span></span><br><span class="line">                            <span class="keyword">if</span> (<span class="string">&quot;startActivity&quot;</span>.equals(method.getName())) &#123;</span><br><span class="line">                                System.out.println(<span class="string">&quot;--------------&gt;method = &quot;</span> + method.getName());</span><br><span class="line">                                <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">                                Intent intent = <span class="keyword">null</span>;</span><br><span class="line">                                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                                    <span class="keyword">if</span> (args[i] <span class="keyword">instanceof</span> Intent) &#123;</span><br><span class="line">                                        System.out.println(<span class="string">&quot;i = &quot;</span> + i);</span><br><span class="line">                                        index = i ;</span><br><span class="line">                                        intent = (Intent) args[i];</span><br><span class="line">                                        <span class="keyword">break</span>;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="comment">//plugin</span></span><br><span class="line"></span><br><span class="line">                                <span class="comment">//proxy intent</span></span><br><span class="line">                                Intent intentProxy = <span class="keyword">new</span> Intent();</span><br><span class="line">                                intentProxy.setClassName(<span class="string">&quot;com.example.webrtc&quot;</span>, <span class="string">&quot;com.example.webrtc.hookProxy.ProxyActivity&quot;</span>);</span><br><span class="line"></span><br><span class="line">                                <span class="comment">//保存插件</span></span><br><span class="line">                                intentProxy.putExtra(TARGET_INTENT, intent);</span><br><span class="line">                                <span class="comment">//替换成功</span></span><br><span class="line">                                System.out.println(<span class="string">&quot;替换成功&quot;</span>);</span><br><span class="line">                                args[index] = intentProxy;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="comment">//ToDO 拦截方法</span></span><br><span class="line">                            <span class="keyword">return</span> method.invoke(mInstance, args);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            <span class="comment">//替换系统的IActivityManager的 对象</span></span><br><span class="line">            mInstanceField.set(iActivityManagerSingleton, proxyObject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在 Handler 把activity 替换回来</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hookHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class activityThread = Class.forName(<span class="string">&quot;android.app.ActivityThread&quot;</span>);</span><br><span class="line">            <span class="comment">// private static volatile ActivityThread sCurrentActivityThread;</span></span><br><span class="line">            Field sCurrentActivityThreadField = activityThread.getDeclaredField(<span class="string">&quot;sCurrentActivityThread&quot;</span>);</span><br><span class="line">            sCurrentActivityThreadField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">// //sCurrentActivityThread是一个static的,所以参数给null即可</span></span><br><span class="line">            Object sCurrentActivityThread = sCurrentActivityThreadField.get(<span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// //拿到ActivityThread中mH对象</span></span><br><span class="line"></span><br><span class="line">            Field mHField = activityThread.getDeclaredField(<span class="string">&quot;mH&quot;</span>);</span><br><span class="line">            mHField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">           <span class="keyword">final</span> Handler mH = (Handler) mHField.get(sCurrentActivityThread);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//拿到Handler callback</span></span><br><span class="line">            Field mCallbackField = Handler.class.getDeclaredField(<span class="string">&quot;mCallback&quot;</span>);</span><br><span class="line">            mCallbackField.setAccessible(<span class="keyword">true</span>);<span class="comment">//可以访问</span></span><br><span class="line">            <span class="comment">//为这个mH设置一个Callback.在这个Callback中还原Activity,</span></span><br><span class="line">            <span class="comment">//这里还有一个逻辑,在这个callback中,只是还原了真实的Activity,接下来ActivityThread中的mH的处理流程,如:</span></span><br><span class="line">            <span class="comment">// performLaunchActivity, performResumeActivity,等</span></span><br><span class="line">            <span class="comment">// 我们是不做修改的,所以在执行完这个Callback后,还是调用mH的handleMessage方法</span></span><br><span class="line"></span><br><span class="line">            mCallbackField.set(mH, <span class="keyword">new</span> android.os.Handler.Callback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(<span class="meta">@NonNull</span> Message msg)</span> </span>&#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">&quot;handleMessage: &quot;</span> + msg);</span><br><span class="line">                    <span class="comment">//这个code:public static final int EXECUTE_TRANSACTION = 159;是ams请求启动activity的.</span></span><br><span class="line">                     <span class="keyword">switch</span> (msg.what)&#123;</span><br><span class="line">                         <span class="keyword">case</span> <span class="number">159</span>:</span><br><span class="line">                             <span class="keyword">try</span> &#123;</span><br><span class="line">                                 <span class="comment">//下面要做的事情,就是把Intent中put进去的真正要启动的activiyt的intent信息在拿出来.</span></span><br><span class="line">                                 <span class="comment">// 怎么拿呢?可以打印msg.obj的信息看,intent保存的位置.</span></span><br><span class="line">                                 <span class="comment">//具体为什么这么拿,在代码外面做解释</span></span><br><span class="line">                                 Object object = msg.obj;</span><br><span class="line">                                 Log.e(TAG, <span class="string">&quot;hookATHandler,object=&quot;</span> + object);</span><br><span class="line">                                 <span class="comment">//拿到ClientTransaction中的列表:mActivityCallbacks</span></span><br><span class="line">                                 Field mActivityCallbacksField =</span><br><span class="line">                                         object.getClass().getDeclaredField(<span class="string">&quot;mActivityCallbacks&quot;</span>);</span><br><span class="line">                                 mActivityCallbacksField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                                 List&lt;Object&gt; mActivityCallbacks = (List&lt;Object&gt;)mActivityCallbacksField.get(object);</span><br><span class="line">                                 <span class="comment">//拿到LaunchActivityItem的实例对象.</span></span><br><span class="line">                                 String itemName = <span class="string">&quot;android.app.servertransaction.LaunchActivityItem&quot;</span>;</span><br><span class="line">                                 <span class="keyword">for</span>(Object obj : mActivityCallbacks) &#123;</span><br><span class="line">                                     <span class="keyword">if</span> (obj.getClass().getCanonicalName().equals(itemName)) &#123;</span><br><span class="line">                                         <span class="comment">//拿到LaunchActivityItem中的mIntent.</span></span><br><span class="line">                                         Field mIntentField = obj.getClass().getDeclaredField(<span class="string">&quot;mIntent&quot;</span>);</span><br><span class="line">                                         mIntentField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                                         Intent sugerBullet = (Intent)mIntentField.get(obj);</span><br><span class="line">                                         Intent realIntent = sugerBullet.getParcelableExtra(TARGET_INTENT);</span><br><span class="line">                                         <span class="comment">//把真实的Activity信息写回去</span></span><br><span class="line">                                         sugerBullet.setComponent(realIntent.getComponent());</span><br><span class="line">                                         <span class="keyword">break</span>;</span><br><span class="line">                                     &#125;</span><br><span class="line">                                 &#125;</span><br><span class="line"></span><br><span class="line">                             &#125; <span class="keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;</span><br><span class="line">                                 e.printStackTrace();</span><br><span class="line">                             &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                                 e.printStackTrace();</span><br><span class="line">                             &#125;</span><br><span class="line"></span><br><span class="line">                             <span class="keyword">break</span>;</span><br><span class="line">                     &#125;</span><br><span class="line">                    <span class="comment">//处理完,返回true 消费</span></span><br><span class="line">                    <span class="comment">//插件化的原理实际就是代理模式加上反射,但是真正需要注意的地方,是对要hook的源码熟悉,要怎样选好hook点,要调整什么样的处理流程.</span></span><br><span class="line">                    mH.handleMessage(msg);</span><br><span class="line">                    Log.e(TAG, <span class="string">&quot;handleMessage: 处理完&quot;</span> );</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解决 报错问题</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hookPackageManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; forName = Class.forName(<span class="string">&quot;activity.app.ActivityThread&quot;</span>);</span><br><span class="line">            Field field = forName.getDeclaredField(<span class="string">&quot;sCurrentActivityThread&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//静态变量 field.get(null) 返回对象</span></span><br><span class="line">            Object activityThread = field.get(<span class="keyword">null</span>);</span><br><span class="line">           <span class="comment">// ActivityThread.sCurrentActivityThread.get().getPackageManager()</span></span><br><span class="line">            Method getPackageManager = activityThread.getClass().getDeclaredMethod(<span class="string">&quot;getPackageManager&quot;</span>);</span><br><span class="line">            Object iPackageManager = getPackageManager.invoke(activityThread);</span><br><span class="line">            Class&lt;?&gt;  iPackageManagerIntercept  = Class.forName(<span class="string">&quot;android.content.pm.IPackageManager&quot;</span>);</span><br><span class="line">            Object proxy = Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), <span class="keyword">new</span> Class[]&#123;iPackageManagerIntercept.getClass()&#125;, <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                    Log.e(TAG, <span class="string">&quot;invoke: method =&quot;</span>+method.getName());</span><br><span class="line">                    <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;getActivityInfo&quot;</span>))&#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (args[i] <span class="keyword">instanceof</span> ComponentName)&#123;</span><br><span class="line">                                ComponentName componentName = <span class="keyword">new</span> ComponentName(  App.mInstance.getApplicationContext().getPackageName(), <span class="string">&quot;com.example.testlib.PluginActivity&quot;</span>);</span><br><span class="line">                                args[i] = componentName;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> method.invoke(iPackageManager,args);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 获取 sPackageManager 属性</span></span><br><span class="line">            Field iPackageManagerField = activityThread.getClass().getDeclaredField(<span class="string">&quot;sPackageManager&quot;</span>);</span><br><span class="line">            iPackageManagerField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            iPackageManagerField.set(activityThread, proxy);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="动态代理-ClassLoader"><a href="#动态代理-ClassLoader" class="headerlink" title="动态代理 ClassLoader"></a>动态代理 ClassLoader</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//这一句是生成代理类的class文件，前提是你需要在工程根目录下创建com/sun/proxy目录，不然会报找不到路径的io异常</span></span><br><span class="line">     System.getProperties().put(<span class="string">&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">    <span class="comment">//new 重写</span></span><br><span class="line">    ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">    <span class="comment">//public static Object newProxyInstance(ClassLoader loader,</span></span><br><span class="line">    <span class="comment">//                                          Class&lt;?&gt;[] interfaces,</span></span><br><span class="line">    <span class="comment">//                                          InvocationHandler h)</span></span><br><span class="line">    Class&lt;?&gt;[] interfaces = foo.getClass().getInterfaces();</span><br><span class="line">    <span class="comment">//生成代理类</span></span><br><span class="line">    Foo foo1 = (Foo) Proxy.newProxyInstance(classLoader, interfaces, <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;proxy = &quot;</span> + <span class="string">&quot;, method = &quot;</span> + method.getName() + <span class="string">&quot;, args = &quot;</span> + args[<span class="number">0</span>].toString());</span><br><span class="line">            <span class="comment">//通过反射调用 被代理类的方法</span></span><br><span class="line">            <span class="keyword">for</span> (Object o : args) &#123;</span><br><span class="line">        <span class="comment">//        System.out.println(&quot;args = &quot; + o);</span></span><br><span class="line">            &#125;</span><br><span class="line">            args = <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;新的value&quot;</span>&#125;;</span><br><span class="line">            method.invoke(foo, args);</span><br><span class="line">            System.out.println(<span class="string">&quot;MyInvocationHandler invoke end&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    foo1.say(<span class="string">&quot;dy proxy9999&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</font>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Hook</tag>
      </tags>
  </entry>
  <entry>
    <title>Messenger</title>
    <url>/2021/10/20/Android/messenger/</url>
    <content><![CDATA[<font size="2.9">

<h4 id="Messenger"><a href="#Messenger" class="headerlink" title="Messenger"></a>Messenger</h4><p>   服务端<br>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessagerService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;MessagerService&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> what_to_server = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> what_to_client = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> Handler handerServer = <span class="keyword">new</span> Handler(<span class="keyword">new</span> Handler.Callback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(<span class="meta">@NonNull</span> Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//fase 继续想下传递</span></span><br><span class="line">            <span class="comment">//true 不传递自己消费</span></span><br><span class="line">            <span class="keyword">switch</span> (msg.what)&#123;</span><br><span class="line">                <span class="keyword">case</span> what_to_server:</span><br><span class="line">                    System.out.println(<span class="string">&quot;---&gt;client = &quot;</span>+msg.what);</span><br><span class="line">                    Log.e(TAG, <span class="string">&quot;---&gt;client: &quot;</span> +msg.what +<span class="string">&quot;,obj = &quot;</span>+msg.obj);</span><br><span class="line">                    Messenger client = msg.replyTo;</span><br><span class="line">                    <span class="keyword">if</span> (client == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;---&gt;client null&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    Message toClient = Message.obtain(<span class="keyword">null</span>,what_to_client);</span><br><span class="line">                    toClient.arg1 = <span class="number">101</span>;</span><br><span class="line">                    toClient.obj = <span class="string">&quot;服务器发送消息&quot;</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        client.send(toClient);</span><br><span class="line">                        System.out.println(<span class="string">&quot;---&gt;server send &gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">private</span> Messenger serverMessenger = <span class="keyword">new</span> Messenger(handerServer);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessagerService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;onBind: &quot;</span>+serverMessenger.getBinder() );</span><br><span class="line">        <span class="keyword">return</span> serverMessenger.getBinder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>   客户端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Handler clientHandler = <span class="keyword">new</span> Handler(<span class="keyword">new</span> Handler.Callback() &#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(<span class="meta">@NonNull</span> Message msg)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">switch</span> (msg.what)&#123;</span><br><span class="line">               <span class="keyword">case</span> WHAT_TO_CLIENT:</span><br><span class="line">                   System.out.println(<span class="string">&quot; client from server &quot;</span>+msg.arg1+<span class="string">&quot;,&quot;</span>+msg.obj);</span><br><span class="line">                   <span class="comment">//TODO 向服务端发送消息</span></span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">default</span>:</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *  信使</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> Messenger clientMessenger = <span class="keyword">new</span> Messenger(clientHandler);</span><br><span class="line">   <span class="comment">//连接远程服务</span></span><br><span class="line">   <span class="keyword">private</span> Messenger serverMessager;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> ServiceConnection messengerConnection = <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;Success  name = &quot;</span> + name + <span class="string">&quot;, service = &quot;</span> + service);</span><br><span class="line">           Log.e(TAG, <span class="string">&quot;onServiceConnected: &quot;</span>);</span><br><span class="line">           serverMessager = <span class="keyword">new</span> Messenger(service);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot; disconnected name = &quot;</span> + name);</span><br><span class="line">           Log.e(TAG, <span class="string">&quot;onServiceDisconnected: &quot;</span> );</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bindServer1</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Log.e(TAG, <span class="string">&quot;bindServer1: &quot;</span> );</span><br><span class="line">       Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">       intent.setAction(<span class="string">&quot;com.example.service&quot;</span>);</span><br><span class="line">       intent.setPackage(<span class="string">&quot;com.example.webrtc&quot;</span>);</span><br><span class="line">       bindService(intent,messengerConnection,BIND_AUTO_CREATE);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Message serverMessage = Message.obtain(<span class="keyword">null</span>,WHAT_TO_SERVER);</span><br><span class="line">serverMessage.arg1 = <span class="number">100</span>;</span><br><span class="line">serverMessage.obj = <span class="string">&quot;客户端发送消息&quot;</span>;</span><br><span class="line"><span class="comment">//将toServer.replyTo = clientMessager，这样，对应于服务端接收到此消息，获取到clientMessager，用此clientMessager向客户端回送消息</span></span><br><span class="line">serverMessage.replyTo = clientMessenger;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    serverMessager.send(serverMessage);</span><br><span class="line">&#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</font>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Network</title>
    <url>/2021/10/20/Android/network/</url>
    <content><![CDATA[<font size="2.9">

<h4 id="短连方案-域名合并"><a href="#短连方案-域名合并" class="headerlink" title="短连方案 域名合并"></a>短连方案 域名合并</h4><pre><code> 合并域名
</code></pre>
<h4 id="短连方案-IP-直联方案"><a href="#短连方案-IP-直联方案" class="headerlink" title="短连方案 IP 直联方案"></a>短连方案 IP 直联方案</h4><blockquote>
<p>方案很简单：程序启动的时候拉取&lt;api.dianping.com&gt;对应的所有的IP列表；对所有IP进行跑马测试，找到速度最快的IP。后续所有的HTTPS请求都将域名更换为跑马最快的IP即可。</p>
</blockquote>
<pre><code>举个例子，假如：经过跑马测试发现域名”api.dianping.com”对应最快的IP是”1.23.456.789”。

 &lt;http://api.dianping.com/ad/command?param1=123&gt;  
 
将被替换为&lt;http://1.23.456.789/ad/com
mand?param1=123&gt;
IP直连方案有下面几大优势： 
1. 摒弃了系统DNS，减少外界干扰，摆脱DNS劫持困扰。 
2. 自建DNS更新时机可以控制。
3. IP列表更换方便。
</code></pre>
<p>HTTP短连的端到端成功率从95%提升到97.5%，网络延时从1500毫秒降低到了1000毫秒，可谓小投入大产出<br>接下来要想进一步提升端到端成功率，就要开始进行长连通道建设了。<br>    提到长连通道建设，首先让人想到的应该是HTTP/2技术。它具有异步连接多路复用、头部压缩、请求响<br>    应管线化等众多优点。</p>
<p>如果查看HTTP/2的拓扑结构，其实非常简单：</p>
<img src="/2021/10/20/Android/network/img.png" class="" title="http">

<p>HTTP/2在客户端与服务器之间建立长连通道，将同一域名的请求都放在长连通道上进行。这种拓扑结构有如下一些缺点：<br>    1. 请求基于DNS，仍将面临DNS劫持风险。<br>    2. 不同域名的请求需要建立多条连接。<br>    3. 网络通道难以优化。客户端与服务器之间是公网链路。如果在多地部署服务器，成本消耗又会很大。<br>    4. 业务改造难度大。部署HTTP/2，需要对业务服务器进行改造，而且使用的业务服务器越多，需要改造的成本也越大。<br>    5. 网络协议可订制程度小。</p>
<pre><code>与HTTP/2相区别，我们这里推荐另一种代理长连的模式。这种模式的拓扑图如下：
</code></pre>
<img src="/2021/10/20/Android/network/img_1.png" class="">    

<pre><code>基本思路为：在客户端与业务服务器之间架设代理长连服务器，客户端与代理服务器建立TCP长连通道，客户端的HTTP请求被转换为了TCP通道上的二进制数据包。
代理服务器负责与业务服务器进行HTTP请求，请求的结果通过长连通道送回客户端。

与HTTP/2模式对比，代理长连模式具有下面一些优势： 
1. 对DNS无依赖。客户端与代理服务器之间的长连通道是通过IP建立的，与DNS没有关系。客户端的HTTP请求被转换为二进制数据流送到代理服务
器，也不需要进行DNS解析。代理服务器转发请求到业务服务器时，都处于同一内网，因此可以自己搭建DNS服务，减少对公网DNS服务的依赖。从这个层面上说，代理长连模式天生具有防DNS劫持的能
力。 
2. 不同域名的请求可以复用同一条长连通道。 3. 通道易优化。与部署业务服务器相比，部署代理长连服务器的代价就小了很多，可以在全国甚至全世界多地部署代理长连服务器。客户端在选择代理长连服务器时，可以通过跑马找到最快的服务器IP进行连接。
另一方面，代理服务器与业务服务器之间的网络通道也可以进行优化，通过架设专线或者租用腾讯云等方式可以大大提升通道服务质量。 4. 对业务完全透明。客户端的业务代码只要接入网络层的SDK即可，完全不用关心网络请求使用的是长连通道还是短连通道。代理服务器将客户端的请求还原为HTTP短连方式送到业务服务器，业务服务器不需要进行任何改造。 
5. 网络协议完全自定义。

出于快速推进的目的，同时受限于建设代理长连服务器需要投入大量资金，我们首先接入使用了腾讯的维纳斯（WNS）服务
</code></pre>
<h5 id="开发阶段"><a href="#开发阶段" class="headerlink" title="开发阶段"></a>开发阶段</h5><img src="/2021/10/20/Android/network/img_2.png" class="" title="network">

<p>代理服务器和业务服务器之间有专</p>
<p>4.自动降级Failover建设</p>
<img src="/2021/10/20/Android/network/img_3.png" class="" title="Failover">

<pre><code>由于客户端的请求都放在TCP通道上进行，当代理长连服务器需要升级或者由于极端情况发生了故障
时，将会造成客户端的整体网络服务不可用。为了解决这个问题，我们准备了Failover降级方案。当TCP 通道无法建立或者发生故障时，可以使用UDP面向无连接的特性提供另一条请求通道，
或者绕过代理长连服务器之间向业务服务器发起HTTP公网请求。本文的后面章节有展示Failover机制的实际效果。

在全国多地部署代理长连接入点。客户端与接入点建立长连通道时，可以选择最快的服务器就近接入，从而大大降低通道连接速度并提升通信质量。
我们在近两年的网络优化实践中，将客户端的网络通道服务整理成了一个独立的SDK，SDK内除了包含了自建的长连通信服务，也包含了WNS等网络通道。
</code></pre>
<img src="/2021/10/20/Android/network/img_4.png" class="" title="wns">

<ol>
<li><p>CIP通道：CIP通道就是上文中提到的自建代理长连通道。</p>
<pre><code> CIP是China Internet Plus的缩写，为网络优化集团的注册英文名称。App中绝大部分的请求通过CIP通道中的TCP子通道与长连服务器（CIP Connection Server）通信，
</code></pre>
<p> 长连服务器将收到的请求代理转发到业务服务器（API Server）。由于TCP子通道在一些极端情况下可能会无法工作，我们在CIP通道中额外部署了UDP子通道和HTTP子通道，<br> 其中HTTP子通道通过公网绕过长连服务器与业务服务器进行直接请求。CIP通道的平均端到端成功率目前已达99.7%，耗时平均在350毫秒左右。 </p>
</li>
<li><p>WNS通道：出于灾备的需要，腾讯的WNS目前仍被包含在网络通道SDK中。当极端情况发生，CIP通道不可用时，WNS通道还可以作为备用的长连替代方案。</p>
</li>
<li><p>HTTP通道：此处的HTTP通道是在公网直接请求API Server的网络通道。出于长连通道重要性的考虑，上传和下载大数据包的请求如果放在长连上进行都有可能导致长连通道的拥堵，因此我们将CDN访问、文件上传和频繁的日志上报等放在公网利用HTTP短连进行请求，同时也减轻代理长连服务器的负担。</p>
</li>
</ol>
</font>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>RePlugin(360)和 Shadow(tencent)</title>
    <url>/2021/10/23/Android/rePlugin/</url>
    <content><![CDATA[<font size="2.9">

<h4 id="Replugin-AndroidPlugin-4-0-0-插件6-1-1"><a href="#Replugin-AndroidPlugin-4-0-0-插件6-1-1" class="headerlink" title="Replugin (AndroidPlugin 4.0.0,插件6.1.1)"></a>Replugin (AndroidPlugin 4.0.0,插件6.1.1)</h4><p>该插件很久没有更新，最新Androidstudio 需要降级，很麻烦 故不再研究 ，原理大概了解。</p>
<h4 id="Shadow-更新维护"><a href="#Shadow-更新维护" class="headerlink" title="Shadow 更新维护"></a>Shadow 更新维护</h4><p>Java11 ：Android Studio Arctic Fox内置的JDK<br>File-&gt;prefenece-gradle<br>配置Android_HOME</p>
<p>window:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./gradlew build</span><br></pre></td></tr></table></figure>
<blockquote>
<p>sample-host是宿主应用</p>
</blockquote>
<blockquote>
<p>sample-manager是插件管理器的动态实现</p>
</blockquote>
<blockquote>
<p>sample-plugin/sample-loader是loader的动态实现，业务主要在这里定义插件组件和壳子代理组件的配对关系等。</p>
</blockquote>
<blockquote>
<p>sample-constant是在前3者中共用的相同字符串常量。</p>
</blockquote>
<blockquote>
<p>sample-plugin/sample-runtime是runtime的动态实现，业务主要在这里定义壳子代理组件的实际类。</p>
</blockquote>
<blockquote>
<p>sample-plugin/sample-app-lib是业务App的主要代码，是一个aar库。</p>
</blockquote>
<blockquote>
<p>sample-plugin/sample-normal-app是一个apk模块壳子，将sample-app-lib打包在其中，演示业务App是可以正常安装运行的。</p>
</blockquote>
<blockquote>
<p>sample-plugin/sample-plugin-app也是一个apk模块壳子，同样将sample-app-lib打包在其中，但是额外应用了Shadow插件，生成的apk不能正常安装运行。</p>
</blockquote>
<h3 id="接入Shadow-插件"><a href="#接入Shadow-插件" class="headerlink" title="接入Shadow 插件"></a>接入Shadow 插件</h3><blockquote>
<p>发布本地仓库<br>可以先在 buildScripts/gradle/common.gradle 路径下，修改发布版本或其他信息：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">./gradew publish</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>C:\Users\caiyuhao.m2\repository\com\tencent\shadow\dynamic<br>C:\Users\caiyuhao.m2\repository\com\tencent\shadow\core</p>
<p>插件的包名和宿主的包名要保持一致。</p>
<p>这个演示工程没有实现下载功能，而是假设下载的文件直接位于指定路径。 因此运行前需要手工用adb命令将指定内容push到指定位置。</p>
<p>编译插件，在plugin-project目录中运行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">./gradlew packageDebugPlugin</span><br><span class="line"></span><br><span class="line">adb push build/plugin-debug.zip /data/local/tmp</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>编译PluginManager，在manager-project目录中运行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">./gradlew assembleDebug</span><br><span class="line"></span><br><span class="line">adb push sample-manager/build/outputs/apk/debug/sample-manager-debug.apk /data/local/tmp</span><br></pre></td></tr></table></figure>
<p>最后可以用Android Studio打开host-project直接运行sample-host模块。</p>
<p>plugin-project中的plugin-normal-apk模块也可以直接安装运行，演示不使用Shadow时插件的运行情况。</p>
<p>cd /data/local/tmp<br>然后在文件夹中创建一个文件夹。例</p>
<p>1<br>mkdir folder<br>接下来更改权限</p>
<p>1<br>chmod - R 777 folder</p>
<p>adb shell ls -ld /data/ /data/local/ /data/local/tmp/<br>查看权限<br>确实有讲究。这个tmp目录是一个Android系统的特殊目录。这个目录的特点是adb可以直接push写入。app都能读取，但不能写入。同时这个目录还是手机的内置存储，可以直接用DexClassLoader加载这个目录中的apk，而sdcard不行。所以，如果我们用adb push到sdcard上，想动态加载还要将apk再复制到应用的data目录才行。</p>
<p>正是环境肯定没法用这个目录，因为应用没有这个目录的写入权限。建议应用把插件包下载到宿主的data私有目录中，以保证数据安全，其他应用不能篡改。</p>
</font>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>Android二维码扫描</title>
    <url>/2021/02/09/Android/scans-md/</url>
    <content><![CDATA[<font size="2.9">

<h4 id="二维码扫描"><a href="#二维码扫描" class="headerlink" title="二维码扫描"></a>二维码扫描</h4><blockquote>
<p>zxing 和华为的扫描控件 大为方便<br> 下面但功能也可以引入<br> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dependencies&#123;</span><br><span class="line"> implementation <span class="string">&#x27;com.huawei.hms:scan:&#123;version&#125;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<blockquote>
<p>我自己集成了 10分钟 搞定一个扫描控件 还是很方便的。</p>
</blockquote>
<span id="more"></span>

</font>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>zxing,scan</tag>
      </tags>
  </entry>
  <entry>
    <title>serialiable</title>
    <url>/2021/10/20/Android/serialiable/</url>
    <content><![CDATA[<font size="2.9">

<h4 id="Serializable-："><a href="#Serializable-：" class="headerlink" title="Serializable ："></a>Serializable ：</h4><pre><code>Serializable 是Java中的序列化接口，其使用起来简单但开销很大，序列化与反序列化过程需要大量I/O操作。
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ball</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="Parcelable："><a href="#Parcelable：" class="headerlink" title="Parcelable："></a>Parcelable：</h4><pre><code>Parcelable是Android中的序列化方式，因此更适合用在Android平台上，他的缺点是使用起来稍微麻烦点，但他的效率很高。
这是Android推荐的序列化方式，因此我们要首选Parcelable.Parcleable主要用在内存序列化上，
通过Parcelable将对象序列化到是存储设备中或者将对象序列化后通过网络传输也是可以的，但这个过程会稍微复杂，因此在这两种情况下建议大家使用Serializable。
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bird</span>  <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bird</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序列化  ：字节码 转 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Bird</span><span class="params">(Parcel in)</span> </span>&#123;</span><br><span class="line">        name = in.readString();</span><br><span class="line">        age = in.readInt();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Creator&lt;Bird&gt; CREATOR = <span class="keyword">new</span> Creator&lt;Bird&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Bird <span class="title">createFromParcel</span><span class="params">(Parcel in)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Bird(in);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Bird[] newArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Bird[size];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化  ： 对象转字节码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> flags</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">        dest.writeString(name);</span><br><span class="line">        dest.writeInt(age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

</font>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>shadowsocks 二次开发</title>
    <url>/2021/10/20/Android/shadowsocks/</url>
    <content><![CDATA[<h5 id="about"><a href="#about" class="headerlink" title="about"></a>about</h5>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title>C++</title>
    <url>/2021/11/22/CPP/cpp/</url>
    <content><![CDATA[<font size="2.9">

<h4 id="C-常用符号区别"><a href="#C-常用符号区别" class="headerlink" title="C++ 常用符号区别"></a>C++ 常用符号区别</h4><p>在学习C++的过程中我们经常会用到.和::和：和-&gt;，在此整理一下这些常用符号的区别。 </p>
<pre><code>1、A.B则A为对象或者结构体；

2、A-&gt;B则A为指针，-&gt;是成员提取，A-&gt;B是提取A中的成员B，A只能是指向类、结构、联合的指针；

3、::是作用域运算符，A::B表示作用域A中的名称B，A可以是名字空间、类、结构；

4、：一般用来表示继承；
</code></pre>
<p>类方法：即静态方法（静态成员函数），指的是类中被static修饰的方法，无this指针，不属于对象，可用类名调用</p>
<p>实例方法：即成员方法，属于对象的方法</p>
<p>性质1：一个类中的其他方法可以互相调用：实例方法可以调用类中的其他方法；但是类方法不能调用实例方法，只能调用其他类方法（非绝对，也可以使用传引用的方法让类方法调用实例方法）</p>
<p>性质2：当类文件加载到内存，实例方法不会分配内存空间，只有在对象被创建之后，才会为实例方法分配内存空间；而类方法在类被加载到内存时就分配了相应的内存空间</p>
<p>性质3：类方法不能被覆盖，实例方法可以被覆盖。</p>
<h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><ol>
<li>int (*pFunc)(int,int)<br>&amp;取地址  *取值</li>
</ol>
<ol start="2">
<li><p>void* 指针类型 int long char 数组 当前不做限定 万能指针</p>
<p>用的时候强转  （int）</p>
</li>
</ol>
<ol start="3">
<li><p>回调函数是 函数指针的一种业务场景  </p>
</li>
<li><p>c核心 内存管理和地址操作 </p>
</li>
</ol>
<h2 id="c链接库和编译流程"><a href="#c链接库和编译流程" class="headerlink" title="c链接库和编译流程"></a>c链接库和编译流程</h2><ol>
<li><p>.s 汇编文件</p>
</li>
<li><p>extern 生成符号表信息，但默认数据是0</p>
</li>
</ol>
</font>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>docker</title>
    <url>/2023/02/08/Docker/docker/</url>
    <content><![CDATA[<font size="2.9">

<h5 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h5><blockquote>
<p>首先我们使用 docker ps -a 命令查看本机所有的容器。</p>
</blockquote>
<blockquote>
<p>启动</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> docker run my/python:v1 cal <span class="comment">##my/python:v1为镜像名和标签  cal 日历</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">## 我们还可以通过指定参数，启动一个bash交互终端。</span></span><br><span class="line">docker run -it my/python:v1 /bin/bash</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<blockquote>
<p>stop docker</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">docker stop my/python:v1  </span><br></pre></td></tr></table></figure>


<blockquote>
<p>导出镜像</p>
</blockquote>
<p>使用 docker export 命令根据容器 ID 将镜像导出成一个文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">docker <span class="built_in">export</span> f299f501774c &gt; hangger_server.tar</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>导入镜像</p>
</blockquote>
<p>使用 docker import 命令则可将这个镜像文件导入进来。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">docker import - new_hangger_server &lt; hangger_server.tar</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看本机的容器</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">docker  images</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h5 id="save-and-load"><a href="#save-and-load" class="headerlink" title="save and load"></a>save and load</h5><p>1，保存镜像<br>  下面使用 docker save 命令根据 ID 将镜像保存成一个文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">docker save 0fdf2b4c26d3 &gt; save_hangge_server.tar</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> 我们还可以同时将多个 image 打包成一个文件，比如下面将镜像库中的 postgres 和 mongo 打包：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">docker save -o images.tar postgres:9.6 mongo:3.4</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>2，载入镜像</p>
<pre><code>使用 docker load 命令则可将这个镜像文件载入进来。
</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">docker load &lt; save_hangge_server.tar</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>两种方法不可混用。启动容器会报错  import 和 save </code></p>
<h5 id="使用load-数据丢失了-待查。。"><a href="#使用load-数据丢失了-待查。。" class="headerlink" title="使用load 数据丢失了 待查。。"></a>使用load 数据丢失了 待查。。</h5><h5 id="误删除-重新配置了"><a href="#误删除-重新配置了" class="headerlink" title="误删除 重新配置了"></a>误删除 重新配置了</h5><ol>
<li>权限问题 </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">chmod 777 .</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>pytest + allure + jenkins + docker</li>
</ol>
<blockquote>
<p>jenkins 容器 安装 allure 设置环境变量 export path=/var/jenkins_home/allure/bin:$PATH<br>source 无法使用</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">RUN /bin/bash -c <span class="string">&quot;source ~/.bashrc&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>jenkins web插件安装  和 全局配置 容器中路径</p>
</blockquote>
<blockquote>
<p>pip3 install pytest-allure</p>
</blockquote>
<font/>]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Java想到的问题</title>
    <url>/2019/05/14/Java/Java/</url>
    <content><![CDATA[<font size="2.9">

<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><h3 id="hash碰撞-解决方案"><a href="#hash碰撞-解决方案" class="headerlink" title="hash碰撞 解决方案"></a>hash碰撞 解决方案</h3><blockquote>
<p>比较常用的算法是链地址法和开放地址法</p>
</blockquote>
<h3 id="java-位运算"><a href="#java-位运算" class="headerlink" title="java 位运算"></a>java 位运算</h3><blockquote>
<p>1 左移(&lt;&lt;)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">//将5左移2位：</span></span><br><span class="line">    System.out.println(<span class="number">5</span>&lt;&lt;<span class="number">2</span>);<span class="comment">//运行结果是20</span></span><br><span class="line"></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0101</span>           然后左移<span class="number">2</span>位后，低位补<span class="number">0</span>：</span><br><span class="line"></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">01</span> <span class="string">&quot;00&quot;</span>           换算成<span class="number">10</span>进制为<span class="number">20</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<blockquote>
<p>2 右移（&gt;&gt;）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">//将5右移2位：</span></span><br><span class="line">    System.out.println(<span class="number">5</span>&gt;&gt;<span class="number">2</span>);<span class="comment">//运行结果是20</span></span><br><span class="line"></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0101</span>           然后右移<span class="number">2</span>位后，高位补<span class="number">0</span>：</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;00&quot;</span><span class="number">00</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">00000</span>  <span class="number">0001</span>           换算成<span class="number">10</span>进制为<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>符合位：0表示正数 1表示负数<br>根据这个规则，左移32位后，右边补上32个0值是不是就变成了十进制的0了？答案是NO，当int类型进行左移操作时，左移位数大于等于32位操作时，会先求余（%）后再进行左移操作。也就是说左移32位相当于不进行移位操作，左移40位相当于左移8位（40%32=8）。当long类型进行左移操作时，long类型在二进制中的体现是64位的，因此求余操作的基数也变成了64，也就是说左移64位相当于没有移位，左移72位相当于左移8位（72%64=8）</p>
<blockquote>
<p>3 无符号右移( &gt;&gt;&gt; )</p>
</blockquote>
<p>1.我们知道在Java中int类型占32位，可以表示一个正数，也可以表示一个负数。正数换算成二进制后的最高位为0，负数的二进制最高为为1</p>
<blockquote>
<p>4 位与( &amp; )</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">//将5左移2位：</span></span><br><span class="line">    System.out.println( <span class="number">5</span>&amp;<span class="number">3</span> );<span class="comment">//运行结果是20</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>转换为二进制：<span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0101</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>转换为二进制：<span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0011</span></span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>转换为二进制：<span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<blockquote>
<p>5 位或( | )</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">//将5左移2位：</span></span><br><span class="line">    System.out.println( <span class="number">5</span>|<span class="number">3</span> );<span class="comment">//运行结果是20</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>转换为二进制：<span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0101</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>转换为二进制：<span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0011</span></span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>转换为二进制：<span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0111</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<blockquote>
<p>6 位异或( ^ )</p>
</blockquote>
<blockquote>
<p>Java异或是Java二进制的一种运算规则。两个相同的操作位相同则为0，不同则为1。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">//将5左移2位：</span></span><br><span class="line">    System.out.println( <span class="number">5</span>^<span class="number">3</span> );<span class="comment">//运行结果是20</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>转换为二进制：<span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0101</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>转换为二进制：<span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0011</span></span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>转换为二进制：<span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0110</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<blockquote>
<p>7 位非( ~ )           位非是一元操作符</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">//将5左移2位：</span></span><br><span class="line">    System.out.println( ~<span class="number">5</span> );<span class="comment">//运行结果是20</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>转换为二进制：<span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0101</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">-------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">-<span class="number">6</span>转换为二进制：-<span class="number">6</span>转换为二进制：<span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1110</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<blockquote>
<p>8 负数计算（负数转二进制规律：</p>
</blockquote>
<p>1、取负数的绝对值的原码；</p>
<p>2、计算原码的反码；</p>
<p>3、对反码加一，获取补码。</p>
<p>）</p>
<blockquote>
<p>9 概念如下<br>首先我们要对原码、反码和补码有个了解：<br>1、所谓原码就是二进制定点表示法，即最高位为符号位，“0”表示正，“1”表示负，其余位表示数值的大小。<br>2、反码表示法规定：正数的反码与其原码相同；负数的反码是对其原码逐位取反，但符号位除外。<br>原码10010= 反码11101 （10010，1为符号码，故为负）<br>(11101) 二进制= -13 十进制<br>3、补码表示法规定：正数的补码与其原码相同；负数的补码是在其反码的末位加1</p>
</blockquote>
<h3 id="java-内部类"><a href="#java-内部类" class="headerlink" title="java 内部类"></a>java 内部类</h3><p> 结构清晰，可读性好，代码好维护</p>
<blockquote>
<p>内部类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User Outer&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UInner</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;UInner UInner&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用测试</span></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line"><span class="comment">//依赖外部实例化</span></span><br><span class="line">User.UInner iner = user.<span class="function">new <span class="title">UInner</span><span class="params">()</span></span>;</span><br><span class="line">inter.display();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>匿名内部类（没有类名，常见于接口）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ILoad</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadMap</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//正常情况</span></span><br><span class="line"><span class="comment">// public class User implements ILoad&#123;</span></span><br><span class="line"><span class="comment">//     @override</span></span><br><span class="line"><span class="comment">//     public void loadMap()&#123;</span></span><br><span class="line"><span class="comment">//         System.out.println(&quot;User Outer&quot;);</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//调用测试</span></span><br><span class="line"></span><br><span class="line">ILoad iner = <span class="keyword">new</span> ILoad()&#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;loadMap&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">iner.loadMap();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>静态内部类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User Outer&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UInner</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;UInner UInner&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用测试</span></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line"><span class="comment">//不依赖外部实例化</span></span><br><span class="line">User.UInner iner = <span class="keyword">new</span> User.UInner();</span><br><span class="line">inter.display();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="1-Future的应用场景"><a href="#1-Future的应用场景" class="headerlink" title="1. Future的应用场景"></a>1. Future的应用场景</h3><pre><code>    Future表示一个可能还没有完成的异步任务的结果，针对这个结果可以添加Callback以便在任务执行成功或失败后作出相应的操作。
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FutureTask&lt;String&gt; future =</span><br><span class="line">   <span class="keyword">new</span> FutureTask&lt;&gt;(<span class="keyword">new</span> Callable&lt;String&gt;() &#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> searcher.search(target);</span><br><span class="line">   &#125;&#125;);</span><br><span class="line"> executor.execute(future);</span><br></pre></td></tr></table></figure>
<h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><ol>
<li><p>mysql启动   mysql.server start</p>
</li>
<li><p>登录数据库：执行mysql -u root -p命令，命令意思是使用root账号登录数据库，需要输入刚才设置的密码</p>
</li>
<li><p>查询数据库 show databases;  </p>
</li>
<li><p>进入数据库 use xx；</p>
</li>
<li><p>退出数据库 exit;</p>
</li>
<li><p> 导入sql文件：source 『将.sql文件拖拽到这里，终端会自动显示其文件目录』（本文需要的.sql文件在文末服务端项目代码的db/mydb.sql目录）</p>
</li>
<li><p>显示本库中的所有表：show tables;，如果本库中的表没啥问题，说明上一步的.sql文件导入没问题</p>
</li>
</ol>
<h2 id="mysql-修改密码"><a href="#mysql-修改密码" class="headerlink" title="mysql 修改密码"></a>mysql 修改密码</h2><ol>
<li><p> 用SET PASSWORD命令<br>格式：mysql&gt; set password for 用户名@localhost=‘新密码’;<br>例子：mysql&gt; set password for root@localhost=’123456’;</p>
</li>
<li><p>用mysqladmin<br>格式：mysqladmin -u用户名 -p旧密码 password 新密码<br>例子：mysqladmin -uroot -p123456 password 123</p>
</li>
</ol>
</font>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java Mysql SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot</title>
    <url>/2022/06/11/Java/SpringBootAdmin/</url>
    <content><![CDATA[<font size="2.9">

<h4 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1. start.server start</span><br><span class="line"></span><br><span class="line">sudo /usr/local/mysql/support-files/mysql.server start</span><br><span class="line"></span><br><span class="line">2. mysql -u  root -p password</span><br><span class="line"></span><br><span class="line"> eg: mysql -u root -p 12345678</span><br><span class="line"></span><br><span class="line">3. mac 默认安装位置</span><br><span class="line">   /usr/local/mysql/</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="springboot"><a href="#springboot" class="headerlink" title="springboot"></a>springboot</h4><ol>
<li><p>JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@2f8ab988] will not be managed by Spring</p>
<p>对应的service 添加 <code>@Transactional</code></p>
</li>
<li><p>Springboot 入口</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication(exclude = &#123;SecurityAutoConfiguration.class, DataSourceAutoConfiguration.class, DruidDataSourceAutoConfigure.class, org.activiti.spring.boot.SecurityAutoConfiguration.class&#125;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>部署</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">maven  -- package 会生成jar</span><br><span class="line"></span><br><span class="line">java -jar xxx.jar</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="layui"><a href="#layui" class="headerlink" title="layui"></a>layui</h4><ol>
<li><a href="https://layui.gitee.io/v2/">官网</a></li>
</ol>
</font>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>树的定义</title>
    <url>/2021/12/12/Java/Tree/</url>
    <content><![CDATA[<font size="2.9">

<h3 id="tree定义"><a href="#tree定义" class="headerlink" title="tree定义"></a>tree定义</h3><p>树结果从自然界的树抽象而来，有树根，类似枝叉的分支关系和作为分支点的叶子 生活所见家谱，Windows的文件系统，表现各异 本质是树结构</p>
<p>树是由n(n&gt;=0)个节点组成的有限集合。n=0的树为空树 n&gt;0的树T </p>
<p>1.有一个特殊的节点称为根节点（root），它只有后继节点，没有前驱节点</p>
<p>2.除根节点 之外的其他节点分为m(m&gt;=0)个互不相交的集合 T0,T1….Tm-1,其中每个集合Ti (0=&lt;i&lt;m) 本身又是一颗树，称为根子树</p>
<p>树是递归定义的 节点是树的基本单位。若干个节点组成一个颗子树，若干颗互不相交的子树组成一颗树。所以 树是由结点组成的，结点之间具有层次关系的非线性结构。</p>


<h4 id="树的数据结构"><a href="#树的数据结构" class="headerlink" title="树的数据结构"></a>树的数据结构</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Tree</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="二叉-树的定义"><a href="#二叉-树的定义" class="headerlink" title="二叉 树的定义"></a>二叉 树的定义</h3></font>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>tree</tag>
      </tags>
  </entry>
  <entry>
    <title>harmonyos</title>
    <url>/2022/09/19/Harmonyos/harmonyos/</url>
    <content><![CDATA[<font size='2.9'>

<h5 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h5><ol>
<li><p>获取源码 </p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    # 安装repo 工具</span><br><span class="line">    $ curl https://gitee.com/oschina/repo/raw/fork_flow/repo-py3 &gt; repo</span><br><span class="line">    $ chmod a+x repo</span><br><span class="line">    $ sudo mv repo /usr/local/bin/repo</span><br><span class="line">    $ sudo apt install python3-pip</span><br><span class="line">    $ pip3 install -i https://repo.huaweicloud.com/repository/pypi/simple requests</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">获取标准系统源码</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir OpenHarmony</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> OpenHarmony</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> repo init -u https://gitee.com/openharmony/manifest.git -b master --no-repo-verify</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> repo sync -c  <span class="comment"># -c 获取当前分支代码</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> repo forall -c <span class="string">&#x27;git lfs pull&#x27;</span></span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果 repo init 出现以下错误 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">jackie@USER-20200124ZG:~$ repo init -u https://gitee.com/openharmony/manifest.git -b OpenHarmony_1.0.1_release --no-repo-verify</span><br><span class="line">    Downloading Repo source from http://mirrors.tuna.tsinghua.edu.cn/git/git-repo/</span><br><span class="line">    remote: Enumerating objects: 7113, done.</span><br><span class="line">    remote: Counting objects: 100% (7113/7113), done.</span><br><span class="line">    remote: Compressing objects: 100% (3728/3728), done.</span><br><span class="line">    remote: Total 7113 (delta 4590), reused 5464 (delta 3311)s   s</span><br><span class="line">    Receiving objects: 100% (7113/7113), 3.09 MiB | 1.76 MiB/s, done.</span><br><span class="line">    Resolving deltas: 100% (4590/4590), done.</span><br><span class="line">    repo: warning: verification of repo code has been disabled;</span><br><span class="line">    repo will not be able to verify the integrity of itself.</span><br><span class="line"></span><br><span class="line">    repo: error: unable to resolve &quot;fork_flow&quot;</span><br><span class="line">    fatal: cloning the git-repo repository failed, will remove &#x27;.repo/repo&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>切换到root 权限 sudo</code> 可以解决</p>
</font></li>
</ol>
]]></content>
      <categories>
        <category>Harmonyos</category>
      </categories>
  </entry>
  <entry>
    <title>iosMasonryLayout</title>
    <url>/2021/11/08/IOS/iosMasonryLayout/</url>
    <content><![CDATA[<font size="2.9">

<h4 id="Masonry"><a href="#Masonry" class="headerlink" title="Masonry"></a>Masonry</h4><p>Masonry是一个轻量级的布局框架，拥有自己的描述语法，采用更优雅的链式语法封装AutoLayout，简洁明了并具有高可读性，而且同时支持 iOS 和 Max OS X</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">UIButton  *smsSendBtn = [UIButton  buttonWithType:UIButtonTypeSystem];</span><br><span class="line">   [smsSendBtn setTitle:@<span class="string">&quot;发送验证码&quot;</span> forState:UIControlStateNormal];</span><br><span class="line">   [smsSendBtn addTarget:self action:@<span class="built_in">selector</span>(smsSendBtnRequest) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">   [scrollview addSubview:smsSendBtn];</span><br><span class="line">   [smsSendBtn mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">       make.top.<span class="built_in">mas_equalTo</span>(lineView.mas_bottom).<span class="built_in">offset</span>(<span class="number">5</span>);</span><br><span class="line">       make.right.<span class="built_in">mas_equalTo</span>(scrollview.mas_right).<span class="built_in">offset</span>(<span class="number">-30</span>);</span><br><span class="line">       make.size.<span class="built_in">mas_equalTo</span>(<span class="built_in">CGSizeMake</span>(<span class="number">100.0</span>, <span class="number">50</span>));<span class="comment">//top = bottom + offset()</span></span><br><span class="line">   &#125;];</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="关于签名"><a href="#关于签名" class="headerlink" title="关于签名"></a>关于签名</h4><blockquote>
<p>dev 开发(Development)证书和描述文件      开发使用，可以直接装手机上</p>
<blockquote>
<p>p12 .p12文件本身就是一个加密的证书<br>.mobileprovision  是一个设置文件，实质是一个XML文件，不是证书。在部署 iOS 设备时可以使用苹果官方的「iPhone 配置实用工具.app」或者 Apple Configurator.app 创建一个描述文件，然后将其安装到 iOS 设备上对该设备进行管理</p>
</blockquote>
</blockquote>
<blockquote>
<p>dis 发布(Distribution)证书和描述文件      用于提交 AppStore</p>
</blockquote>
<h4 id="pod"><a href="#pod" class="headerlink" title="pod"></a>pod</h4><ol>
<li><p>podfile 编写</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">platform :ios, &#x27;9.0&#x27;</span><br><span class="line">use_frameworks!</span><br><span class="line"></span><br><span class="line">target  &#x27;SiguaApp&#x27; do</span><br><span class="line">   pod &#x27;AFNetworking&#x27;</span><br><span class="line">   pod &#x27;Masonry&#x27;</span><br><span class="line">   pod &#x27;SDWebImage&#x27;</span><br><span class="line">   pod &#x27;YYModel&#x27;</span><br><span class="line">   pod &#x27;MJRefresh&#x27;</span><br><span class="line">   pod &#x27;IQKeyboardManager&#x27;</span><br><span class="line"><span class="meta">  #</span><span class="bash"> pod <span class="string">&#x27;MMPlaceHolder&#x27;</span></span></span><br><span class="line">   pod &#x27;MJExtension&#x27;</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>pod 安装</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">pod install  # install</span><br><span class="line"></span><br><span class="line"> pod update  # update</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="xcode-14-模拟器"><a href="#xcode-14-模拟器" class="headerlink" title="xcode 14 模拟器"></a>xcode 14 模拟器</h4><ol>
<li><p>xcodedefault.xctoolchain/usr/lib/arc/libarclite_iphonesimulator.a not found</p>
<p>设置target &gt;=11</p>
</li>
</ol>
</font>]]></content>
      <categories>
        <category>IOS</category>
      </categories>
      <tags>
        <tag>Masonry sign</tag>
      </tags>
  </entry>
  <entry>
    <title>iosThread</title>
    <url>/2021/10/20/IOS/iosThread/</url>
    <content><![CDATA[<font size="2.9">

<h4 id="Unity-UE-调用iOS接口-crash"><a href="#Unity-UE-调用iOS接口-crash" class="headerlink" title="Unity /UE 调用iOS接口 crash"></a>Unity /UE 调用iOS接口 crash</h4><pre><code>带UI的接口 要回到主线程
</code></pre>
<h4 id="Unity-iOS包切后台-没有回调"><a href="#Unity-iOS包切后台-没有回调" class="headerlink" title="Unity iOS包切后台 没有回调"></a>Unity iOS包切后台 没有回调</h4><pre><code>回调被替换或者重置  查看代码
</code></pre>
<h4 id="警告-iOS-主线程问题-提醒Main-Thread-Checker-UI-API-called-on-a-background-thread的解释"><a href="#警告-iOS-主线程问题-提醒Main-Thread-Checker-UI-API-called-on-a-background-thread的解释" class="headerlink" title="警告 [iOS]主线程问题:提醒Main Thread Checker: UI API called on a background thread的解释"></a>警告 [iOS]主线程问题:提醒Main Thread Checker: UI API called on a background thread的解释</h4><p>没有在主线程操作</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">dispatch_async(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), <span class="operator">^</span>&#123;  </span><br><span class="line">    <span class="comment">// 处理耗时操作的代码块...  </span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">//通知主线程刷新  </span></span><br><span class="line">    dispatch_async(dispatch_get_main_queue(), <span class="operator">^</span>&#123;  </span><br><span class="line">        <span class="comment">//回调或者说是通知主线程刷新，  </span></span><br><span class="line">    &#125;);  </span><br><span class="line">      </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>dispatch_async开启一个异步操作，第一个参数是指定一个gcd队列，第二个参数是分配一个处理事物的程序块到该队列。<br>dispatch_get_global_queue(0, 0)，指用了全局队列。<br>一般来说系统本身会有3个队列。global_queue，current_queue,以及main_queue.</p>
<p>获取一个全局队列是接受两个参数，第一个是我分配的事物处理程序块队列优先级。分高低和默认，0为默认2为高，-2为低</p>
<p>处理完事物后，需要将结果返回给或者是刷新UI主线程，同样，和上面一样，抓取主线程，程序块操作。</p>
<h4 id="ios-状态栏"><a href="#ios-状态栏" class="headerlink" title="ios 状态栏"></a>ios 状态栏</h4><p>在 Info.plist 文件中添加 Status bar is initially hidden 设置为 YES ，这个是隐藏 App 在 LunchScreen（欢迎界面）时的状态栏。</p>
<p>在 Info.plist 文件中添加 View controller-based status bar appearance 设置为 NO，这个是隐藏 App 在所有 UIViewController 时的状态栏</p>
<p>Status Bar 状态栏的颜色<br>状态栏分前后两部分，要分清这两个概念，后面会用到：</p>
<blockquote>
<p>文字部分：就是指的显示电池、时间等部分。<br>背景部分：就是显示黑色或者图片的背景部分</p>
</blockquote>
</font>
]]></content>
      <categories>
        <category>IOS</category>
      </categories>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>ocClassDifferent</title>
    <url>/2021/11/15/IOS/ocClassDifferent/</url>
    <content><![CDATA[<font size="2.9">

<h4 id="1-nil-和NULL"><a href="#1-nil-和NULL" class="headerlink" title="1.nil 和NULL"></a>1.nil 和NULL</h4><blockquote>
<p><code>引用类型用</code> oc的类指针 nil</p>
</blockquote>
<blockquote>
<p><code>基本类型用</code> NULL</p>
</blockquote>
<blockquote>
<p>本质上是一样的 ，都是宏定义 ，0</p>
</blockquote>
<blockquote>
<p>Person *p = nil 代表不指向任何对象</p>
</blockquote>
<h4 id="2-分组导航标记"><a href="#2-分组导航标记" class="headerlink" title="2.分组导航标记"></a>2.分组导航标记</h4><blockquote>
<p>#pragma mark 名字</p>
</blockquote>
<blockquote>
<p>#pragma mark - 产生分割线</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@interface</span> Person : NSObject</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@public</span></span><br><span class="line">    NSString *_name;</span><br><span class="line">    <span class="keyword">int</span> _age;</span><br><span class="line">    <span class="keyword">float</span> _height;</span><br><span class="line">&#125;</span><br><span class="line">-(<span class="keyword">void</span>) sayMi:(NSString *)json;</span><br><span class="line"><span class="meta">@end</span></span><br><span class="line"></span><br><span class="line">#pragma mark - Person</span><br><span class="line"><span class="meta">@implementation</span> Person</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)sayMi:(NSString *)json&#123;</span><br><span class="line">    NSLog(@<span class="string">&quot;name = %@,json= %@&quot;</span>,_name,json);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@end</span></span><br><span class="line"></span><br><span class="line">#pragma mark  - 实现</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="meta">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="comment">// insert code here...</span></span><br><span class="line">        NSLog(@<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        Person *person = [Person  <span class="keyword">new</span>];</span><br><span class="line">        person-&gt;_height = <span class="number">30.0f</span>;</span><br><span class="line">        person-&gt;_name =  @<span class="string">&quot;zx shanzu&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        [person  sayMi:@<span class="string">&quot;&#123;\&quot;price\&quot;:\&quot;1000\&quot;&#125;&quot;</span>];</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="函数和方法"><a href="#函数和方法" class="headerlink" title="函数和方法"></a>函数和方法</h5><blockquote>
<p>方法定义@interface  实现在@implement</p>
</blockquote>
<blockquote>
<p>函数 调用不 一样   可以写在  类 中除了 大括号<br>类的声明和 实现 都要有， 声明要在前  实现 可以放在使用类的后面 </p>
</blockquote>
<blockquote>
<p><code>+</code> 方法就是类方法，<code>-</code> 方法就是实例方法</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">+ (<span class="keyword">void</span>)thisIsAClassMethod; <span class="comment">// 类方法，不需要实例化对象就可以调用</span></span><br><span class="line">- (<span class="keyword">void</span>)thisIsAnInstanceMethod; <span class="comment">// 实例方法，必须通过实例化的对象调用</span></span><br><span class="line"><span class="comment">// 对象的初始化 OC中以消息机制传递信息，发送 alloc 消息给类分配内存空间，发送 init 消息生成对象，指针指向对象本身。</span></span><br><span class="line">ClassName *obj = [[ClassName alloc] init];</span><br></pre></td></tr></table></figure>
<pre><code>类方法：
1、类方法可以调用类方法；
2、类方法不可以调用实例方法，但是类方法可以通过创建对象来访问实例方法；
3、类方法不可以使用实例变量。（可以使用self ，因为 self 不是实例变量。）
4、类方法作为消息，可以发送到类或者对象里面去（就是可以通过类或者对象调用类方法）
实例方法里面的 self ，是对象的首地址。
类方法里面的 self ，是 class 。

用过程中既可以使用新定义的方法名，也可以使用以前的方法（点表示法）

属性特征：readwrite readonly assign retain copy nonatomic

assign：默认行为，使用 @property int num 就是使用了 assign 行为，就是给实例变量赋了一个值

retain：实现了两个功能，一个是保留了赋值时传递的对象，一个是赋值前释放了以前的值，使用时加上 @property (retain) int num;

copy：发送一条复制的消息给被传递的对象，保留它，并释放任何以前的值；

nonatomic：非原子访问器，加上后可以保证属性在被一个线程使用时不被另一个线程访问，不存在 atomic 关键字，默认情况下，所有方法都是自动合成的。（类似Java中的线程锁机制 synchronised）
readwrite：可读写
readonly：只读
</code></pre>
<h4 id="OC点和右箭头访问变量的区别"><a href="#OC点和右箭头访问变量的区别" class="headerlink" title="OC点和右箭头访问变量的区别"></a>OC点和右箭头访问变量的区别</h4><pre><code>语法
OC中.语法实际上就是方法调用，比如通过self.deviceID访问属性，如果它出现在=的左边那么就是调用属性的setter方法，如果出现在=右边就是调用属性的getter方法。
所以如下所示的定义：
</code></pre>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">self.deviceID = @<span class="string">&quot;123&quot;</span>;和[self setDeviceID:@<span class="string">&quot;123&quot;</span>];是等价的。</span><br><span class="line"></span><br><span class="line">NSString *str = self.deviceID;和NSString *str = [self deviceID];是等价的。</span><br></pre></td></tr></table></figure>
<p> -&gt;语法<br>    OC中-&gt;用于访问成员变量。所以：</p>
<pre><code>self-&gt;_deviceID和_deviceID是等价的。

self-&gt;deviceType和deviceType是等价的。
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">@interface Device : NSObject</span><br><span class="line">&#123;</span><br><span class="line">    @<span class="keyword">public</span> NSString *deviceType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="built_in">property</span> (nonatomic , strong) NSString *deviceID;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre>
<h4 id="ios-性能优化"><a href="#ios-性能优化" class="headerlink" title="ios 性能优化"></a>ios 性能优化</h4><p><a href="https://www.jianshu.com/p/a9c86e7df095">https://www.jianshu.com/p/a9c86e7df095</a><br>模拟内存警告</p>
</font>]]></content>
      <categories>
        <category>IOS</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux_command</title>
    <url>/2023/04/06/Linux/Linux-command/</url>
    <content><![CDATA[<font size="2.9">

<h4 id="Linux-command"><a href="#Linux-command" class="headerlink" title="Linux_command"></a>Linux_command</h4><blockquote>
<p>find 用于搜索文件</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">find /home/book/dira/ -name <span class="string">&quot;test1.txt&quot;</span></span><br><span class="line">find /home/book/dira/ -name <span class="string">&quot;*.txt&quot;</span></span><br><span class="line">find /home/book/dira/ -name <span class="string">&quot;dira&quot;</span></span><br><span class="line">find . -name <span class="string">&quot;*.txt&quot;</span></span><br><span class="line"><span class="comment"># 默认是当前路径</span></span><br><span class="line">find -name <span class="string">&quot;*.txt&quot;</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>grep 查找文件中符合条件的字符串</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#在test1.txt中查找字符串abc,-n 表示显示行号</span></span><br><span class="line">grep -n <span class="string">&quot;abc&quot;</span> test1.txt</span><br><span class="line"><span class="comment">#当前目录下递归查找字符串</span></span><br><span class="line">grep -R <span class="string">&quot;abc&quot;</span> .</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>文件压缩命令</p>
</blockquote>
<p>tar 用于打包压缩和解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">c(create)：表示创建用来生成文件包 。</span><br><span class="line">-x：表示提取，从文件包中提取文件。</span><br><span class="line">-t：可以查看压缩的文件。</span><br><span class="line">-z：使用 gzip 方式进行处理，它与 <span class="string">&quot;c&quot;</span> 结合就表示压缩，与 <span class="string">&quot;x&quot;</span> 结合就表示解压缩。</span><br><span class="line">-j：使用 bzip2 方式进行处理，它与 <span class="string">&quot;c&quot;</span> 结合就表示压缩，与”x“结合就表示解压缩。</span><br><span class="line">-v(verbose)：详细报告 tar 处理的信息。</span><br><span class="line">-f(file)：表示文件，后面接着一个文件名。 -C &lt;指定目录&gt; 解压到指定目录。</span><br><span class="line"></span><br><span class="line">把目录 dira 压缩、打包为 dira.tar.gz 文件</span><br><span class="line">tar czvf dira.tar.gz dira</span><br><span class="line"><span class="comment">#解压到当前目录</span></span><br><span class="line">tar xzvf dira.tar.gz</span><br><span class="line"><span class="comment">#解压到 /home/book</span></span><br><span class="line">tar xzvf dira.tar.gz -C /home/book</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="网络管理相关命令"><a href="#网络管理相关命令" class="headerlink" title="网络管理相关命令"></a>网络管理相关命令</h4><blockquote>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"> ping 用于测试主机之间网络的连通性</span><br><span class="line"> ping www.baidu.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wget 用于在网络上下载文件</span><br><span class="line"></span><br><span class="line">wget http://</span><br><span class="line"></span><br><span class="line">curl 用于在网络上下载文件</span><br><span class="line"></span><br><span class="line">curl https://</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ifconfig 用于查看网络情况</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="软件安装相关命令"><a href="#软件安装相关命令" class="headerlink" title="软件安装相关命令"></a>软件安装相关命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">搜索软件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo apt search 关键字</span><br><span class="line">安装软件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo apt install 软件包名</span><br><span class="line">卸载软件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#卸载软件</span></span><br><span class="line">sudo apt remove 软件包名</span><br><span class="line"><span class="comment">#卸载软件并删除配置文件</span></span><br><span class="line">sudo apt remove 软件包名 --purge</span><br><span class="line"><span class="comment">#卸载软件并移除软件依赖</span></span><br><span class="line">sudo apt autoremove 软件包名</span><br><span class="line">软件更新</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo apt upgrade 软件包名</span><br><span class="line"><span class="comment"># 升级所有可以升级的软件</span></span><br><span class="line">sudo apt upgrade</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="系统管理相关命令"><a href="#系统管理相关命令" class="headerlink" title="系统管理相关命令"></a>系统管理相关命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">useradd 用于添加用户</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">useradd hello</span><br><span class="line">passwd 用于设置或者修改用户密码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">passwd hello</span><br><span class="line">userdel 用于删除用户</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -r 选项可以删除用户家目录</span></span><br><span class="line">sudo userdel username</span><br><span class="line">usermod 用来修改用户帐号的各项设定</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#最常用于将用户加入指定的组</span></span><br><span class="line"><span class="comment">#将用户myfreax添加到games组</span></span><br><span class="line"><span class="comment">#应该始终使用-a追加选项。如果省略-a选项，则用户将从-G选项之后未列出的组中删除</span></span><br><span class="line">sudo usermod -a -G games myfreax</span><br><span class="line">free 用于查看系统内存</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">free -m <span class="comment">#以 MB 为单位</span></span><br><span class="line">free -g <span class="comment">#以 GB 为单位</span></span><br><span class="line">whoami 用于查看当前用户名</span><br><span class="line"></span><br><span class="line">ps 用于查看进程信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ps -a <span class="comment">#查看所有进程</span></span><br><span class="line">ps -e <span class="comment">#查看除内核以外的所有进程</span></span><br><span class="line">ps -f <span class="comment">#全格式输出</span></span><br><span class="line">top 动态查看进程信息</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</font>]]></content>
  </entry>
  <entry>
    <title>Git相关</title>
    <url>/2021/04/16/Tools/Git/</url>
    <content><![CDATA[<font size="2.9">

<h5 id="关于Merge"><a href="#关于Merge" class="headerlink" title="关于Merge"></a>关于Merge</h5><p>1&gt;从其他地方 负责了一个覆盖本地 出行 未合并报错<br><strong>您尚未结束您的合并（存在 MERGE_HEAD</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf .git/MERGE*</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure>

</font>

]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>评论配置</title>
    <url>/2020/12/23/Tools/LeanCloud-md/</url>
    <content><![CDATA[<font size="2.9">

<p><strong>Hexo的Next主题集成了多种评论系统，在这里介绍两种个人感觉还不错的评论系统：Valine和Gitment。这里介绍前者</strong></p>
<h4 id="Valine-评论系统"><a href="#Valine-评论系统" class="headerlink" title="Valine 评论系统"></a>Valine 评论系统</h4><blockquote>
<p>使用 Valine 评论系统，这款系统不需要登录便可以登录，没有后端，Next 主题最新已经支持安装。</p>
</blockquote>
<ul>
<li><p>基于 Leancloud 的系统</p>
</li>
<li><p>支持 MarkDown 语法</p>
</li>
<li><p>无后端实现，快速高效</p>
<span id="more"></span>
<h4 id="关于配置"><a href="#关于配置" class="headerlink" title="关于配置"></a>关于配置</h4><blockquote>
<p>注册 LeanCloud<br>因为 Valine 是基于 LeanCloud 系统的，所以先在 LeanCloud 中注册账号</p>
</blockquote>
</li>
<li><p><a href="https://leancloud.cn/dashboard/login.html#/signin">官网入口</a></p>
</li>
</ul>
<h4 id="关于设置-Next-主题"><a href="#关于设置-Next-主题" class="headerlink" title="关于设置 Next 主题"></a>关于设置 Next 主题</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># Valine.</span><br><span class="line"># You can get your appid and appkey from https://leancloud.cn</span><br><span class="line"># more info please open https://valine.js.org</span><br><span class="line">valine:</span><br><span class="line">  enable: true # 是否开启</span><br><span class="line">  appid:   # 上一步获取的 App ID</span><br><span class="line">  appkey:  # 上一步获取的 App Key</span><br><span class="line">  notify: false # 新留言是否需要通知 https://github.com/xCss/Valine/wiki</span><br><span class="line">  verify: false # 是否需要验证，验证比较反人类建议false关闭</span><br><span class="line">  placeholder: 请在此输入您的留言 # 默认留言框内的文字</span><br><span class="line">  avatar: mm # 默认头像</span><br><span class="line">  guest_info: nick,mail # 默认留言框的头部需要访问者输入的信息</span><br><span class="line">  pageSize: 10 # pagination size #默认单页的留言条数</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="关于评论"><a href="#关于评论" class="headerlink" title="关于评论"></a>关于评论</h4><blockquote>
<p>如果想要管理评论，进入 leancloud 官网，找到 控制台-&gt;存储-&gt;结构化数据-&gt;Commet 中进行管理</p>
</blockquote>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">fatal: 位于未检出的子模组 &#x27;.deploy_git&#x27;</span><br><span class="line">Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>直接删除 <strong>.deploy_git</strong> 即可</p>
</blockquote>
</font>
]]></content>
      <categories>
        <category>Hexo评论</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>调研记录一下</title>
    <url>/2020/12/21/Tools/MoreLear/</url>
    <content><![CDATA[<font size="2.9">

<h4 id="1-能力考试院"><a href="#1-能力考试院" class="headerlink" title="1.能力考试院"></a>1.能力考试院</h4><span id="more"></span>
<blockquote>
<p><a href="http://sydw.rsj.sh.gov.cn/ksybaoming/website/online/list.zul?planId=d27d2a48-657d-4b15-bbe1-9511495bf384">http://sydw.rsj.sh.gov.cn/ksybaoming/website/online/list.zul?planId=d27d2a48-657d-4b15-bbe1-9511495bf384</a> </p>
</blockquote>
<h4 id="2-查询"><a href="#2-查询" class="headerlink" title="2.查询"></a>2.查询</h4><blockquote>
<p><a href="http://sh.offcn.com/html/shiyedanwei/zhaokaoxinxi/cjcx/">http://sh.offcn.com/html/shiyedanwei/zhaokaoxinxi/cjcx/</a></p>
</blockquote>
<blockquote>
<p><a href="http://sh.offcn.com/html/2020/11/191560.html">http://sh.offcn.com/html/2020/11/191560.html</a></p>
</blockquote>
<blockquote>
<p><a href="http://sh.offcn.com/zg/shsydwdg/">http://sh.offcn.com/zg/shsydwdg/</a></p>
</blockquote>
</font>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Link</tag>
      </tags>
  </entry>
  <entry>
    <title>charles</title>
    <url>/2021/06/01/Tools/charles/</url>
    <content><![CDATA[<font size="2.9">

<h5 id="https-破解"><a href="#https-破解" class="headerlink" title="https 破解"></a>https 破解</h5><p> 1.基本配置  mac + android</p>
<p> 2.手机浏览器  <strong><a href="http://charlesproxy.com/getssl">http://charlesproxy.com/getssl</a></strong> 下载证书  Mac下面</p>
<p><a href="'charles/txBDmwpCkj.png'"></a> 在钥匙串找到，双击选择信任</p>
<p> 3.res/raw/charles.perm   res/xml/network_security_config.xml </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">network-security-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">domain-config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 域名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">domain</span> <span class="attr">includeSubdomains</span>=<span class="string">&quot;true&quot;</span>&gt;</span>api.xxgame.cn<span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">domain</span> <span class="attr">includeSubdomains</span>=<span class="string">&quot;true&quot;</span>&gt;</span>canye.xxgame.cn<span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">domain</span> <span class="attr">includeSubdomains</span>=<span class="string">&quot;true&quot;</span>&gt;</span>felix.xxgame.cn<span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">domain</span> <span class="attr">includeSubdomains</span>=<span class="string">&quot;true&quot;</span>&gt;</span>mori.xxgame.cn<span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">domain</span> <span class="attr">includeSubdomains</span>=<span class="string">&quot;true&quot;</span>&gt;</span>jumbo.xxgame.cn<span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">domain</span> <span class="attr">includeSubdomains</span>=<span class="string">&quot;true&quot;</span>&gt;</span>lynn.xxgame.cn<span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">domain</span> <span class="attr">includeSubdomains</span>=<span class="string">&quot;true&quot;</span>&gt;</span>canye.milicat.cn<span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">domain</span> <span class="attr">includeSubdomains</span>=<span class="string">&quot;true&quot;</span>&gt;</span>s-cdn.xxgame.cn<span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">trust-anchors</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">certificates</span> <span class="attr">src</span>=<span class="string">&quot;@raw/charles&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trust-anchors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">domain-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">network-security-config</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>4.官方描述<strong><a href="https://developer.android.google.cn/training/articles/security-config.html">https://developer.android.google.cn/training/articles/security-config.html</a></strong></p>
<p>5.在Android application标签配置</p>
<p>6.去掉代理这个包无法使用，需要删除androidmanifest.xml配置</p>
</font>]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>charles</tag>
      </tags>
  </entry>
  <entry>
    <title>MonoBehaviourTree</title>
    <url>/2021/10/20/Unity/BehaviourTree/</url>
    <content><![CDATA[<font size="2.9">

<h4 id="Unity-AI-行为树"><a href="#Unity-AI-行为树" class="headerlink" title="Unity AI 行为树"></a>Unity AI 行为树</h4><pre><code>遍历从左边 中 右  左边优先级最高，右边最低
</code></pre>
<h4 id="角色-吃饭-睡觉-地震"><a href="#角色-吃饭-睡觉-地震" class="headerlink" title="角色 吃饭 睡觉 地震"></a>角色 吃饭 睡觉 地震</h4><pre><code>地震 xxx　会中断 吃饭睡觉
吃饭 xxx  会中断 睡觉
睡觉 优先级最低
</code></pre>
<h4 id="Tools-简单操作"><a href="#Tools-简单操作" class="headerlink" title="Tools 简单操作"></a>Tools 简单操作</h4><img src="/2021/10/20/Unity/BehaviourTree/1.png" class="">

<blockquote>
<p>Eat action</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> BehaviorDesigner.Runtime;</span><br><span class="line"><span class="keyword">using</span> BehaviorDesigner.Runtime.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Eat</span> : <span class="title">Action</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 变量：食物。会在行为树编辑器中赋值</span></span><br><span class="line">    <span class="keyword">public</span> SharedString food;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> TaskStatus <span class="title">OnUpdate</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;eat: &quot;</span> + food.GetValue());</span><br><span class="line">        <span class="keyword">return</span> TaskStatus.Success;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Sleep action</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Sleep1</span> : <span class="title">Action</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//行为树中赋值</span></span><br><span class="line">    <span class="keyword">public</span> SharedFloat sleepTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> m_sleepTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> m_startTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnStart</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.OnStart();</span><br><span class="line">        m_startTime = Time.time;</span><br><span class="line">        m_sleepTime = (<span class="built_in">float</span>)sleepTime.GetValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> TaskStatus <span class="title">OnUpdate</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (m_startTime +m_sleepTime &lt;Time.time)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;Time OK ----&gt;&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> TaskStatus.Success;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> TaskStatus.Running;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>新建Empty GameObject , 新建C# 脚本 ，挂在空物体上</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RunCustom</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> BehaviorTree m_bt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获取行为树</span></span><br><span class="line">        m_bt = gameObject.AddComponent&lt;BehaviorTree&gt;();</span><br><span class="line">        <span class="comment">//加载树资源</span></span><br><span class="line">        <span class="keyword">var</span> extBt = Resources.Load&lt;ExternalBehaviorTree&gt;(<span class="string">&quot;Behavior1&quot;</span>);</span><br><span class="line">        m_bt.StartWhenEnabled = <span class="literal">false</span>;</span><br><span class="line">        m_bt.RestartWhenComplete = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//设置行为树 (UI面板已经赋值)</span></span><br><span class="line">        m_bt.ExternalBehavior = extBt;</span><br><span class="line">        m_bt.EnableBehavior();</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 行为树左边节点 优先 右边</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 地震中断吃饭睡觉</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>  吃饭中断睡觉</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>  </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.A))</span><br><span class="line">        &#123;</span><br><span class="line">            m_bt.SetVariableValue(<span class="string">&quot;eatFood&quot;</span>,<span class="string">&quot;apple code&quot;</span>); </span><br><span class="line">            m_bt.SendEvent(<span class="string">&quot;Eat1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.S))</span><br><span class="line">        &#123;</span><br><span class="line">            m_bt.SetVariableValue(<span class="string">&quot;sleepTime1&quot;</span>, <span class="number">1000f</span>);</span><br><span class="line">            m_bt.SendEvent(<span class="string">&quot;Sleep1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.D))</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">            m_bt.SendEvent(<span class="string">&quot;EarthQuake&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        transform.Rotate(Vector3.up*Time.deltaTime*<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</font>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>MonoBehaviourTree</tag>
      </tags>
  </entry>
  <entry>
    <title>Csharp——lua记录</title>
    <url>/2021/01/22/Unity/Csharp/</url>
    <content><![CDATA[<font size="2.9">

<h5 id="记录一下"><a href="#记录一下" class="headerlink" title="记录一下"></a>记录一下</h5><blockquote>
<p>Lua 内部方法调用 使用 self:Funct()</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> Luck = &#123;&#125;</span><br><span class="line"><span class="built_in">self</span>.arrayList  = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">Luck:uiShow</span><span class="params">()</span></span></span><br><span class="line">   <span class="built_in">self</span>.arrayList  = &#123;<span class="string">&quot;key&quot;</span>,<span class="string">&quot;key2&quot;</span>&#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ui show&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Luck:Close</span><span class="params">()</span></span></span><br><span class="line">   <span class="comment">--调用的地方 </span></span><br><span class="line">   <span class="built_in">self</span>:uiShow()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Luck</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<blockquote>
<p>ui 判断为空</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">true</span> <span class="keyword">then</span></span><br><span class="line">      <span class="comment">--显示</span></span><br><span class="line">      num.gameobject:SetActive(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">      <span class="comment">--隐藏</span></span><br><span class="line">      num.gameobject:SetActive(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="GameOject-静态方法"><a href="#GameOject-静态方法" class="headerlink" title="GameOject 静态方法"></a>GameOject 静态方法</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">GameObject 基类 是 Object ,命名空间 <span class="keyword">namespace</span>  <span class="title">UnityEngine</span>&#123;&#125;</span><br><span class="line">游戏内都是GameObject</span><br><span class="line">Object 命名空间 <span class="keyword">namespace</span> <span class="title">System</span>&#123;&#125; csharp自带的</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</font>]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua</title>
    <url>/2022/02/11/Unity/Lua/</url>
    <content><![CDATA[<font size="2.9">

<h4 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h4><p>Lua采用了一种类似于寄存器的虚拟机模式。Lua用栈(table和索引)来储存其寄存器。每一个活动的函数，Lua都会其分配一个栈，这个栈用来储存函数里的活动记录。每一个函数的栈都可以储存至多250个寄存器，因为栈的长度是用8个比特表示的</p>
<p>有了这么多的寄存器，Lua的预编译器能把所有的local变量储存在其中。这就使得Lua在获取local变量时其效率十分的高。</p>
<p>使用local</p>
<p>Lua的表分为两个部分：数组array部分和哈希hash部分。数组部分包含所有从1到n的整数键，其他的所有键都储存在哈希部分中</p>
<p>local m = {}<br>local n =m[1]<br><a href="https://wuzhiwei.net/lua_performance/">https://wuzhiwei.net/lua_performance/</a></p>
<h4 id="写一些资料-发现Lua-语法忘记了-这里记录一下"><a href="#写一些资料-发现Lua-语法忘记了-这里记录一下" class="headerlink" title="写一些资料 发现Lua 语法忘记了 这里记录一下"></a>写一些资料 发现Lua 语法忘记了 这里记录一下</h4><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;LUA 闭包 改变临时变量的生命周期 存放起来 没有用&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f9</span><span class="params">(x)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(y)</span></span></span><br><span class="line">        <span class="keyword">return</span> x +y</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">f10 = f9(<span class="number">11</span>)</span><br><span class="line"><span class="built_in">print</span>(f10(<span class="number">9</span>))</span><br></pre></td></tr></table></figure>



<h4 id="Luac-o-新文件-Lua-编译器"><a href="#Luac-o-新文件-Lua-编译器" class="headerlink" title="Luac  -o 新文件  -Lua 编译器"></a>Luac  -o 新文件  -Lua 编译器</h4><p>luac 是 Lua 编译器。它将用 Lua 编程语言编写的程序翻译成二进制文件，以后可以加载和执行。<br>预编译块的主要优点是：加载速度更快、保护源代码免受用户意外更改和离线语法检查。</p>
<p>预编译并不意味着更快的执行，因为在 Lua 中，块在执行之前总是被编译成字节码。 luac 只是允许将这些字节码保存在文件中以供以后执行。</p>
<p>预编译的块不一定小于相应的源。预编译的主要目标是更快的加载。</p>
<p>luac 创建的二进制文件 只能在具有相同字长和字节顺序的体系结构之间移植。</p>
<p>luac 生成一个包含所有给定源文件的字节码的输出文件。默认情况下，输出文件名为 luac.out，但您可以使用 -o 选项进行更改。</p>
<p>在命令行中，您可以混合包含 Lua 源代码的文本文件和包含预编译块的二进制文件。这很有用，因为即使来自不同（但兼容）平台的几个预编译块，也可以组合成一个预编译块。</p>
<p>您可以使用 ‘-‘ 将标准输入指示为源文件，并 使用 ‘– ‘表示 选项结束（也就是说，所有剩余的参数都将被视为文件，即使它们以 ‘-‘开头）。</p>
<p>luac 生成的二进制文件的内部格式 可能会在新版本的 Lua 发布时发生变化。因此，请保存您预编译的所有 Lua 程序的源文件。</p>
<h4 id="写一些资料-发现Lua-语法忘记了-这里记录一下-1"><a href="#写一些资料-发现Lua-语法忘记了-这里记录一下-1" class="headerlink" title="写一些资料 发现Lua 语法忘记了 这里记录一下"></a>写一些资料 发现Lua 语法忘记了 这里记录一下</h4><blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>d59948a31bce012d30294c04b4dceed4018f7c75</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<p>变量</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- test.lua 文件脚本</span></span><br><span class="line">a = <span class="number">5</span>           <span class="comment">-- 全局变量</span></span><br><span class="line"><span class="keyword">local</span> b = <span class="number">5</span>     <span class="comment">-- 局部变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcationName</span><span class="params">()</span></span></span><br><span class="line">    c = <span class="number">5</span>       <span class="comment">-- 局部变量</span></span><br><span class="line">    <span class="keyword">local</span> d = <span class="number">6</span> <span class="comment">-- 局部变量</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a, b, c, d) <span class="comment">-- 打印值为：5 5 nil nil</span></span><br></pre></td></tr></table></figure>
<p>循环和流程控制</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>( <span class="literal">true</span> )</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;循环将永远执行下去&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--实例</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span>(i &lt; <span class="number">5</span>)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>for循环</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> var=exp1,exp2,exp3 <span class="keyword">do</span>  </span><br><span class="line">    &lt;执行体&gt;  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">--实例</span></span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>, <span class="number">10</span>, <span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>范型for循环</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--打印数组 a 的所有值  </span></span><br><span class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(a) </span><br><span class="line">    <span class="keyword">do</span> <span class="built_in">print</span>(v) </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">--实例</span></span><br><span class="line">array = &#123;</span><br><span class="line"><span class="string">&quot;value1&quot;</span>,</span><br><span class="line"><span class="string">&quot;value2&quot;</span>,</span><br><span class="line"><span class="string">&quot;value3&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(array) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i,v)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>if 语句</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式)</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="comment">--[ 在布尔表达式为 true 时执行的语句 --]</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>...<span class="keyword">else</span> 语句：</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(布尔表达式)</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="comment">--[ 布尔表达式为 true 时执行该语句块 --]</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="comment">--[ 布尔表达式为 false 时执行该语句块 --]</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>逻辑运算符<br>and 逻辑与操作符。<br>or 逻辑或操作符。<br>not 逻辑非操作符。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = <span class="literal">true</span></span><br><span class="line">b = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- and</span></span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">and</span> b )</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;a and b - 条件为 true&quot;</span> )</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- or</span></span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">or</span> b )</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;a or b - 条件为 true&quot;</span> )</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- not</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="keyword">not</span>( a <span class="keyword">and</span> b) )</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;not( a and b) - 条件为 true&quot;</span> )</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;not( a and b) - 条件为 false&quot;</span> )</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>其他运算符<br>“..”，连接两个字符串。</p>
<p>“#”，一元运算符，返回字符串或表的长度。</p>
<p>“~”，相当于 C 中的“!”。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">b = <span class="string">&quot;World&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a ~= b  <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;连接字符串 a 和 b &quot;</span>, a..b )</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b 字符串长度 &quot;</span>, #b )</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符串 Test 长度 &quot;</span>, #<span class="string">&quot;Test&quot;</span> )</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Mob 网址长度 &quot;</span>, #<span class="string">&quot;www.mob.com&quot;</span> )</span><br></pre></td></tr></table></figure>

<p>五、table 类型<br>table 是 Lua 的一种数据结构用来帮助我们创建不同的数据类型，如：数组、字典等。<br>Lua table 使用关联型数组，你可以用任意类型的值来作数组的索引，但这个值不能是 nil。<br>Lua table 是不固定大小的，你可以根据自己需要进行扩容。<br>Lua 也是通过 table 来解决模块（module）、包（package）和对象（Object）的。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建一个表</span></span><br><span class="line">mytable = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- table 里面值的设置和获取</span></span><br><span class="line">mytable[<span class="number">1</span>] = <span class="string">&quot;元素1&quot;</span></span><br><span class="line">mytable[<span class="string">&quot;er&quot;</span>] = <span class="string">&quot;元素2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;mytable 索引为 1 的元素&quot;</span>, mytable[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;mytable 索引为 er 的元素&quot;</span>, mytable[<span class="string">&quot;er&quot;</span>])</span><br></pre></td></tr></table></figure>
<p>table 模拟数组</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 数组，lua里面的元素是从 1 开始的</span></span><br><span class="line">array = &#123;</span><br><span class="line">    <span class="string">&quot;value1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;value2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;value3&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 数组里面值得获取</span></span><br><span class="line"><span class="built_in">print</span>(array[<span class="number">1</span>], array[<span class="number">2</span>], array[<span class="number">3</span>])</span><br></pre></td></tr></table></figure>
<p>table模拟字典</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 字典</span></span><br><span class="line">dictionary = &#123;</span><br><span class="line">    key1 = <span class="string">&quot;value1&quot;</span>,</span><br><span class="line">    key2 = <span class="string">&quot;value2&quot;</span>,</span><br><span class="line">    key3 = <span class="string">&quot;value3&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字典里面值得获取</span></span><br><span class="line"><span class="built_in">print</span>(dictionary.key1, dictionary.key2, dictionary.key3)</span><br></pre></td></tr></table></figure>
<p>函数类型<br>函数是对语句和表达式进行抽象的主要方法。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">functionName1 = <span class="function"><span class="keyword">function</span><span class="params">(i)</span></span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionName2</span><span class="params">(i)</span></span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">functionName1(<span class="number">2</span>)</span><br><span class="line">functionName2(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>和 C 语言相比，Lua 中函数的几个不同点：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1、多返回值，多余的返回值会省略，少的补齐 nil</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multreturn</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(multreturn())</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2、可变参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">average</span><span class="params">(...)</span></span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">local</span> <span class="built_in">arg</span> = &#123;...&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(<span class="built_in">arg</span>) <span class="keyword">do</span></span><br><span class="line">        result = result + v</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;总共传入&quot;</span>.. #<span class="built_in">arg</span>..<span class="string">&quot;个数&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> result/#<span class="built_in">arg</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;平均值为&quot;</span>, average(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>))</span><br></pre></td></tr></table></figure>
<p>模块<br>模块就是使用 table 来实现的，看起来会让我们和面向对象语言里面的类有点相似。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">Class = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义一个共有的变量</span></span><br><span class="line">Class.var1 = <span class="string">&quot;初始化 var1 的值&quot;</span></span><br><span class="line"><span class="comment">-- var1 = &quot;初始化 var1 的值&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义一个私有变量</span></span><br><span class="line"><span class="keyword">local</span> var2 = <span class="string">&quot;初始化 var2 的值&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义一个共有函数 func1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class.func1</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这是共有函数 func1&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义私有函数，该函数只能在本模块里面使用</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这是私有函数 func2&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义一个全局函数，可以直接其它模块里面调用，但是不能通过该模块去调用。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func3</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这是全局函数 func3&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Class</span><br></pre></td></tr></table></figure>

<p>它里面整一个就是一个表，在里面可以定义私有、共有变量，私有、共有函数。这些特性都是通过表来限制的，如果不是通过表来限制，那这些函数和变量的作用域都是全局的。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 通过require() 函数导入模块</span></span><br><span class="line"><span class="keyword">local</span> m = <span class="built_in">require</span>(<span class="string">&#x27;Module&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;模块类型为：&quot;</span>, <span class="built_in">type</span>(m))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改模块共有变量</span></span><br><span class="line">m.var1 = <span class="string">&quot;修改一下 var1&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;模块变量值为：&quot;</span>, m.var1)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用模块共有函数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;模块func1函数的调用：&quot;</span>,  m.func1())</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 模块的加载过程</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;func3 函数是不是在这里打印？&quot;</span>, func3())</span><br></pre></td></tr></table></figure>
<p>八、闭包<br>闭包是函数中的函数，可以包含父函数的局部变量的代码块，可以始终让局部变量的值始终保持在内存中。<br>它的最大用处有两个，一个是可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 示例1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func1</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> x = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ee</span><span class="params">()</span></span></span><br><span class="line">        x = x + <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> ee</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> f1 = func1()</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>, <span class="number">5</span> <span class="keyword">do</span></span><br><span class="line">    f1()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 示例2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">        x = x + <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> f2 = func2()</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>, <span class="number">5</span> <span class="keyword">do</span></span><br><span class="line">    f2()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 示例3</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func3</span><span class="params">(a)</span></span></span><br><span class="line">    <span class="keyword">local</span> x = a</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">        x = x + <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> f31 = func3(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>, <span class="number">5</span> <span class="keyword">do</span></span><br><span class="line">    f31()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> f32 = func3(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>, <span class="number">5</span> <span class="keyword">do</span></span><br><span class="line">    f32()</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>九、元表及元方法<br>在 Lua table 中我们可以访问对应的 key 来得到 value 值，但是却无法对两个 table 进行操作。<br>因此 Lua 提供了元表(Metatable)，允许我们改变 table 的行为，每个行为关联了对应的元方法。</p>
<p>有两个很重要的函数来处理元表：</p>
<p>setmetatable(table,metatable): 对指定 table 设置元表(metatable)，如果元表(metatable)中存在 metatable 键值，setmetatable 会失败 。</p>
<p>getmetatable(table): 返回对象的元表(metatable)。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 给指定表设置元表</span></span><br><span class="line">mytable = &#123;&#125;                          <span class="comment">-- 普通表 </span></span><br><span class="line">mymetatable = &#123;&#125;                      <span class="comment">-- 元表</span></span><br><span class="line"><span class="built_in">setmetatable</span>(mytable, mymetatable)     <span class="comment">-- 把 mymetatable 设为 mytable 的元表 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 返回对象元表</span></span><br><span class="line"><span class="built_in">getmetatable</span>(mytable)                 <span class="comment">-- 这回返回mymetatable</span></span><br></pre></td></tr></table></figure>
<p>__index 元方法<br>__index 元方法是 metatable 里面最常见的键。</p>
<p>当你通过键来访问 table 的时候，如果这个键没有值，那么 Lua 就会寻找该 table 的 metatable（假定有 metatable）中的 __index 键。如果 __index 包含一个表格，Lua 会在表格中查找相应的键。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 实例1</span></span><br><span class="line">mytable = &#123;</span><br><span class="line">    key1 = <span class="string">&quot;value1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mymetatable = &#123;</span><br><span class="line">    <span class="built_in">__index</span> = &#123;</span><br><span class="line">        key2 = <span class="string">&quot;metatablevalue&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setmetatable</span>(mytable, mymetatable)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mytable.key1, mytable.key2, mytable.key3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 实例2</span></span><br><span class="line">mytable = &#123;</span><br><span class="line">    key1 = <span class="string">&quot;value1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mymetatable = &#123;</span><br><span class="line">  <span class="built_in">__index</span> = <span class="function"><span class="keyword">function</span><span class="params">(mytable, key)</span></span></span><br><span class="line">    <span class="keyword">if</span> key == <span class="string">&quot;key2&quot;</span> <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;metatablevalue&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setmetatable</span>(mytable, mymetatable)</span><br><span class="line"><span class="built_in">print</span>(mytable.key1, mytable.key2, mytable.key3)</span><br></pre></td></tr></table></figure>

<p>面向对象封装<br>面向对象的特征有封装、继承、多态。Lua 是一门弱类型的语言，多态那肯定是不存在的。<br>通过元表和元方法以及模块来模拟类的封装.</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> User = &#123;&#125;</span><br><span class="line"></span><br><span class="line">User.id = <span class="number">0</span></span><br><span class="line">User.name = <span class="string">&quot;&quot;</span></span><br><span class="line">User.age = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- function User:new()</span></span><br><span class="line"><span class="comment">--  print(&quot;User 被构造了&quot;)</span></span><br><span class="line"><span class="comment">--  mytable = &#123;&#125;</span></span><br><span class="line"><span class="comment">--  setmetatable(mytable, self)</span></span><br><span class="line"><span class="comment">--  self.__index = self</span></span><br><span class="line"><span class="comment">--  return mytable</span></span><br><span class="line"><span class="comment">-- end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User:new</span><span class="params">(id, name, age)</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;new self:&quot;</span>, <span class="built_in">self</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- print(&quot;User 被构造了，&quot;, id, name, age)</span></span><br><span class="line">    mytable = &#123;<span class="string">&quot;haha&quot;</span>&#125;</span><br><span class="line">    <span class="built_in">setmetatable</span>(mytable, <span class="built_in">self</span>)</span><br><span class="line">    <span class="built_in">self</span>.<span class="built_in">__index</span> = <span class="built_in">self</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">self</span>.id = id</span><br><span class="line">    <span class="built_in">self</span>.name = name</span><br><span class="line">    <span class="built_in">self</span>.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mytable</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User:fun</span><span class="params">()</span></span></span><br><span class="line">    <span class="comment">-- print(&quot;fun 成员方法调用了&quot;)</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User:setName</span><span class="params">(name)</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;setName self:&quot;</span>, <span class="built_in">self</span>)</span><br><span class="line">    <span class="built_in">self</span>.name = name</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User:getName</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;getName self:&quot;</span>, <span class="built_in">self</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">self</span>.name</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> User</span><br></pre></td></tr></table></figure>
<p>在LUA中，经常可以看到：. self，如果你学习过Java或C#语言，可以这样理解</p>
<p>.对于c#和java的静态方法<br>:相当于是实例方法</p>
<p><code>冒号只是起了省略第一个参数self的作用，该self指向调用者本身，并没有其他特殊的地方。</code></p>
</font>]]></content>
      <categories>
        <category>Unity,Unreal</category>
      </categories>
      <tags>
        <tag>Lua,Unlua</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity加载AB包</title>
    <url>/2021/02/01/Unity/Unity-AssetBundle/</url>
    <content><![CDATA[<font size="2.9">

<h4 id="AssetBundle"><a href="#AssetBundle" class="headerlink" title="AssetBundle"></a>AssetBundle</h4><blockquote>
<p>加载AB包</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">AssetBundle ab = AssetBundle.LoadFromFile(Application.streamingAssetsPath + <span class="string">&quot;/&quot;</span>+ <span class="string">&quot;model&quot;</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>加载AB包资源 <strong>用泛型 或者 typeof 类型</strong><br><strong>AB包不能重复加载否则报错</strong></p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">GameObject gameobject =  ab.LoadAsset&lt;GameObject&gt;(<span class="string">&quot;cube&quot;</span>);</span><br><span class="line">GameObject gameobject2 = ab.LoadAsset(<span class="string">&quot;cube&quot;</span>,<span class="keyword">typeof</span>(GameObject)) <span class="keyword">as</span> GameObject;</span><br><span class="line">Instantiate(gameobject);</span><br><span class="line"><span class="comment">// false 卸载ab 包但 不卸载资源</span></span><br><span class="line">ab.unpack(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>利用主包获取依赖信息</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">  AssetBundle abMain = AssetBundle.LoadFromFile(Application.streamingAssetsPath + <span class="string">&quot;/&quot;</span>+ <span class="string">&quot;PC&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        AssetBundleManifest asBundleManifest = abMain.LoadAsset&lt;AssetBundleManifest&gt;(<span class="string">&quot;AssetBundleManifest&quot;</span>);</span><br><span class="line"><span class="comment">//加载主包中的固定文件</span></span><br><span class="line"><span class="built_in">string</span>[] strs = asBundleManifest.GetAllDependencies(<span class="string">&quot;model&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; strs.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(strs[i]);</span><br><span class="line">            AssetBundle.LoadFromFile(Application.streamingAssetsPath+<span class="string">&quot;/&quot;</span>+strs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>


<span id="more"></span>

</font>]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>AssetBundle</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity游戏开发记录</title>
    <url>/2021/01/29/Unity/Unity-Game/</url>
    <content><![CDATA[<font size="2.9">

<h4 id="Unity-热更中断"><a href="#Unity-热更中断" class="headerlink" title="Unity 热更中断"></a>Unity 热更中断</h4><blockquote>
<p>热更包10MB，下载到大概2MB中端</p>
</blockquote>
<blockquote>
<p>中断发现无效文件 FileState.Error&gt;0 后面对比文件MD5  不一致文件 可以正常下载</p>
</blockquote>
<blockquote>
<p>下载 逻辑 在version/18.60.0 目录没有放最新的 MAX_VERSION_0.json  和FileVersionList.txt  所以出错，对比旧的资源 发现无效。</p>
</blockquote>
<h4 id="Unitiy-Button点击无响应"><a href="#Unitiy-Button点击无响应" class="headerlink" title="Unitiy Button点击无响应"></a>Unitiy Button点击无响应</h4><blockquote>
<p>有遮罩 比如Image</p>
</blockquote>
<blockquote>
<p>按钮没有实例化</p>
</blockquote>
<blockquote>
<p>lua方法用错</p>
</blockquote>
<span id="more"></span>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">self</span>.mainUI.CloseBtn:GetCompoment(<span class="string">&quot;Button&quot;</span>).onClick:AddListener(<span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;打印&quot;</span>)</span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="ScreenSpace-Camera"><a href="#ScreenSpace-Camera" class="headerlink" title="ScreenSpace-Camera"></a>ScreenSpace-Camera</h4><blockquote>
<p>首先还是Order In Layer，还是一样，数值越大，越在上层</p>
</blockquote>
<blockquote>
<p>UGUI 拖动时候锚点 改变 水平滑动LoopScrollRect 缓存池创建卡顿</p>
</blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>原因 创建Item的时候位置改变误以为卡顿，<br>解决：改变 content 锚点</p>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<p>UGUI 导出相同文件  导致 prefab 相同 图片missing<br>解决：回退之前的版本,相同文件不替换</p>
</blockquote>
<blockquote>
<p>scrollView 里面内容不能滑动，content高度设置的不正确<br> 搭配contentSizeFitter（自动算高）和VerticalLayoutGroup(竖直方向)<br>  controle size 控制子物体大小<br>  force Expand 控制子物体填充父容器空间</p>
</blockquote>
<blockquote>
<p>自适应 可以通有HorizontalLayoutGroup实现</p>
</blockquote>
<blockquote>
<p>通一个活动配置多个，需要通过act_id,config_id来匹配一下</p>
</blockquote>
<h4 id="Unity-Prefab-和-Scene区别"><a href="#Unity-Prefab-和-Scene区别" class="headerlink" title="Unity Prefab 和 Scene区别"></a>Unity Prefab 和 Scene区别</h4><blockquote>
<p>Prefab可以被看做是对scene（场景）中game object（游戏物体）的描述文件，可以被储存在Assets文件夹内，以方便在其他scene中重复利用。Prefab实际上并不包含任何模型、贴图等真正的素材文件，只是一个虚拟的“参考”。</p>
</blockquote>
<blockquote>
<p>我们可以把prefab当做一种特殊的“资源素材”，在场景中引用prefab，相当于按照这个prefab所描述的规范引用其涉及到的“真实素材”。如果我们不小心删除掉了这些“真实素材”，那么prefab就失去了作用。</p>
</blockquote>
<h4 id="Unity-Canvas"><a href="#Unity-Canvas" class="headerlink" title="Unity Canvas"></a>Unity Canvas</h4><blockquote>
<p>Render Mode<br>1.ScreenSpace-overlay<br>  Canvas 覆盖屏幕，且永远覆盖在其它元素的上层，也就是说 UI 会遮挡场景中的其它元素。<br>当 RenderMode 为 Screen Space - Overlay时，Canvas的其它参数包括：<br>Pixel Perfect：UI元素精确到像素对齐，边缘更清晰，但是在UI调整和适配时会有更大的计算量（个人理解）</p>
</blockquote>
<blockquote>
<p>Sort Order：Canvas 的深度。多个 存在多个Canvas时，Sort Order 值更大的Canvas会遮盖住 Sort Order 值小的 Canvas</p>
</blockquote>
<blockquote>
<p>注：多个 Canvas 深度取值相等时，Hierarchy 视图中后面的 Canvas 显示在下，这一点与 UI 元素（如Image的规则相反）</p>
</blockquote>
<blockquote>
<p>2.Screen Space - Camera 模式</p>
</blockquote>
<p>   和 Overlay 模式相仿，Canvas覆盖整个屏幕空间画布也是填满整个屏幕空间。不同之处在于，Canvas 被放置于指定摄像机的前方。 </p>
<pre><code>  (1) 必须在摄像机的远近平面之间才会被渲染

  (2) 即使摄像机是 Perspective 模式，Canvas 距离摄像机的远近依然不会影响其显示大小

  (3) 其它3元素可以和 Canvas 产生遮挡关系，距离摄像机更近的元素会遮盖住 Canvas 上面的 UI

  (4) 摄像机的缩放/平移/旋转，以及 fov 的变化，不会影响 Canvas 显示结果，Canvas 永远是放置在距离摄像机视口一定距离的地方，且与摄像机水平视线垂直
</code></pre>
<p>Pixel Perfect ：同 Overlay 模式含义</p>
<p>Render Camera ：指定的用来渲染 Canvas 的摄像机</p>
<p>Plane Distance：Canvas 平面距离摄像机的距离</p>
<p>Sorting Layer：指示 Canvas 的深度，可以手动添加。当存在多个模式为 Screen Space 的 Canvas 时，Sorting Layer 决定了显示的优先级。</p>
<p>Order in Layer：多个 Canvas 具有相同的 Sorting Layer 时，根据 Order in Layer 来确定显示优先级</p>
<blockquote>
<p>3.World Space 模式</p>
</blockquote>
<p>  此种模式下，Canvas 与场景中其它3D元素没有区别</p>
<blockquote>
<p>4.总结<br> 不同模式的 Canvas之间，Screen Space - Overlay 的 Canvas 永远显示在最前面，Screen Space - Camera 和 World 的显示关系决定于 World Canvas 距离摄像机的位置以及 Screen Space - Camera Canvas 的 Plane Distance</p>
</blockquote>
<p>相同的 Screen Space - Overlay Canvas ：显示优先级由 Sort Order 确定</p>
<p>相同的 Screen Space - Camera：显示优先级由 Sorting Layer 和 Order in Layer 确定</p>
<h4 id="Rx-via-UniRx"><a href="#Rx-via-UniRx" class="headerlink" title="Rx via UniRx"></a>Rx via UniRx</h4><p>   <a href="%22https://zhuanlan.zhihu.com/p/35189325%22">Rx via UniRx</a></p>
<h4 id="Unity-实用技巧"><a href="#Unity-实用技巧" class="headerlink" title="Unity 实用技巧"></a>Unity 实用技巧</h4><blockquote>
<ol>
<li>Pixel Perfect Camera</li>
</ol>
</blockquote>
<blockquote>
<p>在摄像机上挂载Pixel Perfect Camera组件能够使2D像素风格的游戏画面更加整洁清晰。此组件需要使用Package Manager安装2D Pixel Perfect包。</p>
</blockquote>
<blockquote>
<ol start="2">
<li>以Y轴为依据进行Sprite排序</li>
</ol>
</blockquote>
<blockquote>
<p>对于2D游戏，将Transparency Sort Mode (Edit &gt; Project Settings &gt; Graphics ) 设置为Custom Axis，然后设置Transparency Sort Axis，场景中的Sprite可以根据Y轴进行排序。如下图所示，当设置为（0,1,0）时，Y坐标相对较大的Sprite排在Y坐标相对较小的Sprite之下，当设置为(0,-1,0)时，则相反。</p>
</blockquote>
<blockquote>
<ol start="3">
<li>延迟销毁游戏对象</li>
</ol>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Destroy(gameObject,<span class="number">2f</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<ol start="4">
<li>快速新建基于自定义Shader的材质</li>
</ol>
</blockquote>
<p>在Project面板中选中一个自定义Shader，右键选择新建材质（Create&gt;Material），则材质默认使用的着色器为z之前选择的Shader，同时材质名称为Shader的名称。</p>
<!-- 
https://www.cnblogs.com/unity3ds/p/11047784.html
-->
<blockquote>
<ol start="5">
<li>脚本不挂载到游戏对象执行</li>
</ol>
</blockquote>
<p>通常情况下，新建的脚本要挂载到游戏对象上才能运行，如果在脚本中的方法前使用[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]，可以不用挂载到任何游戏对象上即可在程序运行时执行此方法，方便在在程序初始化前做一些额外的初始化工作。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line">  [<span class="meta">RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DoSomething</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(<span class="string">&quot;It&#x27;s the start of the game&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ol start="7">
<li>保存程序运行时组件属性的改变</li>
</ol>
</blockquote>
<p>在程序运行时改变组件的各属性值，当停止运行后，这些改变将重置为编辑状态下的数值，。程序运行时改变了组件的属性值，可以点击组件右上角的齿轮按钮，选择Copy Component命令，停止播放后，在相同的组件上，执行Paste Component Value，从而能够保存在运行时对该组件做出的改变。</p>
<ol start="8">
<li>获取一个随机布尔值</li>
</ol>
<p>我们知道Random.value能够返回0~1之间的随机数，所以让此随机数与0.5f进行比较，就能够获取一个随机的布尔值True或者False，如下代码所示：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bool</span> trueOrFalse = (Random.<span class="keyword">value</span> &gt; <span class="number">0.5f</span>);</span><br></pre></td></tr></table></figure>
<ol start="9">
<li>使用Struct代替Class<br>如果数据结构仅保存了有限的几个数值变量，可以考虑使用struct代替Class，因为Class实例由垃圾回收机制来保证内存的回收处理;而struct变量使用完后立即自动解除内存分配。</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> :<span class="title">MonoBehavor</span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">struct</span> Data&#123;</span><br><span class="line">     <span class="keyword">public</span>  <span class="built_in">int</span> age;</span><br><span class="line">     <span class="keyword">public</span>  <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">start</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      Data da = <span class="keyword">new</span> Data()&#123;</span><br><span class="line">         age = <span class="number">23</span>,name=<span class="string">&quot;cai&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      print(da.age);</span><br><span class="line">      print(da.name);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="10">
<li>Visual Studio 自动语句补全</li>
</ol>
<p>当使用Visual Studio进行代码编写时，可双击Tab键来辅助完成像if、for、switch等语句的补全。</p>
<blockquote>
<ol start="11">
<li>协程嵌套</li>
</ol>
</blockquote>
<p>在一个协程里开启另外一个协程，可使用以下方法</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    StartCoroutine(FirstCo());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">IEnumerator <span class="title">FirstCo</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="title">StartCoroutine</span>(<span class="params">SecondCo(</span>))</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">IEnumerator <span class="title">SecondCo</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>12.脚本变量参与动画制作</p>
<img src="/2021/01/29/Unity/Unity-Game/12.png" class="">

<p>13/14. Animation窗口快捷键</p>
<p>在Animation窗口中，按下Ctrl+A，所有关键帧将集中显示在窗口中；选择某些关键帧，按下F键，可将它们居中显示在窗口中；按下C键，可以在曲线视图和关键帧视图间切换；按下K键添加关键帧。</p>
<p>18.在Inspector面板中显示私有变量<br>将私有变量标记为SerializeField，可在Inspector面板中将其显示。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">SerializeField</span>]</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> myNumber = <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<ol start="19">
<li>在Inspector面板中隐藏公有变量<br>如果不希望在Inspector面板中显示公有变量，可将其标记为[HideInInspector]。<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">HideInInspector</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> myNumber = <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>37.MenuItem属性<br>要在编辑器的菜单栏中选择执行编写的函数，可在函数前添加MenuItem属性，如下代码所示：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">MenuItem(<span class="meta-string">&quot;MyMenu/Do Something&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DoSomething</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>38.ContextMenu<br>使用ContextMenu属性标记函数，能够在脚本所在的上下文菜单中调用，如下代码所示：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">ContextMenu(<span class="meta-string">&quot;Do Something&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DoSomething</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/01/29/Unity/Unity-Game/38.png" class="">
<h4 id="Unity-程序框架"><a href="#Unity-程序框架" class="headerlink" title="Unity 程序框架"></a>Unity 程序框架</h4><blockquote>
<p>事件中心</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Events;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IEventInfo</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventInfo</span>&lt;<span class="title">T</span>&gt; : <span class="title">IEventInfo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> UnityAction&lt;T&gt; actions;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EventInfo</span>(<span class="params"> UnityAction&lt;T&gt; action</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        actions += action;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventInfo</span> : <span class="title">IEventInfo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> UnityAction actions;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EventInfo</span>(<span class="params">UnityAction action</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        actions += action;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 事件中心 单例模式对象</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 1.Dictionary</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 2.委托</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 3.观察者设计模式</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 4.泛型</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventCenter</span> : <span class="title">BaseManager</span>&lt;<span class="title">EventCenter</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//key —— 事件的名字（比如：怪物死亡，玩家死亡，通关 等等）</span></span><br><span class="line">    <span class="comment">//value —— 对应的是 监听这个事件 对应的委托函数们</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Dictionary</span>&lt;<span class="title">string</span>, <span class="title">IEventInfo</span>&gt; eventDic</span> = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, IEventInfo&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 添加事件监听</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span>事件的名字<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;action&quot;&gt;</span>准备用来处理事件 的委托函数<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddEventListener</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> name, UnityAction&lt;T&gt; action</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//有没有对应的事件监听</span></span><br><span class="line">        <span class="comment">//有的情况</span></span><br><span class="line">        <span class="keyword">if</span>( eventDic.ContainsKey(name) )</span><br><span class="line">        &#123;</span><br><span class="line">            (eventDic[name] <span class="keyword">as</span> EventInfo&lt;T&gt;).actions += action;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有的情况</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            eventDic.Add(name, <span class="keyword">new</span> EventInfo&lt;T&gt;( action ));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 监听不需要参数传递的事件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;action&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddEventListener</span>(<span class="params"><span class="built_in">string</span> name, UnityAction action</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//有没有对应的事件监听</span></span><br><span class="line">        <span class="comment">//有的情况</span></span><br><span class="line">        <span class="keyword">if</span> (eventDic.ContainsKey(name))</span><br><span class="line">        &#123;</span><br><span class="line">            (eventDic[name] <span class="keyword">as</span> EventInfo).actions += action;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有的情况</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            eventDic.Add(name, <span class="keyword">new</span> EventInfo(action));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 移除对应的事件监听</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span>事件的名字<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;action&quot;&gt;</span>对应之前添加的委托函数<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RemoveEventListener</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> name, UnityAction&lt;T&gt; action</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (eventDic.ContainsKey(name))</span><br><span class="line">            (eventDic[name] <span class="keyword">as</span> EventInfo&lt;T&gt;).actions -= action;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 移除不需要参数的事件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;action&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RemoveEventListener</span>(<span class="params"><span class="built_in">string</span> name, UnityAction action</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (eventDic.ContainsKey(name))</span><br><span class="line">            (eventDic[name] <span class="keyword">as</span> EventInfo).actions -= action;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 事件触发</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span>哪一个名字的事件触发了<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">EventTrigger</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> name, T info</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//有没有对应的事件监听</span></span><br><span class="line">        <span class="comment">//有的情况</span></span><br><span class="line">        <span class="keyword">if</span> (eventDic.ContainsKey(name))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//eventDic[name]();</span></span><br><span class="line">            <span class="keyword">if</span>((eventDic[name] <span class="keyword">as</span> EventInfo&lt;T&gt;).actions != <span class="literal">null</span>)</span><br><span class="line">                (eventDic[name] <span class="keyword">as</span> EventInfo&lt;T&gt;).actions.Invoke(info);</span><br><span class="line">            <span class="comment">//eventDic[name].Invoke(info);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 事件触发（不需要参数的）</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">EventTrigger</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//有没有对应的事件监听</span></span><br><span class="line">        <span class="comment">//有的情况</span></span><br><span class="line">        <span class="keyword">if</span> (eventDic.ContainsKey(name))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//eventDic[name]();</span></span><br><span class="line">            <span class="keyword">if</span> ((eventDic[name] <span class="keyword">as</span> EventInfo).actions != <span class="literal">null</span>)</span><br><span class="line">                (eventDic[name] <span class="keyword">as</span> EventInfo).actions.Invoke();</span><br><span class="line">            <span class="comment">//eventDic[name].Invoke(info);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 清空事件中心</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 主要用在 场景切换时</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Clear</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        eventDic.Clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>资源管理器 </p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Events;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 资源加载模块</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 1.异步加载</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 2.委托和 lambda表达式</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 3.协程</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 4.泛型</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ResMgr</span> : <span class="title">BaseManager</span>&lt;<span class="title">ResMgr</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//同步加载资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">Load</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> name</span>) <span class="keyword">where</span> T:Object</span></span><br><span class="line">    &#123;</span><br><span class="line">        T res = Resources.Load&lt;T&gt;(name);</span><br><span class="line">        <span class="comment">//如果对象是一个GameObject类型的 我把他实例化后 再返回出去 外部 直接使用即可</span></span><br><span class="line">        <span class="keyword">if</span> (res <span class="keyword">is</span> GameObject)</span><br><span class="line">            <span class="keyword">return</span> GameObject.Instantiate(res);</span><br><span class="line">        <span class="keyword">else</span><span class="comment">//TextAsset AudioClip</span></span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//异步加载资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LoadAsync</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> name, UnityAction&lt;T&gt; callback</span>) <span class="keyword">where</span> T:Object</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//开启异步加载的协程</span></span><br><span class="line">        MonoMgr.GetInstance().StartCoroutine(ReallyLoadAsync(name, callback));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//真正的协同程序函数  用于 开启异步加载对应的资源</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> IEnumerator <span class="title">ReallyLoadAsync</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> name, UnityAction&lt;T&gt; callback</span>) <span class="keyword">where</span> T : Object</span></span><br><span class="line">    &#123;</span><br><span class="line">        ResourceRequest r = Resources.LoadAsync&lt;T&gt;(name);</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> r;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (r.asset <span class="keyword">is</span> GameObject)</span><br><span class="line">            callback(GameObject.Instantiate(r.asset) <span class="keyword">as</span> T);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            callback(r.asset <span class="keyword">as</span> T);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>场景管理器 </p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Events;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.SceneManagement;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 场景切换模块</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 知识点</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 1.场景异步加载</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 2.协程</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 3.委托</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ScenesMgr</span> : <span class="title">BaseManager</span>&lt;<span class="title">ScenesMgr</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 切换场景 同步</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LoadScene</span>(<span class="params"><span class="built_in">string</span> name, UnityAction fun</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//场景同步加载</span></span><br><span class="line">        SceneManager.LoadScene(name);</span><br><span class="line">        <span class="comment">//加载完成过后 才会去执行fun</span></span><br><span class="line">        fun();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 提供给外部的 异步加载的接口方法</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;fun&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LoadSceneAsyn</span>(<span class="params"><span class="built_in">string</span> name, UnityAction fun</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MonoMgr.GetInstance().StartCoroutine(ReallyLoadSceneAsyn(name, fun));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 协程异步加载场景</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;fun&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> IEnumerator <span class="title">ReallyLoadSceneAsyn</span>(<span class="params"><span class="built_in">string</span> name, UnityAction fun</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        AsyncOperation ao = SceneManager.LoadSceneAsync(name);</span><br><span class="line">        <span class="comment">//可以得到场景加载的一个进度</span></span><br><span class="line">        <span class="keyword">while</span>(!ao.isDone)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//事件中心 向外分发 进度情况  外面想用就用</span></span><br><span class="line">            EventCenter.GetInstance().EventTrigger(<span class="string">&quot;进度条更新&quot;</span>, ao.progress);</span><br><span class="line">            <span class="comment">//这里面去更新进度条</span></span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> ao.progress;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//加载完成过后 才会去执行fun</span></span><br><span class="line">        fun();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>UI管理器（加载资源）</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Events;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.EventSystems;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> UI层级</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> E_UI_Layer</span><br><span class="line">&#123;</span><br><span class="line">    Bot,</span><br><span class="line">    Mid,</span><br><span class="line">    Top,</span><br><span class="line">    System,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> UI管理器</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 1.管理所有显示的面板</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 2.提供给外部 显示和隐藏等等接口</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UIManager</span> : <span class="title">BaseManager</span>&lt;<span class="title">UIManager</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dictionary</span>&lt;<span class="title">string</span>, <span class="title">BasePanel</span>&gt; panelDic</span> = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, BasePanel&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Transform bot;</span><br><span class="line">    <span class="keyword">private</span> Transform mid;</span><br><span class="line">    <span class="keyword">private</span> Transform top;</span><br><span class="line">    <span class="keyword">private</span> Transform system;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录我们UI的Canvas父对象 方便以后外部可能会使用它</span></span><br><span class="line">    <span class="keyword">public</span> RectTransform canvas;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UIManager</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//创建Canvas 让其过场景的时候 不被移除</span></span><br><span class="line">        GameObject obj = ResMgr.GetInstance().Load&lt;GameObject&gt;(<span class="string">&quot;UI/Canvas&quot;</span>);</span><br><span class="line">        canvas = obj.transform <span class="keyword">as</span> RectTransform;</span><br><span class="line">        GameObject.DontDestroyOnLoad(obj);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找到各层</span></span><br><span class="line">        bot = canvas.Find(<span class="string">&quot;Bot&quot;</span>);</span><br><span class="line">        mid = canvas.Find(<span class="string">&quot;Mid&quot;</span>);</span><br><span class="line">        top = canvas.Find(<span class="string">&quot;Top&quot;</span>);</span><br><span class="line">        system = canvas.Find(<span class="string">&quot;System&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建EventSystem 让其过场景的时候 不被移除</span></span><br><span class="line">        obj = ResMgr.GetInstance().Load&lt;GameObject&gt;(<span class="string">&quot;UI/EventSystem&quot;</span>);</span><br><span class="line">        GameObject.DontDestroyOnLoad(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 通过层级枚举 得到对应层级的父对象</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;layer&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Transform <span class="title">GetLayerFather</span>(<span class="params">E_UI_Layer layer</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span>(layer)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> E_UI_Layer.Bot:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.bot;</span><br><span class="line">            <span class="keyword">case</span> E_UI_Layer.Mid:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.mid;</span><br><span class="line">            <span class="keyword">case</span> E_UI_Layer.Top:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.top;</span><br><span class="line">            <span class="keyword">case</span> E_UI_Layer.System:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.system;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 显示面板</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>面板脚本类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;panelName&quot;&gt;</span>面板名<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;layer&quot;&gt;</span>显示在哪一层<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;callBack&quot;&gt;</span>当面板预设体创建成功后 你想做的事<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowPanel</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> panelName, E_UI_Layer layer = E_UI_Layer.Mid, UnityAction&lt;T&gt; callBack = <span class="literal">null</span></span>) <span class="keyword">where</span> T:BasePanel</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (panelDic.ContainsKey(panelName))</span><br><span class="line">        &#123;</span><br><span class="line">            panelDic[panelName].ShowMe();</span><br><span class="line">            <span class="comment">// 处理面板创建完成后的逻辑</span></span><br><span class="line">            <span class="keyword">if</span> (callBack != <span class="literal">null</span>)</span><br><span class="line">                callBack(panelDic[panelName] <span class="keyword">as</span> T);</span><br><span class="line">            <span class="comment">//避免面板重复加载 如果存在该面板 即直接显示 调用回调函数后  直接return 不再处理后面的异步加载逻辑</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ResMgr.GetInstance().LoadAsync&lt;GameObject&gt;(<span class="string">&quot;UI/&quot;</span> + panelName, (obj) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//把他作为 Canvas的子对象</span></span><br><span class="line">            <span class="comment">//并且 要设置它的相对位置</span></span><br><span class="line">            <span class="comment">//找到父对象 你到底显示在哪一层</span></span><br><span class="line">            Transform father = bot;</span><br><span class="line">            <span class="keyword">switch</span>(layer)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> E_UI_Layer.Mid:</span><br><span class="line">                    father = mid;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> E_UI_Layer.Top:</span><br><span class="line">                    father = top;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> E_UI_Layer.System:</span><br><span class="line">                    father = system;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//设置父对象  设置相对位置和大小</span></span><br><span class="line">            obj.transform.SetParent(father);</span><br><span class="line"></span><br><span class="line">            obj.transform.localPosition = Vector3.zero;</span><br><span class="line">            obj.transform.localScale = Vector3.one;</span><br><span class="line"></span><br><span class="line">            (obj.transform <span class="keyword">as</span> RectTransform).offsetMax = Vector2.zero;</span><br><span class="line">            (obj.transform <span class="keyword">as</span> RectTransform).offsetMin = Vector2.zero;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//得到预设体身上的面板脚本</span></span><br><span class="line">            T panel = obj.GetComponent&lt;T&gt;();</span><br><span class="line">            <span class="comment">// 处理面板创建完成后的逻辑</span></span><br><span class="line">            <span class="keyword">if</span> (callBack != <span class="literal">null</span>)</span><br><span class="line">                callBack(panel);</span><br><span class="line"></span><br><span class="line">            panel.ShowMe();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//把面板存起来</span></span><br><span class="line">            panelDic.Add(panelName, panel);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 隐藏面板</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;panelName&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HidePanel</span>(<span class="params"><span class="built_in">string</span> panelName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(panelDic.ContainsKey(panelName))</span><br><span class="line">        &#123;</span><br><span class="line">            panelDic[panelName].HideMe();</span><br><span class="line">            GameObject.Destroy(panelDic[panelName].gameObject);</span><br><span class="line">            panelDic.Remove(panelName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 得到某一个已经显示的面板 方便外部使用</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">GetPanel</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> name</span>) <span class="keyword">where</span> T:BasePanel</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (panelDic.ContainsKey(name))</span><br><span class="line">            <span class="keyword">return</span> panelDic[name] <span class="keyword">as</span> T;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 给控件添加自定义事件监听</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;control&quot;&gt;</span>控件对象<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;type&quot;&gt;</span>事件类型<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;callBack&quot;&gt;</span>事件的响应函数<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AddCustomEventListener</span>(<span class="params">UIBehaviour control, EventTriggerType type, UnityAction&lt;BaseEventData&gt; callBack</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        EventTrigger trigger = control.GetComponent&lt;EventTrigger&gt;();</span><br><span class="line">        <span class="keyword">if</span> (trigger == <span class="literal">null</span>)</span><br><span class="line">            trigger = control.gameObject.AddComponent&lt;EventTrigger&gt;();</span><br><span class="line"></span><br><span class="line">        EventTrigger.Entry entry = <span class="keyword">new</span> EventTrigger.Entry();</span><br><span class="line">        entry.eventID = type;</span><br><span class="line">        entry.callback.AddListener(callBack);</span><br><span class="line"></span><br><span class="line">        trigger.triggers.Add(entry);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Mono</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Events;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 1.可以提供给外部添加帧更新事件的方法</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 2.可以提供给外部添加 协程的方法</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MonoMgr</span> : <span class="title">BaseManager</span>&lt;<span class="title">MonoMgr</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> MonoController controller;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MonoMgr</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//保证了MonoController对象的唯一性</span></span><br><span class="line">        GameObject obj = <span class="keyword">new</span> GameObject(<span class="string">&quot;MonoController&quot;</span>);</span><br><span class="line">        controller = obj.AddComponent&lt;MonoController&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 给外部提供的 添加帧更新事件的函数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;fun&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddUpdateListener</span>(<span class="params">UnityAction fun</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        controller.AddUpdateListener(fun);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 提供给外部 用于移除帧更新事件函数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;fun&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RemoveUpdateListener</span>(<span class="params">UnityAction fun</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        controller.RemoveUpdateListener(fun);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coroutine <span class="title">StartCoroutine</span>(<span class="params">IEnumerator routine</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> controller.StartCoroutine(routine);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coroutine <span class="title">StartCoroutine</span>(<span class="params"><span class="built_in">string</span> methodName, [DefaultValue(<span class="string">&quot;null&quot;</span></span>)] <span class="built_in">object</span> <span class="keyword">value</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> controller.StartCoroutine(methodName, <span class="keyword">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coroutine <span class="title">StartCoroutine</span>(<span class="params"><span class="built_in">string</span> methodName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> controller.StartCoroutine(methodName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>音乐管理器</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Events;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MusicMgr</span> : <span class="title">BaseManager</span>&lt;<span class="title">MusicMgr</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//唯一的背景音乐组件</span></span><br><span class="line">    <span class="keyword">private</span> AudioSource bkMusic = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//音乐大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> bkValue = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//音效依附对象</span></span><br><span class="line">    <span class="keyword">private</span> GameObject soundObj = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//音效列表</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">List</span>&lt;<span class="title">AudioSource</span>&gt; soundList</span> = <span class="keyword">new</span> List&lt;AudioSource&gt;();</span><br><span class="line">    <span class="comment">//音效大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> soundValue = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MusicMgr</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MonoMgr.GetInstance().AddUpdateListener(Update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>( <span class="built_in">int</span> i = soundList.Count - <span class="number">1</span>; i &gt;=<span class="number">0</span>; --i )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!soundList[i].isPlaying)</span><br><span class="line">            &#123;</span><br><span class="line">                GameObject.Destroy(soundList[i]);</span><br><span class="line">                soundList.RemoveAt(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 播放背景音乐</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PlayBkMusic</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(bkMusic == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            GameObject obj = <span class="keyword">new</span> GameObject();</span><br><span class="line">            obj.name = <span class="string">&quot;BkMusic&quot;</span>;</span><br><span class="line">            bkMusic = obj.AddComponent&lt;AudioSource&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//异步加载背景音乐 加载完成后 播放</span></span><br><span class="line">        ResMgr.GetInstance().LoadAsync&lt;AudioClip&gt;(<span class="string">&quot;Music/BK/&quot;</span> + name, (clip) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            bkMusic.clip = clip;</span><br><span class="line">            bkMusic.loop = <span class="literal">true</span>;</span><br><span class="line">            bkMusic.volume = bkValue;</span><br><span class="line">            bkMusic.Play();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 暂停背景音乐</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PauseBKMusic</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (bkMusic == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        bkMusic.Pause();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 停止背景音乐</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StopBKMusic</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (bkMusic == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        bkMusic.Stop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 改变背景音乐 音量大小</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;v&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChangeBKValue</span>(<span class="params"><span class="built_in">float</span> v</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        bkValue = v;</span><br><span class="line">        <span class="keyword">if</span> (bkMusic == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        bkMusic.volume = bkValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 播放音效</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PlaySound</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">bool</span> isLoop, UnityAction&lt;AudioSource&gt; callBack = <span class="literal">null</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(soundObj == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            soundObj = <span class="keyword">new</span> GameObject();</span><br><span class="line">            soundObj.name = <span class="string">&quot;Sound&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当音效资源异步加载结束后 再添加一个音效</span></span><br><span class="line">        ResMgr.GetInstance().LoadAsync&lt;AudioClip&gt;(<span class="string">&quot;Music/Sound/&quot;</span> + name, (clip) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            AudioSource source = soundObj.AddComponent&lt;AudioSource&gt;();</span><br><span class="line">            source.clip = clip;</span><br><span class="line">            source.loop = isLoop;</span><br><span class="line">            source.volume = soundValue;</span><br><span class="line">            source.Play();</span><br><span class="line">            soundList.Add(source);</span><br><span class="line">            <span class="keyword">if</span>(callBack != <span class="literal">null</span>)</span><br><span class="line">                callBack(source);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 改变音效声音大小</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChangeSoundValue</span>(<span class="params"> <span class="built_in">float</span> <span class="keyword">value</span> </span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        soundValue = <span class="keyword">value</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; soundList.Count; ++i)</span><br><span class="line">            soundList[i].volume = <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 停止音效</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StopSound</span>(<span class="params">AudioSource source</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( soundList.Contains(source) )</span><br><span class="line">        &#123;</span><br><span class="line">            soundList.Remove(source);</span><br><span class="line">            source.Stop();</span><br><span class="line">            GameObject.Destroy(source);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Base</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SingletonAutoMono</span>&lt;<span class="title">T</span>&gt; : <span class="title">MonoBehaviour</span> <span class="keyword">where</span> <span class="title">T</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> T instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">GetInstance</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( instance == <span class="literal">null</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            GameObject obj = <span class="keyword">new</span> GameObject();</span><br><span class="line">            <span class="comment">//设置对象的名字为脚本名</span></span><br><span class="line">            obj.name = <span class="keyword">typeof</span>(T).ToString();</span><br><span class="line">            <span class="comment">//让这个单例模式对象 过场景 不移除</span></span><br><span class="line">            <span class="comment">//因为 单例模式对象 往往 是存在整个程序生命周期中的</span></span><br><span class="line">            DontDestroyOnLoad(obj);</span><br><span class="line">            instance = obj.AddComponent&lt;T&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>缓冲池</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Events;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 抽屉数据  池子中的一列容器</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PoolData</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//抽屉中 对象挂载的父节点</span></span><br><span class="line">    <span class="keyword">public</span> GameObject fatherObj;</span><br><span class="line">    <span class="comment">//对象的容器</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;GameObject&gt; poolList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PoolData</span>(<span class="params">GameObject obj, GameObject poolObj</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//给我们的抽屉 创建一个父对象 并且把他作为我们pool(衣柜)对象的子物体</span></span><br><span class="line">        fatherObj = <span class="keyword">new</span> GameObject(obj.name);</span><br><span class="line">        fatherObj.transform.parent = poolObj.transform;</span><br><span class="line">        poolList = <span class="keyword">new</span> List&lt;GameObject&gt;() &#123;&#125;;</span><br><span class="line">        PushObj(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 往抽屉里面 压都东西</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;obj&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PushObj</span>(<span class="params">GameObject obj</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//失活 让其隐藏</span></span><br><span class="line">        obj.SetActive(<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//存起来</span></span><br><span class="line">        poolList.Add(obj);</span><br><span class="line">        <span class="comment">//设置父对象</span></span><br><span class="line">        obj.transform.parent = fatherObj.transform;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 从抽屉里面 取东西</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GameObject <span class="title">GetObj</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        GameObject obj = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//取出第一个</span></span><br><span class="line">        obj = poolList[<span class="number">0</span>];</span><br><span class="line">        poolList.RemoveAt(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//激活 让其显示</span></span><br><span class="line">        obj.SetActive(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//断开了父子关系</span></span><br><span class="line">        obj.transform.parent = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 缓存池模块</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 1.Dictionary List</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 2.GameObject 和 Resources 两个公共类中的 API </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PoolMgr</span> : <span class="title">BaseManager</span>&lt;<span class="title">PoolMgr</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//缓存池容器 （衣柜）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dictionary</span>&lt;<span class="title">string</span>, <span class="title">PoolData</span>&gt; poolDic</span> = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, PoolData&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> GameObject poolObj;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 往外拿东西</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObj</span>(<span class="params"><span class="built_in">string</span> name, UnityAction&lt;GameObject&gt; callBack</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//有抽屉 并且抽屉里有东西</span></span><br><span class="line">        <span class="keyword">if</span> (poolDic.ContainsKey(name) &amp;&amp; poolDic[name].poolList.Count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            callBack(poolDic[name].GetObj());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//通过异步加载资源 创建对象给外部用</span></span><br><span class="line">            ResMgr.GetInstance().LoadAsync&lt;GameObject&gt;(name, (o) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                o.name = name;</span><br><span class="line">                callBack(o);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//obj = GameObject.Instantiate(Resources.Load&lt;GameObject&gt;(name));</span></span><br><span class="line">            <span class="comment">//把对象名字改的和池子名字一样</span></span><br><span class="line">            <span class="comment">//obj.name = name;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 换暂时不用的东西给我</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PushObj</span>(<span class="params"><span class="built_in">string</span> name, GameObject obj</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (poolObj == <span class="literal">null</span>)</span><br><span class="line">            poolObj = <span class="keyword">new</span> GameObject(<span class="string">&quot;Pool&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//里面有抽屉</span></span><br><span class="line">        <span class="keyword">if</span> (poolDic.ContainsKey(name))</span><br><span class="line">        &#123;</span><br><span class="line">            poolDic[name].PushObj(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//里面没有抽屉</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            poolDic.Add(name, <span class="keyword">new</span> PoolData(obj, poolObj));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 清空缓存池的方法 </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 主要用在 场景切换时</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Clear</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        poolDic.Clear();</span><br><span class="line">        poolObj = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</font>]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>UnityDevelopLog</tag>
      </tags>
  </entry>
  <entry>
    <title>UnityBase</title>
    <url>/2021/10/14/Unity/UnityBase/</url>
    <content><![CDATA[<font size="2.9">

<h4 id="1-Unity基础-ref-和-out"><a href="#1-Unity基础-ref-和-out" class="headerlink" title="1.Unity基础  ref 和 out"></a>1.Unity基础  ref 和 out</h4><p>影响外部传入，让其被修改</p>
<p>ref: 变量先初始化</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ChagneValueRef</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">int</span> a</span>)</span>&#123;</span><br><span class="line">  a = <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> b = <span class="number">99</span>;</span><br><span class="line">ChagneValueRef(<span class="keyword">ref</span> b);</span><br><span class="line">Debug.Log(b);<span class="comment">//b = 9</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>out: 方法里初始化</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ChagneValueOut</span>(<span class="params"><span class="keyword">out</span> <span class="built_in">int</span> <span class="keyword">value</span></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">value</span> = <span class="number">88</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> cc ;</span><br><span class="line">ChangeValueOut(<span class="keyword">out</span> cc);</span><br><span class="line">Debug.Log(cc);<span class="comment">//b = 88</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-冒泡排序优化"><a href="#2-冒泡排序优化" class="headerlink" title="2.冒泡排序优化"></a>2.冒泡排序优化</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>[] arrs = &#123;<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="built_in">bool</span> isShot = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> m =<span class="number">0</span>;m &lt; arrs.Length;m++)&#123;</span><br><span class="line">    isShot = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> n =<span class="number">0</span>;n&lt;arrs.Length<span class="number">-1</span>-m;n++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arrs[n]&gt; arrs[n+<span class="number">1</span>])&#123;</span><br><span class="line">            isShot = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> temp =  arrs[n];</span><br><span class="line">            arrs[n] = arrs[n+<span class="number">1</span>];</span><br><span class="line">            arrs[n+<span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//正常情况 每次都交换，如果达到 没有进入交换 就不需要了</span></span><br><span class="line">    <span class="keyword">if</span>(!isShot)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</font>]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>UnityBase</tag>
      </tags>
  </entry>
  <entry>
    <title>UnityPluginForMac</title>
    <url>/2019/06/09/Unity/UnityPluginForMac/</url>
    <content><![CDATA[<font size="2.9">

<p>因为需要做Window和 Mac 插件，且iOS和Android 用 UnitySendMessage，所以为了统一 pc端也用次回调。这里做下记录方便改进。</p>
<p>如果你是OSX系统，那么Unity可以在编辑器里面直接使用OSX插件。OSX插件是bundle文件，放在Assets/Plugins目录下。</p>
<p>跟iOS插件差不多，不过OSX没有UnitySendMessage函数，所以要用另外一种途经来实现OC -&gt; C#</p>
<p>方法就是用C语言的函数指针。</p>
<p>首先在头文件声明一个函数指针和声明两个函数</p>
<span id="more"></span>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数指针</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*UnitySendMessage)</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* objectName, <span class="keyword">const</span> <span class="keyword">char</span>* methodName, <span class="keyword">const</span> <span class="keyword">char</span>* msg)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !TARGET_OS_IPHONE</span></span><br><span class="line">    <span class="comment">//C#调用的，参数是一个回调函数。</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RegisterCallback</span><span class="params">(UnitySendMessage callbackMethod)</span></span>;</span><br><span class="line">    <span class="comment">//调用回调函数的函数。</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">CallbackToUnity</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* msg)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着在mm文件里面实现</p>
<figure class="highlight mm"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !TARGET_OS_IPHONE</span></span><br><span class="line"><span class="keyword">static</span> UnitySendMessage lastCallback = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">void</span> RegisterCallback(UnitySendMessage callbackMethod)</span><br><span class="line">&#123;</span><br><span class="line">    lastCallback = callbackMethod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> CallbackToUnity(<span class="keyword">const</span> <span class="keyword">char</span>* msg)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (lastCallback != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        lastCallback(sUnityGameObjectName, sUnityMethodName, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//mm 中声明改方法，cshap通过dllimport调用传递参数</span></span><br><span class="line">    <span class="keyword">void</span> Demo_nativeRegister(<span class="keyword">const</span> <span class="keyword">char</span>* unityGameObjectName, <span class="keyword">const</span> <span class="keyword">char</span>* unityMethodName);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>C#这边加上声明：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">region</span> Mac PC 回调</span></span><br><span class="line">       <span class="meta">#<span class="meta-keyword">if</span> UNITY_EDITOR_OSX || UNITY_STANDALONE_OSX</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">UnityCallbackDelegate</span>(<span class="params">IntPtr objName, IntPtr methodName, IntPtr msg</span>)</span>;</span><br><span class="line"></span><br><span class="line">               [<span class="meta">DllImport(GiantSDKUtil.GIANTSDK_PLATFORM)</span>]</span><br><span class="line">               <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">RegisterCallback</span>(<span class="params">[MarshalAs(UnmanagedType.FunctionPtr</span>)] UnityCallbackDelegate callback)</span>;</span><br><span class="line">       <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">       <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br></pre></td></tr></table></figure>
<p>然后就是设置回调函数，在Start函数或者自己需求的任意位置</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统一注册和接收</span></span><br><span class="line">  Demo_nativeRegister(<span class="keyword">this</span>.gameObject.name, functionName);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> UNITY_EDITOR_OSX || UNITY_STANDALONE_OSX</span></span><br><span class="line">            RegisterCallback(<span class="built_in">delegate</span> (IntPtr objName, IntPtr methodName, IntPtr msg) &#123;</span><br><span class="line">                <span class="built_in">string</span> objN = Marshal.PtrToStringAuto(objName);</span><br><span class="line">                <span class="built_in">string</span> methodN = Marshal.PtrToStringAuto(methodName);</span><br><span class="line">                <span class="built_in">string</span> message = Marshal.PtrToStringAuto(msg);</span><br><span class="line">                GameObject founded = GameObject.Find(objN);</span><br><span class="line">                <span class="keyword">if</span> (founded != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    founded.SendMessage(methodN, message);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Debug.LogError(<span class="string">&quot;&quot;</span> + objN + <span class="string">&quot; Not Found!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>IntPtr是C#里面的指针，Marshal类用来在托管对象和非托管对象相互转换，像上面的PtrToStringAuto把一个非托管的C指针转换成C#的托管对象string。</p>
<p>参考：<br><br><br><a href="http://skyhacker2.github.io/blog/?articles/U3D/2016-08-15-%E7%BB%99U3D%E7%BC%96%E5%86%99OSX%E6%8F%92%E4%BB%B6.md#">UnityPluginForMac</a></p>
<p><a href="https://docs.unity3d.com/Manual/PluginInspector.html">Plugins</a></p>
<p><a href="https://docs.unity3d.com/Manual/PluginsForIOS.html">PluginsForIOS</a></p>
</font>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>UnityPlugin</tag>
      </tags>
  </entry>
  <entry>
    <title>Steam接入记录</title>
    <url>/2021/01/26/Unity/steam/</url>
    <content><![CDATA[<h5 id="Steam-for-Mac"><a href="#Steam-for-Mac" class="headerlink" title="Steam for Mac"></a>Steam for Mac</h5><p>SDK <strong><a href="http://steamworks.github.io/installation">http://steamworks.github.io/installation</a></strong></p>
<blockquote>
<p>steam_appid,在asset同级目录<br>init 初始化</p>
</blockquote>
<span id="more"></span>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Steam</tag>
      </tags>
  </entry>
  <entry>
    <title>ue4LoadImg</title>
    <url>/2021/11/04/Unreal/ue4-ue4LoadImg/</url>
    <content><![CDATA[<font size="2.9">

<h4 id="加载本地图片-到Image"><a href="#加载本地图片-到Image" class="headerlink" title="加载本地图片 到Image"></a>加载本地图片 到Image</h4><p>引擎版本：4.25<br>支持图片类型：png,jpg,bmp,ico,exr,icns<br>输出图片：UTexture2D</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Engine/Texture2D.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Image&quot;</span>)        </span><br><span class="line"><span class="function"><span class="keyword">static</span> UTexture2D* <span class="title">LoadTexture2D</span><span class="params">(<span class="keyword">const</span> FString path, <span class="keyword">bool</span>&amp; IsValid, int32&amp; OutWidth, int32&amp; OutHeight)</span></span>; </span><br><span class="line">.cpp <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot; ImageTest.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;FileManagerGeneric.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Runtime/ImageWrapper/Public/Interfaces/IImageWrapper.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Runtime/ImageWrapper/Public/Interfaces/IImageWrapperModule.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="图片类型"><a href="#图片类型" class="headerlink" title="图片类型"></a>图片类型</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> IImageWrapperPtr <span class="title">GetImageWrapperByExtention</span><span class="params">(<span class="keyword">const</span> FString InImagePath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IImageWrapperModule&amp; ImageWrapperModule = FModuleManager::LoadModuleChecked&lt;IImageWrapperModule&gt;(<span class="built_in">FName</span>(<span class="string">&quot;ImageWrapper&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span> (InImagePath.<span class="built_in">EndsWith</span>(<span class="string">&quot;.png&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ImageWrapperModule.<span class="built_in">CreateImageWrapper</span>(EImageFormat::PNG);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (InImagePath.<span class="built_in">EndsWith</span>(<span class="string">&quot;.jpg&quot;</span>)||InImagePath.<span class="built_in">EndsWith</span>(<span class="string">&quot;.jpeg&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ImageWrapperModule.<span class="built_in">CreateImageWrapper</span>(EImageFormat::JPEG);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (InImagePath.<span class="built_in">EndsWith</span>(<span class="string">&quot;.bmp&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ImageWrapperModule.<span class="built_in">CreateImageWrapper</span>(EImageFormat::BMP);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (InImagePath.<span class="built_in">EndsWith</span>(<span class="string">&quot;.ico&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ImageWrapperModule.<span class="built_in">CreateImageWrapper</span>(EImageFormat::ICO);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (InImagePath.<span class="built_in">EndsWith</span>(<span class="string">&quot;exr&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ImageWrapperModule.<span class="built_in">CreateImageWrapper</span>(EImageFormat::EXR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (InImagePath.<span class="built_in">EndsWith</span>(<span class="string">&quot;.icns&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ImageWrapperModule.<span class="built_in">CreateImageWrapper</span>(EImageFormat::ICNS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="根据路径加载贴图"><a href="#根据路径加载贴图" class="headerlink" title="根据路径加载贴图"></a>根据路径加载贴图</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">UTexture2D* <span class="title">ImageTest::LoadTexture2D</span><span class="params">(<span class="keyword">const</span> FString path,<span class="keyword">bool</span>&amp; IsValid,int32&amp; OutWidth,int32&amp; OutHeight)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    UTexture2D* Texture = <span class="literal">nullptr</span>;</span><br><span class="line">    IsValid = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (!FPlatformFileManager::<span class="built_in">Get</span>().<span class="built_in">GetPlatformFile</span>().<span class="built_in">FileExists</span>(*path))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    TArray&lt;uint8&gt; RawFileData;</span><br><span class="line">    <span class="keyword">if</span> (!FFileHelper::<span class="built_in">LoadFileToArray</span>(RawFileData,*path))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    IImageWrapperPtr ImageWrapper = <span class="built_in">GetImageWrapperByExtention</span>(path);</span><br><span class="line">    <span class="keyword">if</span> (ImageWrapper.<span class="built_in">IsValid</span>()&amp;&amp;ImageWrapper-&gt;<span class="built_in">SetCompressed</span>(RawFileData.<span class="built_in">GetData</span>(),RawFileData.<span class="built_in">Num</span>()))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">const</span> TArray&lt;uint8&gt;* UncompressedRGBA = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">if</span> (ImageWrapper-&gt;<span class="built_in">GetRaw</span>(ERGBFormat::</span><br><span class="line">        ,<span class="number">8</span>,UncompressedRGBA))</span><br><span class="line">        &#123;</span><br><span class="line">            Texture = UTexture2D::<span class="built_in">CreateTransient</span>(ImageWrapper-&gt;<span class="built_in">GetWidth</span>(), ImageWrapper-&gt;<span class="built_in">GetHeight</span>(), PF_R8G8B8A8);</span><br><span class="line">            <span class="keyword">if</span> (Texture != <span class="literal">nullptr</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                IsValid = <span class="literal">true</span>;</span><br><span class="line">                OutWidth = ImageWrapper-&gt;<span class="built_in">GetWidth</span>();</span><br><span class="line">                OutHeight = ImageWrapper-&gt;<span class="built_in">GetHeight</span>();</span><br><span class="line">                <span class="keyword">void</span>* TextureData = Texture-&gt;PlatformData-&gt;Mips[<span class="number">0</span>].BulkData.<span class="built_in">Lock</span>(LOCK_READ_WRITE);</span><br><span class="line">                FMemory::<span class="built_in">Memcpy</span>(TextureData, UncompressedRGBA-&gt;<span class="built_in">GetData</span>(), UncompressedRGBA-&gt;<span class="built_in">Num</span>());</span><br><span class="line">                Texture-&gt;PlatformData-&gt;Mips[<span class="number">0</span>].BulkData.<span class="built_in">Unlock</span>();</span><br><span class="line">                Texture-&gt;<span class="built_in">UpdateResource</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Texture;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="build-cs中添加ImageWrapper模块"><a href="#build-cs中添加ImageWrapper模块" class="headerlink" title=".build.cs中添加ImageWrapper模块"></a>.build.cs中添加ImageWrapper模块</h4><p>要解决JPG图片读入UE中出现的Red通道和Blue通道交叉出现的图片颜色错误问题，可将LoadTexture2D中ERGBFormat::RGBA和PF_R8G8B8A8替换为ERGBFormat::BGRA和PF_B8G8R8A8，以BGR存储颜色通道信息即可。</p>
<h4 id="蓝图Image-设置值"><a href="#蓝图Image-设置值" class="headerlink" title="蓝图Image 设置值"></a>蓝图Image 设置值</h4><img src="/2021/11/04/Unreal/ue4-ue4LoadImg/1.png" class="">

<h4 id="图片转base64"><a href="#图片转base64" class="headerlink" title="图片转base64"></a>图片转base64</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">UTexture2D* OutTex = <span class="literal">NULL</span>;</span><br><span class="line">	IImageWrapperModule&amp; imageWrapperModule = FModuleManager::LoadModuleChecked&lt;IImageWrapperModule&gt;(<span class="built_in">FName</span>(<span class="string">&quot;ImageWrapper&quot;</span>));</span><br><span class="line">	TSharedPtr&lt;IImageWrapper&gt; imageWrapper = imageWrapperModule.<span class="built_in">CreateImageWrapper</span>(EImageFormat::PNG);</span><br><span class="line"></span><br><span class="line">	TArray&lt;uint8&gt; OutArray;</span><br><span class="line">	<span class="keyword">if</span> (FFileHelper::<span class="built_in">LoadFileToArray</span>(OutArray, *_TexPath))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (imageWrapper.<span class="built_in">IsValid</span>() &amp;&amp;</span><br><span class="line">			imageWrapper-&gt;<span class="built_in">SetCompressed</span>(OutArray.<span class="built_in">GetData</span>(), OutArray.<span class="built_in">Num</span>()))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//Dest = OutArray;</span></span><br><span class="line">			<span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;Load = %d&quot;</span>),OutArray.<span class="built_in">Num</span>());</span><br><span class="line">			<span class="keyword">const</span> TArray&lt;uint8&gt;* uncompressedRGBA = <span class="literal">NULL</span>;</span><br><span class="line">			<span class="keyword">if</span> (imageWrapper-&gt;<span class="built_in">GetRaw</span>(ERGBFormat::RGBA, <span class="number">8</span>, uncompressedRGBA))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">const</span> TArray&lt;FColor&gt; uncompressedFColor = <span class="built_in">uint8ToFColor</span>(*uncompressedRGBA);</span><br><span class="line">				OutTex = <span class="built_in">TextureFromImage</span>(</span><br><span class="line">					imageWrapper-&gt;<span class="built_in">GetWidth</span>(),</span><br><span class="line">					imageWrapper-&gt;<span class="built_in">GetHeight</span>(),</span><br><span class="line">					uncompressedFColor,</span><br><span class="line">					<span class="literal">true</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">FString baseImgData = FBase64::<span class="built_in">Encode</span>(OutArray);</span><br></pre></td></tr></table></figure>

</font>]]></content>
      <categories>
        <category>UE4</category>
      </categories>
      <tags>
        <tag>UTexture2D</tag>
      </tags>
  </entry>
  <entry>
    <title>uePlugin</title>
    <url>/2021/11/30/Unreal/uePlugin/</url>
    <content><![CDATA[<font size="2.9">

<h4 id="插件目录"><a href="#插件目录" class="headerlink" title="插件目录"></a>插件目录</h4><img src="/2021/11/30/Unreal/uePlugin/1.png" class="">

<pre><code>Binaries：编译后的dll文件存放位置

Content：游戏资源Asset文件存放位置

Intermediate：编译的中间文件存放位置

Resources：一般为图标的存放位置

Source：代码存放位置

.uplugin：插件模块配置文件，JSON格式

.Build.cs：每个.Build.cs文件声明派生自ModuleRules基类的类，并设置属性控制器从构造函数进行编译的方式。由虚幻编译工具编译，并被构造来确定整体编译环境。使用C#语法。
</code></pre>
<h4 id="uplugin-描述文件"><a href="#uplugin-描述文件" class="headerlink" title=".uplugin 描述文件"></a>.uplugin 描述文件</h4><img src="/2021/11/30/Unreal/uePlugin/2.png" class="">

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">&quot;FileVersion&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">&quot;Version&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;VersionName&quot;</span>: <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;FriendlyName&quot;</span>: <span class="string">&quot;PluginName&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Category&quot;</span>: <span class="string">&quot;Other&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;CreatedBy&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;CreatedByURL&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;DocsURL&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;MarketplaceURL&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;SupportURL&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;CanContainContent&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;IsBetaVersion&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;Installed&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;Modules&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;Name&quot;</span>: <span class="string">&quot;PluginName&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;Editor&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;LoadingPhase&quot;</span>: <span class="string">&quot;Default&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;Plugins&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;Name&quot;</span>: <span class="string">&quot;AssetManagerEditor&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;Enabled&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Category：类目名即在插件编辑器中所属的类目</p>
<p>模块描述符Modules<br>必须有Name和Type字段。</p>
<p>Name：是插件模块的唯一命名，将随着插件而加载。在运行时，插件的Binaries文件夹中需存在正确的插件二进制文件，并带有指定模块命名。</p>
<p>Type：是模块的类型，决定了该插件适合于那种类型的应用程序加载。有效的几项是：Runtime、RuntimeNoCommandlet、Developer、Editor；其中Runtime 的模块在无论何时都会被加载，哪怕是在最终发行的游戏版本中也会。Developer 的模块只会在 Development 运行时或者编辑器版本中才会被加载，并不在在最终发行版本中加载。Editor 模块只会随着 Editor 的启动被加载。插件也可以使用几种不同类型的组合来达到所需要的目的。</p>
<p>LoadingPhase：控制插件在引擎启动的何时被加载。</p>
<p>WhitelistPlatforms：开放的平台<br>BlacklistPlatforms：关闭的平台</p>
<h3 id="插件描述符Modules"><a href="#插件描述符Modules" class="headerlink" title="插件描述符Modules"></a>插件描述符Modules</h3><pre><code>此插件依赖于另一个插件，所以在插件描述符Modules中的LoadingPhase的属性，如果和另一个插件是依赖关系，则应该编译此插件之前就编译了依赖的那个插件。
</code></pre>
<p>插件编译配置文件 .Build.cs 描述模块编译方法</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnrealBuildTool;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PluginName</span> : <span class="title">ModuleRules</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PluginName</span>(<span class="params">ReadOnlyTargetRules Target</span>) : <span class="title">base</span>(<span class="params">Target</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        PCHUsage = ModuleRules.PCHUsageMode.UseExplicitOrSharedPCHs;</span><br><span class="line">        </span><br><span class="line">        PublicIncludePaths.AddRange(</span><br><span class="line">            <span class="keyword">new</span> <span class="built_in">string</span>[] &#123;</span><br><span class="line">                <span class="comment">// ... add public include paths required here ...</span></span><br><span class="line">            &#125;</span><br><span class="line">            );</span><br><span class="line">        PrivateIncludePaths.AddRange(</span><br><span class="line">            <span class="keyword">new</span> <span class="built_in">string</span>[] &#123;</span><br><span class="line">                <span class="comment">// ... add other private include paths required here ...</span></span><br><span class="line">            &#125;</span><br><span class="line">            );</span><br><span class="line">        PublicDependencyModuleNames.AddRange(</span><br><span class="line">            <span class="keyword">new</span> <span class="built_in">string</span>[]</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;Core&quot;</span>,</span><br><span class="line">                <span class="comment">// ... add other public dependencies that you statically link with here ...</span></span><br><span class="line">            &#125;</span><br><span class="line">            );</span><br><span class="line">        PrivateDependencyModuleNames.AddRange(</span><br><span class="line">            <span class="keyword">new</span> <span class="built_in">string</span>[]</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;CoreUObject&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Engine&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Slate&quot;</span>,</span><br><span class="line">                <span class="string">&quot;SlateCore&quot;</span>,</span><br><span class="line">                <span class="comment">// ... add private dependencies that you statically link with here ...  </span></span><br><span class="line">            &#125;</span><br><span class="line">            );</span><br><span class="line">        DynamicallyLoadedModuleNames.AddRange(</span><br><span class="line">            <span class="keyword">new</span> <span class="built_in">string</span>[]</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// ... add any modules that your module loads dynamically here ...</span></span><br><span class="line">            &#125;</span><br><span class="line">            );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="插件头文件-h"><a href="#插件头文件-h" class="headerlink" title="插件头文件 .h"></a>插件头文件 .h</h2><p>插件的头文件中，一般只有一个类，而且以F开头，Module结尾。比如：FPluginNameModule。<br>还有两个函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">StartupModule</span><span class="params">()</span> <span class="keyword">override</span></span>;<span class="comment">//插件加载</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ShutdownModule</span><span class="params">()</span> <span class="keyword">override</span></span>;<span class="comment">//插件卸载</span></span><br></pre></td></tr></table></figure>

<p>Note:</p>
<pre><code>当创建“编辑器工具栏按钮”的插件，编辑代码结束后，需重新打开编辑器才可生效
</code></pre>
</font> ]]></content>
      <categories>
        <category>UE4</category>
      </categories>
      <tags>
        <tag>Plugins</tag>
      </tags>
  </entry>
  <entry>
    <title>UE4遇到的WebView问题</title>
    <url>/2021/01/18/Unreal/RecordUe4/</url>
    <content><![CDATA[<font size="2.9">

<h5 id="UE4-24-4版本最新-Android机-少数有webcrash"><a href="#UE4-24-4版本最新-Android机-少数有webcrash" class="headerlink" title="UE4-24-4版本最新 Android机 少数有webcrash"></a>UE4-24-4版本最新 Android机 少数有webcrash</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2021-01-18 18:20:23.149 4886-4886/? E/chromium: [ERROR:aw_browser_terminator.cc(125)] Renderer process (6237) crash detected (code -1).</span><br><span class="line">2021-01-18 18:20:23.149 4886-4886/? E/chromium: [ERROR:aw_browser_terminator.cc(90)] Render process (6237) kill (OOM or update) wasn&#x27;t handed by all associated webviews, killing application.</span><br></pre></td></tr></table></figure>

<h5 id="推理测试"><a href="#推理测试" class="headerlink" title="推理测试"></a>推理测试</h5><blockquote>
<p>1.web内容改为本地 依然crash</p>
</blockquote>
<blockquote>
<p>2.改变web创建方式 代码创建 和布局中 依然无效</p>
</blockquote>
<blockquote>
<p>3.zipalign内存字节对齐 这是磁盘对齐，是在打完apk后<br> 在android中，资源文件通过内存映射对齐到4字节边界时，访问资源文件的代码才是有效率的<br> zipalign -c -v 4 xxx.apk</p>
</blockquote>
<p> <strong>优化出包</strong><br> zipalign -v 4  xx.apk havedGood.apk （文件大于2GB 无效)</p>
<blockquote>
<p>4.采用V2签名</p>
</blockquote>
<blockquote>
<p>5.关闭aapt2,开启aapt （编译资源方面无影响)</p>
</blockquote>
<blockquote>
<p>6.修改对应的ue4-24版本对应的gradle插件 3.2.1  发现游戏包大于2G 出现OOM,放弃<br> OOM 问题无法解决</p>
</blockquote>
<blockquote>
<p>7.游戏里添加按钮直接调用接口测试  或者跳转空白页面还是crash</p>
</blockquote>
<blockquote>
<p>8.Gradle版本 低于3.5.3  或者高于 如4.0.1 内存溢出 OOM（array to large ）越界 gralde.properties 里面内存加大<br><strong>org.gradle.jvmargs=-Xmx10240m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8</strong></p>
</blockquote>
<img src="/2021/01/18/Unreal/RecordUe4/Lark_gradle.png" class="" title="gradle">
<blockquote>
<p>9.游戏 包重新签名</p>
</blockquote>
<blockquote>
<p>10.游戏大于2GB有问题，对 taptap,es文件浏览器 引起crash,查询webview 推送漏洞 导致crash，如果绕开，让单个文件小于2GB。最终解决方法 升级chrome</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">--------- beginning of crash</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.028</span> <span class="number">27559</span> <span class="number">29808</span> F libc    : Fatal signal <span class="number">6</span> (SIGABRT), code <span class="number">0</span> (SI_USER) in tid <span class="number">29808</span> (pool-<span class="number">17</span>-thread-), pid <span class="number">27559</span> (com.taptap)</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.157</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   : *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.157</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   : Build fingerprint: <span class="string">&#x27;OnePlus/OnePlus8_CH/OnePlus8:10/QKQ1.191222.002/2004300255:user/release-keys&#x27;</span></span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.157</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   : Revision: <span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.157</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   : ABI: <span class="string">&#x27;arm&#x27;</span></span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.158</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   : Timestamp: <span class="number">2021</span>-<span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33</span>+0800</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.158</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   : pid: <span class="number">27559</span>, tid: <span class="number">29808</span>, name: pool-<span class="number">17</span>-thread-  &gt;&gt;&gt; com.taptap &lt;&lt;&lt;</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.158</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   : uid: <span class="number">10462</span></span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.158</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   : signal <span class="number">6</span> (SIGABRT), code <span class="number">0</span> (SI_USER), fault addr --------</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.158</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   : Abort message: <span class="string">&#x27;ubsan: implicit-conversion&#x27;</span></span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.158</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :     r0  <span class="number">00000000</span>  r1  <span class="number">00007470</span>  r2  <span class="number">00000006</span>  r3  beeb5898</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.158</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :     r4  beeb58ac  r5  beeb5890  r6  00006ba7  r7  0000016b</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.158</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :     r8  beeb58a8  r9  beeb5898  r10 beeb58c8  r11 beeb58b8</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.158</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :     ip  <span class="number">00007470</span>  sp  beeb5868  lr  f2cf94cb  pc  f2cf94de</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.427</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   : </span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.427</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   : backtrace:</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.427</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :       #<span class="number">00</span> pc 000604de  /apex/com.android.runtime/lib/bionic/libc.so (abort+<span class="number">166</span>) (BuildId: 821c77998fb681da63cc0cc2621d9479)</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.427</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :       #<span class="number">01</span> pc 00011b60  /system/lib/libutils.so (abort_with_message(<span class="keyword">char</span> <span class="keyword">const</span>*)+<span class="number">24</span>) (BuildId: 303a9d221465f0db9b5d760e0a0c6abe)</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.427</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :       #<span class="number">02</span> pc 00011c58  /system/lib/libutils.so (__ubsan_handle_implicit_conversion_minimal_abort+<span class="number">24</span>) (BuildId: 303a9d221465f0db9b5d760e0a0c6abe)</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.427</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :       #<span class="number">03</span> pc 0000a1db  /system/lib/libutils.so (android::FileMap::create(<span class="keyword">char</span> <span class="keyword">const</span>*, <span class="keyword">int</span>, <span class="keyword">long</span> <span class="keyword">long</span>, unsigned <span class="keyword">int</span>, bool)+<span class="number">302</span>) (BuildId: 303a9d221465f0db9b5d760e0a0c6abe)</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.427</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :       #<span class="number">04</span> pc 00021d5b  /system/lib/libandroidfw.so (android::ApkAssets::Open(std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt;&gt; <span class="keyword">const</span>&amp;, android::Asset::AccessMode) <span class="keyword">const</span>+<span class="number">258</span>) (BuildId: 21002c626ee1affa596c8d808483e06d)</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.427</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :       #<span class="number">05</span> pc <span class="number">00021255</span>  /system/lib/libandroidfw.so (android::ApkAssets::LoadImpl(android::base::unique_fd_impl&lt;android::base::DefaultCloser&gt;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt;&gt; <span class="keyword">const</span>&amp;, std::__1::unique_ptr&lt;android::Asset, std::__1::default_delete&lt;android::Asset&gt;&gt;, std::__1::unique_ptr&lt;android::LoadedIdmap <span class="keyword">const</span>, std::__1::default_delete&lt;android::LoadedIdmap <span class="keyword">const</span>&gt;&gt;, bool, bool)+<span class="number">392</span>) (BuildId: 21002c626ee1affa596c8d808483e06d)</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.427</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :       #<span class="number">06</span> pc 00021069  /system/lib/libandroidfw.so (android::ApkAssets::Load(std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt;&gt; <span class="keyword">const</span>&amp;, bool)+<span class="number">40</span>) (BuildId: 21002c626ee1affa596c8d808483e06d)</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.428</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :       #<span class="number">07</span> pc 0012ac6f  /system/lib/libandroid_runtime.so (android::NativeLoad(_JNIEnv*, _jclass*, _jstring*, unsigned <span class="keyword">char</span>, unsigned <span class="keyword">char</span>, unsigned <span class="keyword">char</span>)+<span class="number">630</span>) (BuildId: 9e49e3e1d0bfa227ee91d698b0542a69)</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.428</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :       #08 pc 00292769  /system/framework/arm/boot-framework.oat (art_jni_trampoline+<span class="number">136</span>) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.428</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :       #09 pc 003b4f29  /system/framework/arm/boot-framework.oat (android.app.ResourcesManager.loadApkAssets+<span class="number">440</span>) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.428</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :       #<span class="number">10</span> pc 003b5f5b  /system/framework/arm/boot-framework.oat (android.app.ResourcesManager.createAssetManager+<span class="number">170</span>) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.428</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :       #<span class="number">11</span> pc 003b39a7  /system/framework/arm/boot-framework.oat (android.app.ResourcesManager.createResourcesImpl+<span class="number">126</span>) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.428</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :       #<span class="number">12</span> pc 003b4693  /system/framework/arm/boot-framework.oat (android.app.ResourcesManager.getOrCreateResources+<span class="number">1258</span>) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.428</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :       #<span class="number">13</span> pc 003b6bc1  /system/framework/arm/boot-framework.oat (android.app.ResourcesManager.getResources+<span class="number">440</span>) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.428</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :       #<span class="number">14</span> pc <span class="number">0047066f</span>  /system/framework/arm/boot-framework.oat (android.app.ApplicationPackageManager.getResourcesForApplication+<span class="number">414</span>) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.428</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :       #<span class="number">15</span> pc 00470f99  /system/framework/arm/boot-framework.oat (android.app.ApplicationPackageManager.getText+<span class="number">192</span>) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.428</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :       #<span class="number">16</span> pc 003d287b  /system/framework/arm/boot-framework.oat (android.content.pm.PackageItemInfo.loadUnsafeLabel+<span class="number">114</span>) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.428</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :       #<span class="number">17</span> pc 003d2733  /system/framework/arm/boot-framework.oat (android.content.pm.PackageItemInfo.loadLabel+<span class="number">66</span>) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.428</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :       #<span class="number">18</span> pc <span class="number">0060e579</span>  /data/app/com.taptap-RTdXAVrkrlThKgnAxoFGrg==/oat/arm/base.odex (com.play.taptap.apps.LocalGameManager.initLocalAppsInner+<span class="number">872</span>)</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.428</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :       #<span class="number">19</span> pc 0060c815  /data/app/com.taptap-RTdXAVrkrlThKgnAxoFGrg==/oat/arm/base.odex (com.play.taptap.apps.LocalGameManager$<span class="number">1.</span>run+<span class="number">108</span>)</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.428</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :       #<span class="number">20</span> pc 0028df17  /system/framework/arm/boot.oat (java.util.concurrent.ThreadPoolExecutor.runWorker+<span class="number">1014</span>) (BuildId: 42f5d5a67be30f16b4db28d01054b7acd1a9df82)</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.428</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :       #<span class="number">21</span> pc 0028bb7f  /system/framework/arm/boot.oat (java.util.concurrent.ThreadPoolExecutor$Worker.run+<span class="number">54</span>) (BuildId: 42f5d5a67be30f16b4db28d01054b7acd1a9df82)</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.428</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :       #<span class="number">22</span> pc 001737b9  /system/framework/arm/boot.oat (java.lang.Thread.run+<span class="number">64</span>) (BuildId: 42f5d5a67be30f16b4db28d01054b7acd1a9df82)</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.428</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :       #<span class="number">23</span> pc 000d7bc5  /apex/com.android.runtime/lib/libart.so (art_quick_invoke_stub_internal+<span class="number">68</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.428</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :       #<span class="number">24</span> pc 0043cdfd  /apex/com.android.runtime/lib/libart.so (art_quick_invoke_stub+<span class="number">248</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.428</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :       #<span class="number">25</span> pc 000dff81  /apex/com.android.runtime/lib/libart.so (art::ArtMethod::Invoke(art::Thread*, unsigned <span class="keyword">int</span>*, unsigned <span class="keyword">int</span>, art::JValue*, <span class="keyword">char</span> <span class="keyword">const</span>*)+<span class="number">168</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.428</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :       #<span class="number">26</span> pc 0037d187  /apex/com.android.runtime/lib/libart.so (art::(anonymous namespace)::InvokeWithArgArray(art::ScopedObjectAccessAlreadyRunnable <span class="keyword">const</span>&amp;, art::ArtMethod*, art::(anonymous namespace)::ArgArray*, art::JValue*, <span class="keyword">char</span> <span class="keyword">const</span>*)+<span class="number">54</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.429</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :       #<span class="number">27</span> pc 0037df1b  /apex/com.android.runtime/lib/libart.so (art::InvokeVirtualOrInterfaceWithJValues(art::ScopedObjectAccessAlreadyRunnable <span class="keyword">const</span>&amp;, _jobject*, _jmethodID*, jvalue <span class="keyword">const</span>*)+<span class="number">302</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.429</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :       #<span class="number">28</span> pc 003afb7f  /apex/com.android.runtime/lib/libart.so (art::Thread::CreateCallback(<span class="keyword">void</span>*)+<span class="number">1018</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.429</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :       #<span class="number">29</span> pc 000ab3dd  /apex/com.android.runtime/lib/bionic/libc.so (__pthread_start(<span class="keyword">void</span>*)+<span class="number">20</span>) (BuildId: 821c77998fb681da63cc0cc2621d9479)</span><br><span class="line"><span class="number">04</span>-<span class="number">02</span> <span class="number">19</span>:<span class="number">12</span>:<span class="number">33.429</span> <span class="number">29830</span> <span class="number">29830</span> F DEBUG   :       #<span class="number">30</span> pc 00061989  /apex/com.android.runtime/lib/bionic/libc.so (__start_thread+<span class="number">30</span>) (BuildId: 821c77998fb681da63cc0cc2621d9479)</span><br><span class="line"><span class="number">04</span>-<span class="number">03</span> <span class="number">18</span>:<span class="number">45</span>:<span class="number">05.648</span> <span class="number">27558</span> <span class="number">31142</span> F libc    : Fatal signal <span class="number">6</span> (SIGABRT), code <span class="number">0</span> (SI_USER) in tid <span class="number">31142</span> (pool-<span class="number">16</span>-thread-), pid <span class="number">27558</span> (com.taptap)</span><br><span class="line"><span class="number">04</span>-<span class="number">03</span> <span class="number">18</span>:<span class="number">45</span>:<span class="number">05.766</span> <span class="number">31186</span> <span class="number">31186</span> F DEBUG   : *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***</span><br><span class="line"></span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.208</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   : *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.208</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   : Build fingerprint: <span class="string">&#x27;OnePlus/OnePlus8_CH/OnePlus8:10/QKQ1.191222.002/2004300255:user/release-keys&#x27;</span></span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.208</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   : Revision: <span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.209</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   : ABI: <span class="string">&#x27;arm&#x27;</span></span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.214</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   : Timestamp: <span class="number">2021</span>-<span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11</span>+0800</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.214</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   : pid: <span class="number">19223</span>, tid: <span class="number">19321</span>, name: ocessService0:<span class="number">0</span>  &gt;&gt;&gt; com.google.android.webview:sandboxed_process0:org.chromium.content.app.SandboxedProcessService0:<span class="number">0</span> &lt;&lt;&lt;</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.214</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   : uid: <span class="number">99477</span></span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.214</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   : signal <span class="number">6</span> (SIGABRT), code -<span class="number">1</span> (SI_QUEUE), fault addr --------</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.214</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   : Abort message: <span class="string">&#x27;ubsan: implicit-conversion&#x27;</span></span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.214</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   :     r0  <span class="number">00000000</span>  r1  00004b79  r2  <span class="number">00000006</span>  r3  c5ee9778</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.214</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   :     r4  c5ee978c  r5  c5ee9770  r6  00004b17  r7  0000016b</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.214</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   :     r8  c5ee9788  r9  c5ee9778  r10 c5ee97a8  r11 c5ee9798</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.214</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   :     ip  00004b79  sp  c5ee9748  lr  f2cf94cb  pc  f2cf94de</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.523</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   : </span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.523</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   : backtrace:</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.523</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   :       #<span class="number">00</span> pc 000604de  /apex/com.android.runtime/lib/bionic/libc.so (abort+<span class="number">166</span>) (BuildId: 821c77998fb681da63cc0cc2621d9479)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.523</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   :       #<span class="number">01</span> pc 00011b60  /system/lib/libutils.so (abort_with_message(<span class="keyword">char</span> <span class="keyword">const</span>*)+<span class="number">24</span>) (BuildId: 303a9d221465f0db9b5d760e0a0c6abe)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.523</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   :       #<span class="number">02</span> pc 00011c58  /system/lib/libutils.so (__ubsan_handle_implicit_conversion_minimal_abort+<span class="number">24</span>) (BuildId: 303a9d221465f0db9b5d760e0a0c6abe)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.523</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   :       #<span class="number">03</span> pc 0000a1db  /system/lib/libutils.so (android::FileMap::create(<span class="keyword">char</span> <span class="keyword">const</span>*, <span class="keyword">int</span>, <span class="keyword">long</span> <span class="keyword">long</span>, unsigned <span class="keyword">int</span>, bool)+<span class="number">302</span>) (BuildId: 303a9d221465f0db9b5d760e0a0c6abe)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.523</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   :       #<span class="number">04</span> pc 00021d5b  /system/lib/libandroidfw.so (android::ApkAssets::Open(std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt;&gt; <span class="keyword">const</span>&amp;, android::Asset::AccessMode) <span class="keyword">const</span>+<span class="number">258</span>) (BuildId: 21002c626ee1affa596c8d808483e06d)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.523</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   :       #<span class="number">05</span> pc <span class="number">00021255</span>  /system/lib/libandroidfw.so (android::ApkAssets::LoadImpl(android::base::unique_fd_impl&lt;android::base::DefaultCloser&gt;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt;&gt; <span class="keyword">const</span>&amp;, std::__1::unique_ptr&lt;android::Asset, std::__1::default_delete&lt;android::Asset&gt;&gt;, std::__1::unique_ptr&lt;android::LoadedIdmap <span class="keyword">const</span>, std::__1::default_delete&lt;android::LoadedIdmap <span class="keyword">const</span>&gt;&gt;, bool, bool)+<span class="number">392</span>) (BuildId: 21002c626ee1affa596c8d808483e06d)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.523</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   :       #<span class="number">06</span> pc 00021069  /system/lib/libandroidfw.so (android::ApkAssets::Load(std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt;&gt; <span class="keyword">const</span>&amp;, bool)+<span class="number">40</span>) (BuildId: 21002c626ee1affa596c8d808483e06d)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.523</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   :       #<span class="number">07</span> pc 0012ac6f  /system/lib/libandroid_runtime.so (android::NativeLoad(_JNIEnv*, _jclass*, _jstring*, unsigned <span class="keyword">char</span>, unsigned <span class="keyword">char</span>, unsigned <span class="keyword">char</span>)+<span class="number">630</span>) (BuildId: 9e49e3e1d0bfa227ee91d698b0542a69)</span><br><span class="line"> </span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.523</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   :       #<span class="number">28</span> pc 001f097f  /apex/com.android.runtime/lib/libart.so (_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb.llvm<span class="number">.6076538161558136159</span>+<span class="number">166</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.523</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   :       #<span class="number">29</span> pc 001f5393  /apex/com.android.runtime/lib/libart.so (art::interpreter::EnterInterpreterFromEntryPoint(art::Thread*, art::CodeItemDataAccessor <span class="keyword">const</span>&amp;, art::ShadowFrame*)+<span class="number">122</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.523</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   :       #<span class="number">30</span> pc 00426857  /apex/com.android.runtime/lib/libart.so (artQuickToInterpreterBridge+<span class="number">866</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.523</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   :       #<span class="number">31</span> pc 000dc5a1  /apex/com.android.runtime/lib/libart.so (art_quick_to_interpreter_bridge+<span class="number">32</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.523</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   :       #<span class="number">32</span> pc 000d7bc5  /apex/com.android.runtime/lib/libart.so (art_quick_invoke_stub_internal+<span class="number">68</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.523</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   :       #<span class="number">33</span> pc 0043cf0f  /apex/com.android.runtime/lib/libart.so (art_quick_invoke_static_stub+<span class="number">246</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.523</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   :       #<span class="number">34</span> pc 000dff95  /apex/com.android.runtime/lib/libart.so (art::ArtMethod::Invoke(art::Thread*, unsigned <span class="keyword">int</span>*, unsigned <span class="keyword">int</span>, art::JValue*, <span class="keyword">char</span> <span class="keyword">const</span>*)+<span class="number">188</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">02</span>:<span class="number">11.523</span> <span class="number">19223</span> <span class="number">19321</span> F DEBUG   :       #<span class="number">35</span> pc <span class="number">00101405</span>  /apex/com.android.runtime/lib/libart.so (art::ClassLinker::InitializeClass(art::Thread*, art::Handle&lt;art::mirror::Class&gt;, bool, bool)+<span class="number">1916</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line">  <span class="number">0x665000</span>) (BuildId: 18a4115359876ab8b15ee84fe29a2942a145ea8d)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.142</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   : *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.143</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   : Build fingerprint: <span class="string">&#x27;OnePlus/OnePlus8_CH/OnePlus8:10/QKQ1.191222.002/2004300255:user/release-keys&#x27;</span></span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.143</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   : Revision: <span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.143</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   : ABI: <span class="string">&#x27;arm&#x27;</span></span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.143</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   : Timestamp: <span class="number">2021</span>-<span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32</span>+0800</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.143</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   : pid: <span class="number">19701</span>, tid: <span class="number">19775</span>, name: ocessService0:<span class="number">0</span>  &gt;&gt;&gt; com.google.android.webview:sandboxed_process0:org.chromium.content.app.SandboxedProcessService0:<span class="number">0</span> &lt;&lt;&lt;</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.143</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   : uid: <span class="number">99479</span></span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.143</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   : signal <span class="number">6</span> (SIGABRT), code -<span class="number">1</span> (SI_QUEUE), fault addr --------</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.143</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   : Abort message: <span class="string">&#x27;ubsan: implicit-conversion&#x27;</span></span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.143</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :     r0  <span class="number">00000000</span>  r1  00004d3f  r2  <span class="number">00000006</span>  r3  c5ee9778</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.143</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :     r4  c5ee978c  r5  c5ee9770  r6  00004cf5  r7  0000016b</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.143</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :     r8  c5ee9788  r9  c5ee9778  r10 c5ee97a8  r11 c5ee9798</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.143</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :     ip  00004d3f  sp  c5ee9748  lr  f2cf94cb  pc  f2cf94de</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   : </span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   : backtrace:</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">00</span> pc 000604de  /apex/com.android.runtime/lib/bionic/libc.so (abort+<span class="number">166</span>) (BuildId: 821c77998fb681da63cc0cc2621d9479)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">01</span> pc 00011b60  /system/lib/libutils.so (abort_with_message(<span class="keyword">char</span> <span class="keyword">const</span>*)+<span class="number">24</span>) (BuildId: 303a9d221465f0db9b5d760e0a0c6abe)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">02</span> pc 00011c58  /system/lib/libutils.so (__ubsan_handle_implicit_conversion_minimal_abort+<span class="number">24</span>) (BuildId: 303a9d221465f0db9b5d760e0a0c6abe)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">03</span> pc 0000a1db  /system/lib/libutils.so (android::FileMap::create(<span class="keyword">char</span> <span class="keyword">const</span>*, <span class="keyword">int</span>, <span class="keyword">long</span> <span class="keyword">long</span>, unsigned <span class="keyword">int</span>, bool)+<span class="number">302</span>) (BuildId: 303a9d221465f0db9b5d760e0a0c6abe)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">04</span> pc 00021d5b  /system/lib/libandroidfw.so (android::ApkAssets::Open(std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt;&gt; <span class="keyword">const</span>&amp;, android::Asset::AccessMode) <span class="keyword">const</span>+<span class="number">258</span>) (BuildId: 21002c626ee1affa596c8d808483e06d)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">05</span> pc <span class="number">00021255</span>  /system/lib/libandroidfw.so (android::ApkAssets::LoadImpl(android::base::unique_fd_impl&lt;android::base::DefaultCloser&gt;, std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt;&gt; <span class="keyword">const</span>&amp;, std::__1::unique_ptr&lt;android::Asset, std::__1::default_delete&lt;android::Asset&gt;&gt;, std::__1::unique_ptr&lt;android::LoadedIdmap <span class="keyword">const</span>, std::__1::default_delete&lt;android::LoadedIdmap <span class="keyword">const</span>&gt;&gt;, bool, bool)+<span class="number">392</span>) (BuildId: 21002c626ee1affa596c8d808483e06d)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">06</span> pc 00021069  /system/lib/libandroidfw.so (android::ApkAssets::Load(std::__1::basic_string&lt;<span class="keyword">char</span>, std::__1::char_traits&lt;<span class="keyword">char</span>&gt;, std::__1::allocator&lt;<span class="keyword">char</span>&gt;&gt; <span class="keyword">const</span>&amp;, bool)+<span class="number">40</span>) (BuildId: 21002c626ee1affa596c8d808483e06d)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">07</span> pc 0012ac6f  /system/lib/libandroid_runtime.so (android::NativeLoad(_JNIEnv*, _jclass*, _jstring*, unsigned <span class="keyword">char</span>, unsigned <span class="keyword">char</span>, unsigned <span class="keyword">char</span>)+<span class="number">630</span>) (BuildId: 9e49e3e1d0bfa227ee91d698b0542a69)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #08 pc 00292769  /system/framework/arm/boot-framework.oat (art_jni_trampoline+<span class="number">136</span>) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #09 pc 003b4f29  /system/framework/arm/boot-framework.oat (android.app.ResourcesManager.loadApkAssets+<span class="number">440</span>) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">10</span> pc 003b5f5b  /system/framework/arm/boot-framework.oat (android.app.ResourcesManager.createAssetManager+<span class="number">170</span>) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">11</span> pc 003b39a7  /system/framework/arm/boot-framework.oat (android.app.ResourcesManager.createResourcesImpl+<span class="number">126</span>) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">12</span> pc 003b4693  /system/framework/arm/boot-framework.oat (android.app.ResourcesManager.getOrCreateResources+<span class="number">1258</span>) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">13</span> pc 003b6bc1  /system/framework/arm/boot-framework.oat (android.app.ResourcesManager.getResources+<span class="number">440</span>) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">14</span> pc <span class="number">0047066f</span>  /system/framework/arm/boot-framework.oat (android.app.ApplicationPackageManager.getResourcesForApplication+<span class="number">414</span>) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">15</span> pc 00470f99  /system/framework/arm/boot-framework.oat (android.app.ApplicationPackageManager.getText+<span class="number">192</span>) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">16</span> pc 003d287b  /system/framework/arm/boot-framework.oat (android.content.pm.PackageItemInfo.loadUnsafeLabel+<span class="number">114</span>) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">17</span> pc 003d2733  /system/framework/arm/boot-framework.oat (android.content.pm.PackageItemInfo.loadLabel+<span class="number">66</span>) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">18</span> pc 0046ebe5  /system/framework/arm/boot-framework.oat (android.app.ApplicationPackageManager.getApplicationLabel+<span class="number">44</span>) (BuildId: 5c92fc03b32dcdeb071c855019413ce105601b43)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">19</span> pc 001f22ad  /data/dalvik-cache/arm/product<span class="meta">@app</span><span class="meta">@WebViewGoogle</span><span class="meta">@WebViewGoogle</span>.apk<span class="meta">@classes</span>.dex (org.chromium.base.BuildInfo.&lt;init&gt;+<span class="number">468</span>)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">20</span> pc 000d7bc5  /apex/com.android.runtime/lib/libart.so (art_quick_invoke_stub_internal+<span class="number">68</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">21</span> pc 0043cdfd  /apex/com.android.runtime/lib/libart.so (art_quick_invoke_stub+<span class="number">248</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">22</span> pc 000dff81  /apex/com.android.runtime/lib/libart.so (art::ArtMethod::Invoke(art::Thread*, unsigned <span class="keyword">int</span>*, unsigned <span class="keyword">int</span>, art::JValue*, <span class="keyword">char</span> <span class="keyword">const</span>*)+<span class="number">168</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">23</span> pc 00214963  /apex/com.android.runtime/lib/libart.so (art::interpreter::ArtInterpreterToCompiledCodeBridge(art::Thread*, art::ArtMethod*, art::ShadowFrame*, unsigned <span class="keyword">short</span>, art::JValue*)+<span class="number">270</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">24</span> pc 00210b57  /apex/com.android.runtime/lib/libart.so (bool art::interpreter::DoCall&lt;<span class="keyword">false</span>, <span class="keyword">false</span>&gt;(art::ArtMethod*, art::Thread*, art::ShadowFrame&amp;, art::Instruction <span class="keyword">const</span>*, unsigned <span class="keyword">short</span>, art::JValue*)+<span class="number">738</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">25</span> pc 00433fc3  /apex/com.android.runtime/lib/libart.so (MterpInvokeDirect+<span class="number">370</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">26</span> pc 000d2914  /apex/com.android.runtime/lib/libart.so (mterp_op_invoke_direct+<span class="number">20</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">27</span> pc 000cef4c  /data/dalvik-cache/arm/product<span class="meta">@app</span><span class="meta">@WebViewGoogle</span><span class="meta">@WebViewGoogle</span>.apk<span class="meta">@classes</span>.vdex (Mq.&lt;clinit&gt;+<span class="number">6</span>)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">28</span> pc 001f097f  /apex/com.android.runtime/lib/libart.so (_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb.llvm<span class="number">.6076538161558136159</span>+<span class="number">166</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">29</span> pc 001f5393  /apex/com.android.runtime/lib/libart.so (art::interpreter::EnterInterpreterFromEntryPoint(art::Thread*, art::CodeItemDataAccessor <span class="keyword">const</span>&amp;, art::ShadowFrame*)+<span class="number">122</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">30</span> pc 00426857  /apex/com.android.runtime/lib/libart.so (artQuickToInterpreterBridge+<span class="number">866</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.395</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">31</span> pc 000dc5a1  /apex/com.android.runtime/lib/libart.so (art_quick_to_interpreter_bridge+<span class="number">32</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.396</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">32</span> pc 000d7bc5  /apex/com.android.runtime/lib/libart.so (art_quick_invoke_stub_internal+<span class="number">68</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.396</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">33</span> pc 0043cf0f  /apex/com.android.runtime/lib/libart.so (art_quick_invoke_static_stub+<span class="number">246</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.396</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">34</span> pc 000dff95  /apex/com.android.runtime/lib/libart.so (art::ArtMethod::Invoke(art::Thread*, unsigned <span class="keyword">int</span>*, unsigned <span class="keyword">int</span>, art::JValue*, <span class="keyword">char</span> <span class="keyword">const</span>*)+<span class="number">188</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.396</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">35</span> pc <span class="number">00101405</span>  /apex/com.android.runtime/lib/libart.so (art::ClassLinker::InitializeClass(art::Thread*, art::Handle&lt;art::mirror::Class&gt;, bool, bool)+<span class="number">1916</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.396</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">36</span> pc 000f1533  /apex/com.android.runtime/lib/libart.so (art::ClassLinker::EnsureInitialized(art::Thread*, art::Handle&lt;art::mirror::Class&gt;, bool, bool)+<span class="number">58</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.396</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">37</span> pc 0041cb7f  /apex/com.android.runtime/lib/libart.so (artInitializeStaticStorageFromCode+<span class="number">58</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.396</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">38</span> pc 000d7f4f  /apex/com.android.runtime/lib/libart.so (art_quick_initialize_static_storage+<span class="number">30</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.396</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">39</span> pc 001f2cad  /data/dalvik-cache/arm/product<span class="meta">@app</span><span class="meta">@WebViewGoogle</span><span class="meta">@WebViewGoogle</span>.apk<span class="meta">@classes</span>.dex (org.chromium.base.BuildInfo.getAll+<span class="number">1244</span>)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.396</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">40</span> pc 000d7bc5  /apex/com.android.runtime/lib/libart.so (art_quick_invoke_stub_internal+<span class="number">68</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.396</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">41</span> pc 0043cf0f  /apex/com.android.runtime/lib/libart.so (art_quick_invoke_static_stub+<span class="number">246</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.396</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">42</span> pc 000dff95  /apex/com.android.runtime/lib/libart.so (art::ArtMethod::Invoke(art::Thread*, unsigned <span class="keyword">int</span>*, unsigned <span class="keyword">int</span>, art::JValue*, <span class="keyword">char</span> <span class="keyword">const</span>*)+<span class="number">188</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.396</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">43</span> pc 0037d187  /apex/com.android.runtime/lib/libart.so (art::(anonymous namespace)::InvokeWithArgArray(art::ScopedObjectAccessAlreadyRunnable <span class="keyword">const</span>&amp;, art::ArtMethod*, art::(anonymous namespace)::ArgArray*, art::JValue*, <span class="keyword">char</span> <span class="keyword">const</span>*)+<span class="number">54</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.396</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">44</span> pc 0037cf23  /apex/com.android.runtime/lib/libart.so (art::InvokeWithVarArgs(art::ScopedObjectAccessAlreadyRunnable <span class="keyword">const</span>&amp;, _jobject*, _jmethodID*, std::__va_list)+<span class="number">290</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.396</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">45</span> pc 002b9b7f  /apex/com.android.runtime/lib/libart.so (art::JNI::CallStaticObjectMethodV(_JNIEnv*, _jclass*, _jmethodID*, std::__va_list)+<span class="number">494</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.396</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">46</span> pc 00284481  /apex/com.android.runtime/lib/libart.so (art::(anonymous namespace)::CheckJNI::CallMethodV(<span class="keyword">char</span> <span class="keyword">const</span>*, _JNIEnv*, _jobject*, _jclass*, _jmethodID*, std::__va_list, art::Primitive::Type, art::InvokeType)+<span class="number">1156</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.396</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">47</span> pc 00276b9b  /apex/com.android.runtime/lib/libart.so (art::(anonymous namespace)::CheckJNI::CallStaticObjectMethodV(_JNIEnv*, _jclass*, _jmethodID*, std::__va_list)+<span class="number">38</span>) (BuildId: 9308663998d8b17a9d178f8a912ab83c)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">03</span>:<span class="number">32.396</span> <span class="number">19701</span> <span class="number">19775</span> F DEBUG   :       #<span class="number">48</span> pc 0181a5b7  /product/app/TrichromeLibrary/TrichromeLibrary.apk!libmonochrome.so (offset <span class="number">0x665000</span>) (BuildId: 18a4115359876ab8b15ee84fe29a2942a145ea8d)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">39</span>:<span class="number">09.679</span> <span class="number">16526</span> <span class="number">24176</span> F libc    : Fatal signal <span class="number">6</span> (SIGABRT), code <span class="number">0</span> (SI_USER) in tid <span class="number">24176</span> (thread_sp_norma), pid <span class="number">16526</span> (encent.mobileqq)</span><br><span class="line"><span class="number">04</span>-09 <span class="number">13</span>:<span class="number">39</span>:<span class="number">10.096</span> <span class="number">24236</span> <span class="number">24236</span> F DEBUG   : *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***</span><br></pre></td></tr></table></figure>
<p><strong>ApplicationPackageManager.getApplicationLabel和PackageItemInfo.loadLabel</strong><br>获取 应用名有问题<br>11.游戏这边webview内部会调用这个接口<br>终极方案 升级系统可以解决或者包体小于 2GB 解决</p>
<h5 id="chrome-版本"><a href="#chrome-版本" class="headerlink" title="chrome 版本"></a>chrome 版本</h5><p>1.oneplus8 </p>
<blockquote>
<p>04-10 17:13:48.169 18155 18175 I cr_LibraryLoader: Loaded native library version number “80.0.3987.99”<br><a href="https://forums.oneplus.com/threads/are-the-apps-suddenly-crashing-heres-the-solution-update-android-system-webview.1405651/">社区反馈</a></p>
</blockquote>
<p><a href="https://forums.oneplus.com/search/521198198/?q=webview&o=date&c%5Btitle_only%5D=1">过滤</a></p>
<p>2.系统webview版本漏洞 手机问题</p>
<p>3.Google Android System Bug<br><strong><a href="https://source.android.com/security/bulletin/">https://source.android.com/security/bulletin/</a></strong><br>[Bug][<a href="https://www.theverge.com/2021/3/22/22345696/google-android-apps-crashing-fix-system-webview]">https://www.theverge.com/2021/3/22/22345696/google-android-apps-crashing-fix-system-webview]</a></p>
<h5 id="apktool-反编译-回编重写签名"><a href="#apktool-反编译-回编重写签名" class="headerlink" title="apktool 反编译  回编重写签名"></a>apktool 反编译  回编重写签名</h5><blockquote>
<p>测试正常 apktool d xx.apk -o test/<br>apktool b test/ -o unsign.apk</p>
</blockquote>
<blockquote>
<p>apktool原理没有 特殊处理，小端字节等<br>apktool原理 编译和反编译 smalli 字节码</p>
</blockquote>
<span id="more"></span>

<blockquote>
<p>最后用apktool 反编译 回编出包</p>
</blockquote>
<h5 id="游戏多次收到回调问题"><a href="#游戏多次收到回调问题" class="headerlink" title="游戏多次收到回调问题"></a>游戏多次收到回调问题</h5><blockquote>
<p>SDK消息分发这里 打印日志 只发了一次 游戏收到多次说明多次注册 或者多次调用</p>
</blockquote>
<h5 id="aapt和aapt2-区别-为什么会有aapt2"><a href="#aapt和aapt2-区别-为什么会有aapt2" class="headerlink" title="aapt和aapt2 区别 为什么会有aapt2"></a>aapt和aapt2 区别 为什么会有aapt2</h5><blockquote>
<p>1.<strong>编译</strong>：将资源文件编译为二进制格式文件<br> <strong>链接</strong>：将编译后的所有文件合并，打包成一个单独文件</p>
</blockquote>
<blockquote>
<p>2.在aapt基础上做了优化</p>
</blockquote>
<blockquote>
<p>3.这种方式可以很好的提升资源的编译性能，比如只有一个资源文件发生改变时，你只需要重新编译改变的文件，然后将其与其他未改变的资源进行链接即可。而之前的aapt是将所有资源进行merge，merge完后将所有资源进行编译，产生一个资源ap_文件，该文件是一个压缩包，这样带来的后果就是即使只改变了一个资源文件，也要进行全量编译。</p>
</blockquote>
 </font>]]></content>
      <categories>
        <category>UE4</category>
      </categories>
      <tags>
        <tag>UE4WebView</tag>
      </tags>
  </entry>
  <entry>
    <title>unrealPackage</title>
    <url>/2021/11/10/Unreal/unrealPackage/</url>
    <content><![CDATA[<font size="2.9">

<h4 id="UE-打包iOS"><a href="#UE-打包iOS" class="headerlink" title="UE 打包iOS"></a>UE 打包iOS</h4><p>unreal :4.24<br>xcode: 12.5<br>macOS: macos Monterey (匹配 xcode 13.0)</p>
<pre><code>The Legacy Build System will be removed in a future release. You can configure the selected build system and this deprecation message in File &gt; Workspace Settings.
</code></pre>
<p>解决方法:   <code>匹配xcode 12.5</code></p>
<p>file -&gt; Workspace Settings -&gt;Build System:Legacy Build System (Deprecated) 改成 :New Build System  </p>
<p>下载低版本 Xcode  12.5 解决</p>
<p>在新系统中 会提示不兼容，但是不影响编译</p>
<h4 id="UE-配置-sign-In-apple"><a href="#UE-配置-sign-In-apple" class="headerlink" title="UE 配置 sign In apple"></a>UE 配置 sign In apple</h4><p>生成 项目.entitesment<br><code>https://forums.unrealengine.com/t/how-to-add-cloud-documnts-capatimitlty/82397</code></p>
<h4 id="开启苹果登录"><a href="#开启苹果登录" class="headerlink" title="开启苹果登录"></a>开启苹果登录</h4><p>unreal: 4.26<br>ios: 打包路径 \UE_4.26\Engine\Source\Programs\UnrealBuildTool\Platform\IOS\IOSExports.cs</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for Sign in with Apple</span></span><br><span class="line">				<span class="built_in">bool</span> bSignInWithAppleSupported = <span class="literal">false</span>;</span><br><span class="line">				PlatformGameConfig.GetBool(<span class="string">&quot;/Script/IOSRuntimeSettings.IOSRuntimeSettings&quot;</span>, <span class="string">&quot;bEnableSignInWithAppleSupport&quot;</span>, <span class="keyword">out</span> bSignInWithAppleSupported);</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (bSignInWithAppleSupported)</span><br><span class="line">				&#123;</span><br><span class="line">					Text.AppendLine(<span class="string">&quot;\t&lt;key&gt;com.apple.developer.applesignin&lt;/key&gt;&quot;</span>);</span><br><span class="line">					Text.AppendLine(<span class="string">&quot;\t&lt;array&gt;&lt;string&gt;Default&lt;/string&gt;&lt;/array&gt;&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<p>Engine\config\BaseEngine.ini</p>
<pre><code>[/Script/IOSRuntimeSettings.IOSRuntimeSettings]  
MinimumiOSVersion=IOS_13
bEnableSignInWithAppleSupport=True //key-value, key 容易写错
</code></pre>
<p>改完ini ,立刻生效</p>
<h4 id="导入证书报错，提示不存在"><a href="#导入证书报错，提示不存在" class="headerlink" title="导入证书报错，提示不存在"></a>导入证书报错，提示不存在</h4><blockquote>
<p>security import  dis证书.p12  -k ~/Library/Keychains/login.keychain</p>
</blockquote>
<h4 id="Ureal代码改变"><a href="#Ureal代码改变" class="headerlink" title="Ureal代码改变"></a>Ureal代码改变</h4><blockquote>
<p>Gaia 给4.27 代码合并到 4.24 暂时不能测试</p>
</blockquote>
</font>]]></content>
      <categories>
        <category>UE4</category>
      </categories>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
  <entry>
    <title>UEBase</title>
    <url>/2021/12/12/Unreal/ueBase/</url>
    <content><![CDATA[<font size="2.9">

<h2 id="Blueprint（蓝图）-Node"><a href="#Blueprint（蓝图）-Node" class="headerlink" title="Blueprint（蓝图） Node"></a>Blueprint（蓝图） Node</h2><h3 id="Event类型节点"><a href="#Event类型节点" class="headerlink" title="Event类型节点"></a>Event类型节点</h3><h5 id="EventBeginPlay-节点"><a href="#EventBeginPlay-节点" class="headerlink" title="EventBeginPlay 节点"></a>EventBeginPlay 节点</h5><h5 id="OnActorBeginOverlap-节点"><a href="#OnActorBeginOverlap-节点" class="headerlink" title="OnActorBeginOverlap 节点"></a>OnActorBeginOverlap 节点</h5><h5 id="OnComponentBeginOverlap-节点"><a href="#OnComponentBeginOverlap-节点" class="headerlink" title="OnComponentBeginOverlap 节点"></a>OnComponentBeginOverlap 节点</h5><h5 id="键盘响应事件-节点"><a href="#键盘响应事件-节点" class="headerlink" title="键盘响应事件 节点"></a>键盘响应事件 节点</h5><font size="2.9">]]></content>
      <categories>
        <category>UE4</category>
      </categories>
      <tags>
        <tag>Base</tag>
      </tags>
  </entry>
  <entry>
    <title>openssl</title>
    <url>/2022/01/10/Android/AndroidJNI/openssl/</url>
    <content><![CDATA[<font size="2.9">

<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>1.Java加密（Aes/cbf/nopading）,非常耗时每次150ms<br>2.java.net.URLEncoder也非常耗时，110ms</p>
<h4 id="Google-查阅都是（AES-cbc-ebc-rpc5pading）"><a href="#Google-查阅都是（AES-cbc-ebc-rpc5pading）" class="headerlink" title="Google 查阅都是（AES/cbc/ebc/rpc5pading）"></a>Google 查阅都是（AES/cbc/ebc/rpc5pading）</h4><p>不满足需要</p>
<h4 id="openssl"><a href="#openssl" class="headerlink" title="openssl"></a>openssl</h4><p>1.官方下载 1.1.1m Android 目录编译<br>Android NDK 16以上放弃了gcc, mac 下 clang90 -unargeement ‘mandroid’ 未知错误，暂时没有解决</p>
<p>2.cocos2d-x-v4版本 自带crypto.a  version: 1.1.0<br>在 Mac下Androidstudio  编译 arm64-v8a 报错’ ld: error: relocation R_AARCH64_PREL64 cannot be used against symbol OPENSSL_armcap_P; recompile with -fPIC’  官方下载无法编译 so…..</p>
<p>3.cocos-creator-3.4版本<br> ld: error: relocation R_AARCH64_PREL64 cannot be used against symbol OPENSSL_armcap_P; recompile with -fPIC</p>
<p> 路径：” ld: error: relocation R_AARCH64_PREL64 cannot be used against symbol OPENSSL_armcap_P; recompile with -fPIC”</p>
<p> “E:\CocosDashboard_1.0.20\resources.editors\Creator\3.4.0\resources\resources\3d\engine-native\external\android\arm64-v8a”<br> 拷贝最新的 （1.1.1g）</p>
<p>4 strings libcrypto.a | grep “^OpenSSL”   </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">OpenSSL_version</span><br><span class="line">OpenSSL_version_num</span><br><span class="line">OpenSSL CMAC method</span><br><span class="line">OpenSSL <span class="keyword">default</span></span><br><span class="line">OpenSSL <span class="number">1.1</span><span class="number">.1</span>g  <span class="number">21</span> Apr <span class="number">2020</span></span><br><span class="line">OpenSSL PKCS#<span class="number">3</span> DH method</span><br><span class="line">OpenSSL X9<span class="number">.42</span> DH method</span><br><span class="line">OpenSSL DH Method</span><br><span class="line">OpenSSL DSA method</span><br><span class="line">OpenSSL DSA method</span><br><span class="line">OpenSSL <span class="string">&#x27;dlfcn&#x27;</span> shared library method</span><br><span class="line">OpenSSL EC algorithm</span><br><span class="line">OpenSSL EC_KEY method</span><br><span class="line">OpenSSL X25519 algorithm</span><br><span class="line">OpenSSL X448 algorithm</span><br><span class="line">OpenSSL ED25519 algorithm</span><br><span class="line">OpenSSL ED448 algorithm</span><br><span class="line">OpenSSL HMAC method</span><br><span class="line">OpenSSL POLY1305 method</span><br><span class="line">OpenSSL NIST SP <span class="number">800</span><span class="number">-90</span>A DRBG</span><br><span class="line">OpenSSL RSA method</span><br><span class="line">OpenSSL RSA-PSS method</span><br><span class="line">OpenSSL PKCS#<span class="number">1</span> RSA</span><br><span class="line">OpenSSL SIPHASH method</span><br><span class="line">OpenSSL <span class="literal">NULL</span> UI</span><br><span class="line">OpenSSL <span class="keyword">default</span> user interface</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>5 .<a href="https://github.com/cocos2d/cocos2d-x-3rd-party-libs-src">https://github.com/cocos2d/cocos2d-x-3rd-party-libs-src</a></p>
<p>默认编译 ndk-r10 ,android-api = 9<br>可以编译arm-v7a 但是arm64-v8a不行</p>
<p>6.暂时从cocos-creator里面拷贝出来</p>
<p>7.现在拷贝出来的是静态库 ，在Android 链接静态库 生成动态库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">28</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        minSdkVersion rootProject.ext.GASDK_MINSDKVERSION</span><br><span class="line">        targetSdkVersion <span class="number">30</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">&quot;1.0&quot;</span></span><br><span class="line"></span><br><span class="line">        testInstrumentationRunner <span class="string">&quot;androidx.telibst.runner.AndroidJUnitRunner&quot;</span></span><br><span class="line">        externalNativeBuild &#123;</span><br><span class="line">            cmake &#123;</span><br><span class="line">                cppFlags <span class="string">&quot;-std=c++11 -frtti -fexceptions&quot;</span></span><br><span class="line">                <span class="comment">//arguments &#x27;-DANDROID_STL=c++_shared&#x27; //会生成libc++_shared.so动态库 有和其他冲突的风险，</span></span><br><span class="line">                <span class="comment">//libc++_shared.so 公用的资源全局变量线程等</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ndk &#123;</span><br><span class="line">           <span class="comment">// stl = &quot;c++_shared&quot;</span></span><br><span class="line">            abiFilters <span class="string">&#x27;armeabi-v7a&#x27;</span>,<span class="string">&#x27;x86&#x27;</span>,<span class="string">&#x27;arm64-v8a&#x27;</span></span><br><span class="line">            <span class="comment">//, &#x27;arm64-v8a&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// The following argument makes the Android Test Orchestrator run its</span></span><br><span class="line">        <span class="comment">// &quot;pm clear&quot; command after each test invocation. This command ensures</span></span><br><span class="line">        <span class="comment">// that the app&#x27;s state is completely cleared between tests.</span></span><br><span class="line">        testInstrumentationRunnerArguments clearPackageData: <span class="string">&#x27;true&#x27;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>7 CmakeList.txt</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//crypto 加密库，ssl.a ssl网络相关</span></span><br><span class="line"><span class="built_in">add_library</span>(crypto STATIC IMPORTED)</span><br><span class="line"><span class="built_in">set_target_properties</span>(</span><br><span class="line">        crypto  #这个一般是.a文件去掉lib和后缀之后的名字，</span><br><span class="line">        PROPERTIES IMPORTED_LOCATION</span><br><span class="line">        $&#123;CMAKE_SOURCE_DIR&#125;/../jniLibs/$&#123;ANDROID_ABI&#125;/libcrypto.a    #.a文件的路径， $&#123;CMAKE_SOURCE_DIR&#125;这个是cpp下的路径</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

</font>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>openssl,c++</tag>
      </tags>
  </entry>
  <entry>
    <title>视频解码基础</title>
    <url>/2021/11/18/Android/audioVideo/%E6%96%87%E6%A1%A300-%E9%9F%B3%E8%A7%86%E9%A2%91%E6%A0%BC%E5%BC%8F%E5%B0%81%E8%A3%85%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<font size="2.9">

<h3 id="视频解码基础01-封裝格式"><a href="#视频解码基础01-封裝格式" class="headerlink" title="视频解码基础01-封裝格式"></a>视频解码基础01-封裝格式</h3><h4 id="二、视频文件封装格式"><a href="#二、视频文件封装格式" class="headerlink" title="二、视频文件封装格式"></a>二、视频文件封装格式</h4><p>封装格式（也叫容器），就是将已经编码压缩好的视频轨和音频轨按照一定的格式放到一个文件中，也就是说仅仅是一个外壳，或者大家把它当成一个放视频轨和音频轨的文件夹也可以。说得通俗点，视频轨相当于饭，而音频轨相当于菜，封装格式就是一个碗，或者一个锅，用来盛放饭菜的容器。 下面是几种常用的 <strong>视频文件后缀类型</strong> 与其相对应的 <strong>封装格式</strong>。</p>
<table>
<thead>
<tr>
<th>视频文件格式</th>
<th>视频封装格式</th>
</tr>
</thead>
<tbody><tr>
<td><strong>.avi</strong></td>
<td>AVI（Audio Video Interleaved）</td>
</tr>
<tr>
<td><strong>.wmv、.asf</strong></td>
<td>WMV（Windows Media Video）</td>
</tr>
<tr>
<td><strong>.mpg、.mpeg、.vob、.dat、.3gp、.mp4</strong></td>
<td>MPEG（Moving Picture Experts Group）</td>
</tr>
<tr>
<td><strong>.mkv</strong></td>
<td>Matroska</td>
</tr>
<tr>
<td><strong>.rm、.rmvb</strong></td>
<td>Real Video</td>
</tr>
<tr>
<td><strong>.mov</strong></td>
<td>QuickTime File Format</td>
</tr>
<tr>
<td><strong>.flv</strong></td>
<td>Flash Video</td>
</tr>
</tbody></table>
<h4 id="三、-音视频编码方式简介"><a href="#三、-音视频编码方式简介" class="headerlink" title="三、 音视频编码方式简介"></a>三、 音视频编码方式简介</h4><h5 id="1、视频编码方式"><a href="#1、视频编码方式" class="headerlink" title="1、视频编码方式"></a>1、视频编码方式</h5><ul>
<li><strong>视频编码的作用：</strong> 将视频像素数据（<strong>RGB，YUV</strong> 等）压缩成视频码流，从而降低视频的数据量。</li>
</ul>
<table>
<thead>
<tr>
<th><strong>HEVC（H.265）</strong></th>
<th><strong>MPEG/ITU-T</strong></th>
<th>2013</th>
<th>研发中</th>
</tr>
</thead>
<tbody><tr>
<td>名称</td>
<td>推出机构</td>
<td>推出时间</td>
<td>目前使用领域</td>
</tr>
<tr>
<td><strong>H.264</strong></td>
<td><strong>MPEG/ITU-T</strong></td>
<td>2003</td>
<td>各个领域</td>
</tr>
<tr>
<td><strong>MPEG4</strong></td>
<td><strong>MPEG</strong></td>
<td>2001</td>
<td>不温不火</td>
</tr>
<tr>
<td><strong>MPEG2</strong></td>
<td><strong>MPEG</strong></td>
<td>1994</td>
<td>数字电视</td>
</tr>
<tr>
<td><strong>VP9</strong></td>
<td>Google</td>
<td>2013</td>
<td>研发中</td>
</tr>
<tr>
<td><strong>VP8</strong></td>
<td>Google</td>
<td>2008</td>
<td>不普及</td>
</tr>
<tr>
<td><strong>VC-1</strong></td>
<td>Microsoft Inc.</td>
<td>2006</td>
<td>微软平台</td>
</tr>
</tbody></table>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h4 id="四-音频编码方式"><a href="#四-音频编码方式" class="headerlink" title="四, 音频编码方式"></a>四, 音频编码方式</h4><p><strong>音频编码的作用：</strong> 将音频采样数据（<strong>PCM</strong> 等）压缩成音频码流，从而降低音频的数据量。 常用的音频编码方式有以下几种：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>推出机构</th>
<th>推出时间</th>
<th>目前使用领域</th>
</tr>
</thead>
<tbody><tr>
<td><strong>AAC</strong></td>
<td><strong>MPEG</strong></td>
<td>1997</td>
<td>各个领域（新）</td>
</tr>
<tr>
<td><strong>MP3</strong></td>
<td><strong>MPEG</strong></td>
<td>1993</td>
<td>各个领域（旧）</td>
</tr>
<tr>
<td><strong>WMV</strong></td>
<td><strong>Microsoft Inc.</strong></td>
<td>1999</td>
<td>微软平台</td>
</tr>
<tr>
<td><strong>AC-3</strong></td>
<td><strong>Dolby Inc.</strong></td>
<td>1992</td>
<td>电影</td>
</tr>
</tbody></table>
<h5 id="1-MP3"><a href="#1-MP3" class="headerlink" title="1  MP3"></a>1  MP3</h5><p><strong>MP3</strong>，英文全称 <strong>MPEG-1 or MPEG-2 Audio Layer III</strong>，是曾经非常流行的一种数字音频编码和有损压缩格式，它被设计来大幅降低音频数据量。它是在 <strong>1991</strong> 年，由位于德国埃尔朗根的研究组织 <strong>Fraunhofer-Gesellschaft</strong> 的一组工程师发明和标准化的。<strong>MP3</strong> 的普及，曾对音乐产业造成极大的冲击与影响。</p>
<h5 id="2-AAC"><a href="#2-AAC" class="headerlink" title="2 AAC"></a>2 AAC</h5><p><strong>AAC</strong>，英文全称 <strong>Advanced Audio Coding</strong>，是由 <strong>Fraunhofer IIS</strong>、杜比实验室、<strong>AT&amp;T</strong>、<strong>Sony</strong> 等公司共同开发，在 <strong>1997</strong> 年推出的基于 <strong>MPEG-2</strong> 的音频编码技术。<strong>2000</strong> 年，<strong>MPEG-4</strong> 标准出现后，<strong>AAC</strong> 重新集成了其特性，加入了 <strong>SBR</strong> 技术和 <strong>PS</strong> 技术，为了区别于传统的 <strong>MPEG-2 AAC</strong> 又称为 <strong>MPEG-4 AAC</strong>。 <strong>AAC</strong> 比 <strong>MP3</strong> 有更高的压缩比，同样大小的音频文件，<strong>AAC</strong> 的音质更高。</p>
<h5 id="3-WMA"><a href="#3-WMA" class="headerlink" title="3 WMA"></a>3 WMA</h5><p><strong>WMA</strong>，英文全称 <strong>Windows Media Audio</strong>，由微软公司开发的一种数字音频压缩格式，本身包括有损和无损压缩格式。</p>
<p>​        我们播放的视频文件一般都是用一种<strong>封装格式</strong>封装起来的，封装格式的作用是什么呢？一般视频文件里不光有视频，还有音频，封装格式的作用就是把视频和音频打包起来。 所以我们先要<strong>解封装格式</strong>，看有哪些视频流和哪些音频流，此时的音频流和视频流都还是<strong>压缩数据</strong>，不能直接用于显示的，这就需要<strong>解码</strong>。下面是播放一个视频文件时的流程图。</p>
<p><img src="/images/4.webp" alt="1"></p>
<p>FFmpeg  视频文件  是一个容器  (视频流（H264）  音频流(aac))</p>
</font>



]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>H264</tag>
      </tags>
  </entry>
  <entry>
    <title>视频压缩技术原理</title>
    <url>/2021/11/18/Android/audioVideo/%E6%96%87%E6%A1%A301-%E8%A7%86%E9%A2%91%E5%8E%8B%E7%BC%A9%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<font size="2.9">

<p>H264视频压缩算法现在无疑是所有视频压缩技术中使用最广泛，</p>
<p>最流行的。随着 x264/openh264以及ffmpeg等开源库的推出，大多数使用者无需再对H264的细节做过多的研究，这大降低了人们使用H264的成本。</p>
<p>但为了用好H264，我们还是要对H264的基本原理弄清楚才行。今天我们就来看看H264的基本原理。</p>
<h2 id="H264概述"><a href="#H264概述" class="headerlink" title="H264概述"></a>H264概述</h2><p><img src="/images/30.png" alt="img"></p>
<p>H264压缩技术主要采用了以下几种方法对视频数据进行压缩。包括：</p>
<p>　　帧内预测压缩，解决的是空域数据冗余问题。<br>　　帧间预测压缩（运动估计与补偿），解决的是时域数据冗徐问题。<br>　　整数离散余弦变换（DCT），将空间上的相关性变为频域上无关的数据然后进行量化。<br>　　CABAC压缩。</p>
<p>经过压缩后的帧分为：I帧，P帧和B帧:</p>
<p>　　I帧：关键帧，采用帧内压缩技术。<br>　　P帧：向前参考帧，在压缩时，只参考前面已经处理的帧。采用帧音压缩技术。<br>　　B帧：双向参考帧，在压缩时，它即参考前而的帧，又参考它后面的帧。采用帧间压缩技术。</p>
<p>除了I/P/B帧外，还有图像序列GOP。</p>
<p>　　GOP:两个I帧之间是一个图像序列，在一个图像序列中只有一个I帧。如下图所示：</p>
<p><img src="/images/31.png" alt="img"></p>
<p>下面我们就来详细描述一下H264压缩技术。</p>
<h2 id="H264压缩技术"><a href="#H264压缩技术" class="headerlink" title="H264压缩技术"></a>H264压缩技术</h2><p>H264的基本原理其实非常简单，下我们就简单的描述一下H264压缩数据的过程。通过摄像头采集到的视频帧（按每秒 30 帧算），被送到 H264 编码器的缓冲区中。编码器先要为每一幅图片划分宏块。</p>
<p>以下面这张图为例:</p>
<p><img src="/images/32.webp" alt="img"></p>
<h3 id="划分宏块"><a href="#划分宏块" class="headerlink" title="划分宏块"></a>划分宏块</h3><p>H264默认是使用 16X16 大小的区域作为一个宏块，也可以划分成 8X8 大小。</p>
<p><img src="/images/33.webp" alt="img"></p>
<p>划分好宏块后，计算宏块的象素值。</p>
<p><img src="/images/34.webp" alt="img"></p>
<p>以此类推，计算一幅图像中每个宏块的像素值，所有宏块都处理完后如下面的样子。</p>
<p><img src="/images/35.webp" alt="img"></p>
<h3 id="划分子块"><a href="#划分子块" class="headerlink" title="划分子块"></a>划分子块</h3><p>H264对比较平坦的图像使用 16X16 大小的宏块。但为了更高的压缩率，还可以在 16X16 的宏块上更划分出更小的子块。子块的大小可以是 8X16､ 16X8､ 8X8､ 4X8､ 8X4､ 4X4非常的灵活。</p>
<p><img src="/images/36.webp" alt="img"></p>
<p>上幅图中，红框内的 16X16 宏块中大部分是蓝色背景，而三只鹰的部分图像被划在了该宏块内，为了更好的处理三只鹰的部分图像，H264就在 16X16 的宏块内又划分出了多个子块。</p>
<p><img src="/images/37.webp" alt="img"></p>
<p>这样再经过帧内压缩，可以得到更高效的数据。下图是分别使用mpeg-2和H264对上面宏块进行压缩后的结果。其中左半部分为MPEG-2子块划分后压缩的结果，右半部分为H264的子块划压缩后的结果，可以看出H264的划分方法更具优势。</p>
<p><img src="/images/39.png" alt="img"></p>
<p>宏块划分好后，就可以对H264编码器缓存中的所有图片进行分组了。</p>
<h3 id="帧分组"><a href="#帧分组" class="headerlink" title="帧分组"></a>帧分组</h3><p>对于视频数据主要有两类数据冗余，一类是时间上的数据冗余，另一类是空间上的数据冗余。其中时间上的数据冗余是最大的。下面我们就先来说说视频数据时间上的冗余问题。</p>
<p>为什么说时间上的冗余是最大的呢？假设摄像头每秒抓取30帧，这30帧的数据大部分情况下都是相关联的。也有可能不止30帧的的数据，可能几十帧，上百帧的数据都是关联特别密切的。</p>
<p>对于这些关联特别密切的帧，其实我们只需要保存一帧的数据，其它帧都可以通过这一帧再按某种规则预测出来，所以说视频数据在时间上的冗余是最多的。</p>
<p>为了达到相关帧通过预测的方法来压缩数据，就需要将视频帧进行分组。那么如何判定某些帧关系密切，可以划为一组呢？我们来看一下例子，下面是捕获的一组运动的台球的视频帧，台球从右上角滚到了左下角。</p>
<p><img src="/images/40.webp" alt="img"></p>
<p><img src="/images/41.webp" alt="img"></p>
<p>没有运动补偿的时候  120fps     60fps   60帧电影  视频画面是没有提升</p>
<p>120fps    60帧视频  60帧虚拟帧</p>
<p>H264编码器会按顺序，每次取出两幅相邻的帧进行宏块比较，计算两帧的相似度。如下图：</p>
<p><img src="/images/42.webp" alt="img"></p>
<p>通过宏块扫描与宏块搜索可以发现这两个帧的关联度是非常高的。进而发现这一组帧的关联度都是非常高的。因此，上面这几帧就可以划分为一组。其算法是：<strong>在相邻几幅图像画面中，一般有差别的像素只有10%以内的点,亮度差值变化不超过2%，而色度差值的变化只有1%以内，我们认为这样的图可以分到一组。</strong></p>
<p>在这样一组帧中，经过编码后，我们只保留第一帖的完整数据，其它帧都通过参考上一帧计算出来。我们称第一帧为<strong>IDR／I帧</strong>，其它帧我们称为<strong>P／B帧</strong>，这样编码后的数据帧组我们称为<strong>GOP</strong>。</p>
<h3 id="运动估计与补偿"><a href="#运动估计与补偿" class="headerlink" title="运动估计与补偿"></a>运动估计与补偿</h3><p>在H264编码器中将帧分组后，就要计算帧组内物体的运动矢量了。还以上面运动的台球视频帧为例，我们来看一下它是如何计算运动矢量的。</p>
<p>H264编码器首先按顺序从缓冲区头部取出两帧视频数据，然后进行宏块扫描。当发现其中一幅图片中有物体时，就在另一幅图的邻近位置（搜索窗口中）进行搜索。如果此时在另一幅图中找到该物体，那么就可以计算出物体的运动矢量了。下面这幅图就是搜索后的台球移动的位置。</p>
<p><img src="/images/43.png" alt="img"></p>
<p> 抖音 —-》视频  1M  9M   </p>
<p>通过上图中台球位置相差，就可以计算出台图运行的方向和距离。H264依次把每一帧中球移动的距离和方向都记录下来就成了下面的样子。</p>
<p><img src="/images/44.png" alt="img"></p>
<p>运动矢量计算出来后，将相同部分（也就是绿色部分）减去，就得到了补偿数据。我们最终只需要将补偿数据进行压缩保存，以后在解码时就可以恢复原图了。压缩补偿后的数据只需要记录很少的一点数据。如下所示：</p>
<p><img src="/images/45.png" alt="img"></p>
<p>我们把运动矢量与补偿称为<strong>帧间压缩技术</strong>，它解决的是视频帧在时间上的数据冗余。除了帧间压缩，帧内也要进行数据压缩，帧内数据压缩解决的是空间上的数据冗余。下面我们就来介绍一下帧内压缩技术。</p>
<h3 id="帧内预测"><a href="#帧内预测" class="headerlink" title="帧内预测"></a>帧内预测</h3><p>人眼对图象都有一个识别度，对低频的亮度很敏感，对高频的亮度不太敏感。所以基于一些研究，可以将一幅图像中人眼不敏感的数据去除掉。这样就提出了帧内预测技术。</p>
<p>H264的帧内压缩与JPEG很相似。一幅图像被划分好宏块后，对每个宏块可以进行 9 种模式的预测。找出与原图最接近的一种预测模式。</p>
<p><img src="/images/46.webp" alt="img"></p>
<p>下面这幅图是对整幅图中的每个宏块进行预测的过程。</p>
<p><img src="/images/145.webp" alt="img"></p>
<p>帧内预测后的图像与原始图像的对比如下：</p>
<p><img src="/images/146.webp" alt="img"></p>
<p>然后，将原始图像与帧内预测后的图像相减得残差值。</p>
<p><img src="/images/1307424-20181107191253955-1987839456.png" alt="img"></p>
<p>再将我们之前得到的预测模式信息一起保存起来，这样我们就可以在解码时恢复原图了。效果如下：</p>
<p><img src="/images/1307424-20181107191259057-1084466018.png" alt="img"></p>
<p>经过帧内与帧间的压缩后，虽然数据有大幅减少，但还有优化的空间。</p>
<h3 id="对残差数据做DCT"><a href="#对残差数据做DCT" class="headerlink" title="对残差数据做DCT"></a>对残差数据做DCT</h3><p>可以将残差数据做整数离散余弦变换，去掉数据的相关性，进一步压缩数据。如下图所示，左侧为原数据的宏块，右侧为计算出的残差数据的宏块。</p>
<p><img src="/images/1307424-20181107191314043-1719104258.png" alt="img"></p>
<p>将残差数据宏块数字化后如下图所示：</p>
<p><img src="/images/1307424-20181107191318906-1060673182.png" alt="img"></p>
<p>将残差数据宏块进行 DCT 转换。</p>
<p><img src="/images/1307424-20181107191325145-505363573.png" alt="img"></p>
<p>去掉相关联的数据后，我们可以看出数据被进一步压缩了。</p>
<p><img src="/images/1307424-20181107191330244-1287304627.png" alt="img"></p>
<p>做完 DCT 后，还不够，还要进行 CABAC 进行无损压缩。</p>
<h3 id="DCT原理大白话"><a href="#DCT原理大白话" class="headerlink" title="DCT原理大白话"></a>DCT原理大白话</h3><p> 这是第一帧画面：P1（我们的参考帧） </p>
<p><img src="/images/50.jpg" alt="50"></p>
<p> 这是第二帧画面：P2（需要编码的帧） </p>
<p><img src="/images/51.jpg" alt="50"></p>
<p> 从视频中截取的两张间隔1-2秒的画面，和实际情况类似，下面我们进行几次运动搜索： </p>
<p> 这是一个演示程序，鼠标选中P2上任意<strong>16x16</strong>的Block，即可搜索出<strong>P1上的 BestMatch</strong> 宏块。虽然车辆在运动，从远到近，但是依然找到了最接近的宏块坐标。 </p>
<p><img src="/images/53.jpg" alt="50"></p>
<p> 这是一个演示程序，鼠标选中P2上任意16x16的Block，即可搜索出P1上的 BestMatch 宏块。虽然车辆在运动，从远到近，但是依然找到了最接近的宏块坐标。 </p>
<p> 搜索演示2：空中电线交叉位置（上图P1，下图P2） </p>
<p><img src="/images/55.jpg" alt="50"></p>
<p><img src="/images/54.jpg" alt="50"></p>
<p> 同样顺利在P1中找到最接近P2里海报的宏块位置。 </p>
<p> 图片全搜索：根据P1和运动矢量数据（在P2中搜索到每一个宏块在P1中最相似的位置集合）还原出来的P2’，即完全用P1各个位置的宏块拼凑出来最像P2的图片P2’，效果如下： </p>
<p><img src="/images/56.jpg" alt="50"></p>
<h5 id="仔细观察，有些支离破碎对吧？肯定啊，拼凑出来的东西就是这样，现在我们用P2-和P2像素相减，得到差分图-D2-P2’-P2-2-0x80："><a href="#仔细观察，有些支离破碎对吧？肯定啊，拼凑出来的东西就是这样，现在我们用P2-和P2像素相减，得到差分图-D2-P2’-P2-2-0x80：" class="headerlink" title="仔细观察，有些支离破碎对吧？肯定啊，拼凑出来的东西就是这样，现在我们用P2`和P2像素相减，得到差分图 D2 = (P2’ - P2) / 2 + 0x80："></a>仔细观察，有些支离破碎对吧？肯定啊，拼凑出来的东西就是这样，现在我们用P2`和P2像素相减，得到差分图 D2 = (P2’ - P2) / 2 + 0x80：</h5><p><img src="/images/57.jpg" alt="50"></p>
<p> 这就是之前支离破碎的 P2` 加上误差 D2之后变成了清晰可见的样子，基本还原了原图P2。 </p>
<p><img src="/images/58.jpg" alt="50"></p>
<p> 由于D2仅仅占5KB，加上压缩过后的运动矢量不过7KB，所以参考P1我们只需要额外 7KB的数据量就可以完整表示P2了，而如果独立将P2用质量尚可的有损压缩方式独立压缩，则至少要去到50-60KB，这一下节省了差不多8倍的空间，正就是所谓运动编码的基本原理。 </p>
<p> 实际在使用中，参考帧并不一定是前面一帧，也不一定是同一个GOP的I帧，因为GOP间隔较长时，后面的图片离I帧变化可能已经很大了，因此常见做法是最近15帧中选择一帧误差最小的作为参考帧，虽然彩色画面有YUV三个分量，但是大量的预测工作和最有选择通常是根据Y分量的灰度帧进行判断的。 </p>
<p> 再者误差我们保存的是（P2-P2’）/2 + 0x80，实际使用时我们会用更有效率的方式，比如让[-64,64]之间的色差精度为1，[-255,-64], [64, 255] 之间的色差精度为2-3，这样会更加真实一些。 </p>
<p> 同时上文很多地方用的是直接lzma2进行简单存储，实际使用时一般会引入熵编码，对数据进行一定层次的整理然后再压缩，性能会好不少。 </p>
<h3 id="CABAC"><a href="#CABAC" class="headerlink" title="CABAC"></a>CABAC</h3><p>上面的帧内压缩是属于有损压缩技术。也就是说图像被压缩后，无法完全复原。而CABAC属于无损压缩技术。</p>
<p>无损压缩技术大家最熟悉的可能就是哈夫曼编码了，给高频的词一个短码，给低频词一个长码从而达到数据压缩的目的。MPEG-2中使用的VLC就是这种算法，我们以 A-Z 作为例子，A属于高频数据，Z属于低频数据。看看它是如何做的。</p>
<p><img src="/images/1307424-20181107191345116-277907586.png" alt="img"></p>
<p>CABAC也是给高频数据短码，给低频数据长码。同时还会根据上下文相关性进行压缩，这种方式又比VLC高效很多。其效果如下：</p>
<p><img src="/images/1307424-20181107191350500-1400387362.png" alt="img"></p>
<p>现在将 A-Z 换成视频帧，它就成了下面的样子。</p>
<p><img src="/images/1307424-20181107191355172-2085276841.png" alt="img"></p>
<p>从上面这张图中明显可以看出采用 CACBA 的无损压缩方案要比 VLC 高效的多。</p>
</font>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>H264</tag>
      </tags>
  </entry>
  <entry>
    <title>H264编码(帧内预测)</title>
    <url>/2021/11/18/Android/audioVideo/%E6%96%87%E6%A1%A302-%E5%B8%A7%E5%86%85%E9%A2%84%E6%B5%8B/</url>
    <content><![CDATA[<font size="2.9">

<h4 id="H264编码-帧内预测"><a href="#H264编码-帧内预测" class="headerlink" title="H264编码(帧内预测)"></a>H264编码(帧内预测)</h4><blockquote>
<p><strong>预测？</strong>总感觉这个词有股神奇的力量,能够将你引向未来</p>
<p>是不是这样呢~</p>
<p>那么</p>
<p>帧内预测是不是力量更大呢</p>
<p>它又有什么样的作用呢？</p>
<p>帧内预测可以防止视频产生锯齿现象。</p>
</blockquote>
<p>在帧内预测模式中，预测块P是基于已编码重建块和当前块形成的。对亮度像素而言，P块用于4×4子块或者16×16宏块的相关操作。4×4亮度子块有9种可选预测模式，独立预测每一个4×4亮度子块，适用于带有大量细节的图像编码；16×16亮度块有4种预测模式，预测整个16×16亮度块，适用于平坦区域图像编码；色度块也有4种预测模式，类似于16×16亮度块预测模式。编码器通常选择使P块和编码块之间差异最小的预测模式。</p>
<p>4×4亮度预测模式</p>
<p>如图6.14所示，4×4亮度块的上方和左方像素A～M为已编码和重构像素，用作编解码器中的预测参考像素。a～p为待预测像素，利用A～M值和9种模式实现。其中模式2(DC预测)根据A～M中已编码像素预测，而其余模式只有在所需预测像素全部提供才能使用。图6.15箭头表明了每种模式预测方向。对模式3～8，预测像素由A～M加权平均而得。例如，模式4中，d=round(B/4+C/2+D/4)。</p>
<p><img src="/images/13.png" alt="img"></p>
<p><img src="/images/14.png" alt="img"></p>
<p><img src="/images/15.png" alt="img"></p>
<table>
<thead>
<tr>
<th align="left">模式</th>
<th align="left">描 述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">模式0（垂直）</td>
<td align="left">由A、B、C、D 垂直推出相应像素值</td>
</tr>
<tr>
<td align="left">模式1（水平）</td>
<td align="left">由I、J、K、L 水平推出相应像素值</td>
</tr>
<tr>
<td align="left">模式2（DC）</td>
<td align="left">由A<del>D 及I</del>L 平均值推出所有像素值</td>
</tr>
<tr>
<td align="left">模式3（下左对角线）</td>
<td align="left">由45°方向像素内插得出相应像素值</td>
</tr>
<tr>
<td align="left">模式4（下右对角线）</td>
<td align="left">由45°方向像素内插得出相应像素值</td>
</tr>
<tr>
<td align="left">模式5（右垂直）</td>
<td align="left">由26.6°方向像素值内插得出相应像素值</td>
</tr>
<tr>
<td align="left">模式6（下水平）</td>
<td align="left">由26.6°方向像素值内插得出相应像素值</td>
</tr>
<tr>
<td align="left">模式7（左垂直）</td>
<td align="left">由26.6° 方向像素值内插得出相应像素值</td>
</tr>
<tr>
<td align="left">模式8（上水平）</td>
<td align="left">由26.6° 方向像素值内插得出相应像素值</td>
</tr>
</tbody></table>
<p><img src="/images/16.png" alt="img"></p>
<p><img src="/images/17.png" alt="img"></p>
<p>表2 16×16预测模式</p>
<p><img src="/images/18.png" alt="img"></p>
<table>
<thead>
<tr>
<th align="left">模式</th>
<th align="left">描 述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">模式0（垂直）</td>
<td align="left">由上边像素推出相应像素值</td>
</tr>
<tr>
<td align="left">模式1（水平）</td>
<td align="left">由左边像素推出相应像素值</td>
</tr>
<tr>
<td align="left">模式2（DC）</td>
<td align="left">由上边和左边像素平均值推出相应像素值</td>
</tr>
<tr>
<td align="left">模式3（平面）</td>
<td align="left">利用线形“plane”函数及左、上像素推出相应像素值，适用于亮度变化平缓区域</td>
</tr>
</tbody></table>
<p>8×8色度块预测模式</p>
<p>每个帧内编码宏块的8×8色度成分由已编码左上方色度像素预测而得，两种色度成分常用同一种预测模式。</p>
<p>4种预测模式类似于帧内16×16预测的4种预测模式，只是模式编号不同。其中DC（模式0）、水平（模式1）、垂直（模式2）、平面（模式3）。</p>
<p><img src="/images/19.png" alt="img"></p>
<p>对于当前块C, 编解码器按照如下方法计算</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">probableprediction mode＝</span><br><span class="line"></span><br><span class="line">​          min&#123;prediction mode of A, predictionmodes of B&#125;</span><br><span class="line"></span><br><span class="line">当A (或者 B）的预测模式不可用时，</span><br><span class="line"></span><br><span class="line">​         prediction mode of A＝ 2.</span><br></pre></td></tr></table></figure>

<p>例如</p>
<p>  A 和 B块的预测模式分别为 3 和1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">most probable mode for block C =1</span><br></pre></td></tr></table></figure>





<p>编码器为每个4x4 块发送一个标记 flag,解码器按照如下方式 解码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ifflag==1, prediction mode=most_probable_mode</span><br><span class="line"></span><br><span class="line">Ifflag==0</span><br><span class="line"></span><br><span class="line">   If rem_intra4×4_pred_mode&lt; most_probable_mode</span><br><span class="line"></span><br><span class="line">​     prediction mode=rem_intra4×4_pred_mode</span><br><span class="line"></span><br><span class="line">   else</span><br><span class="line"></span><br><span class="line">​     prediction mode=rem_intra4×4_pred_mode+1</span><br></pre></td></tr></table></figure>

<p>这样表示9中预测模式只需要8个值 (0 to 7)</p>
<p><img src="/images/20.png" alt="img"></p>
</font>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>H264</tag>
      </tags>
  </entry>
  <entry>
    <title>视频流H264的组装</title>
    <url>/2021/11/18/Android/audioVideo/%E6%96%87%E6%A1%A303-%E5%88%87%E7%89%87/</url>
    <content><![CDATA[<font size="2.9">

<h4 id="1-H264介绍"><a href="#1-H264介绍" class="headerlink" title="1 H264介绍"></a>1 H264介绍</h4><blockquote>
<p> 我们了解了什么是宏快，宏快作为压缩视频的最小的一部分，需要被组织，然后在网络之间做相互传输。</p>
</blockquote>
<p>H264更深层次    —》宏块   太浅了</p>
<p>​        如果单纯的用<strong>宏快</strong>来发送数据是<strong>杂乱无章</strong>的，就好像在没有<strong>集装箱</strong> 出现之前，货物总是随意被堆放到船上。</p>
<p>上货（编码），下货是非常痛苦的。 当集装箱出现之后，一切都发生了改变，传输效率大大增高。</p>
<p>​        集装箱可以理解成<strong>H264编码标准</strong>，他制定了相互传输的格式，将宏快 有组织，有结构，有顺序的形成一系列的码流。这种码流既可 通过 InputStream 网络流的数据进行传输，也可以封装成一个文件进行保存</p>
<p><strong>H264: H264/AVC是广泛采用的一种编码方式。</strong>主要作用是为了传输</p>
<h4 id="1-1-H264码流组成"><a href="#1-1-H264码流组成" class="headerlink" title="1.1 H264码流组成"></a>1.1 H264码流组成</h4><p><strong>组成H264码流的结构中 包含以下几部分 ，从大到小排序依次是</strong> </p>
<blockquote>
<p><strong>H264视频序列，图像，片组，片，NALU，宏块 ，像素。</strong> </p>
<p>类似 地球 国家 城市  镇 村落</p>
</blockquote>
<p><img src="/images/66.png"></p>
<h5 id="1-1-1-H264编码分层"><a href="#1-1-1-H264编码分层" class="headerlink" title="1.1.1  H264编码分层"></a>1.1.1  H264编码分层</h5><ul>
<li><strong>NAL层:（Network Abstraction Layer,视频数据网络抽象层）</strong>：  它的作用是H264只要在网络上传输，在传输的过程每个包以太网是1500字节，而H264的帧往往会大于1500字节，所以要进行拆包，将一个帧拆成多个包进行传输，所有的拆包或者组包都是通过NAL层去处理的。</li>
<li><strong>VCL层:（Video Coding Layer,视频数据编码层）</strong>： 对视频原始数据进行压缩</li>
</ul>
<h5 id="1-1-2-H264的传输"><a href="#1-1-2-H264的传输" class="headerlink" title="1.1.2  H264的传输"></a>1.1.2  H264的传输</h5><p>​    <strong>H264是一种码流</strong>  类似与一种不见头，也不见尾的一条<strong>河流</strong>。如何从和流中取到自己想要的<strong>数据</strong>呢，</p>
<p>在H264的标砖中有这样的一个封装格式叫做”Annex-B”的字节流格式。 它是H264编码的主要字节流格式。</p>
<p>几乎市面上的编码器是以这种格式进行输出的。<strong>起始码0x 00 00 00 01 或者 0x 00 00 01</strong> 作为<strong>分隔符</strong>。 </p>
<p>两个 0x 00 00 00 01之间的字节数据 是表示一个NAL Unit</p>
<p><img src="/images/67.png"></p>
<h5 id="1-1-3-编码结构"><a href="#1-1-3-编码结构" class="headerlink" title="1.1.3  编码结构"></a>1.1.3  编码结构</h5><p><img src="/images/68.jpg"></p>
<p> <strong>切片头</strong>：包含了一组片的信息，比如片的数量，顺序等等 </p>
<h5 id="1-1-4-H264码流分层结构图"><a href="#1-1-4-H264码流分层结构图" class="headerlink" title="1.1.4  H264码流分层结构图"></a>1.1.4  H264码流分层结构图</h5><p><img src="/images/69.jpg"></p>
</font>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>H264</tag>
      </tags>
  </entry>
  <entry>
    <title>H264的分层</title>
    <url>/2021/11/18/Android/audioVideo/%E6%96%87%E6%A1%A304-H264%E5%88%86%E5%B1%82/</url>
    <content><![CDATA[<font size="2.9">

<h4 id="音视频高手课07-视频流H264码流分析实战"><a href="#音视频高手课07-视频流H264码流分析实战" class="headerlink" title="音视频高手课07-视频流H264码流分析实战"></a>音视频高手课07-视频流H264码流分析实战</h4><h4 id="1-1-H-264编码格式"><a href="#1-1-H-264编码格式" class="headerlink" title="1.1 H.264编码格式"></a>1.1 H.264编码格式</h4><p>H.264的功能分为两层：</p>
<blockquote>
<ul>
<li>视频编码层 </li>
<li>网络提取层 </li>
</ul>
</blockquote>
<blockquote>
<p>H.264 的编码视频序列包括一系列的NAL 单元，每个NAL 单元包含一个RBSP。一个原始的H.264由<strong>N个NALU单元组成</strong>、 NALU 单元常由 [StartCode] [NALU Header] [NALU Payload] 三部分组成，其中 Start Code 用于标示这是一个NALU 单元的开始，必须是”00 00 00 01” 或”00 00 01”。    </p>
</blockquote>
<p><img src="/images/68.png" alt="images"></p>
<p>​     </p>
<h4 id="1-2-H-264网络传输"><a href="#1-2-H-264网络传输" class="headerlink" title="1.2 H.264网络传输"></a>1.2 H.264网络传输</h4><p>​        H.264的编码视频序列包括一系列的<strong>NAL单元</strong>，每个NAL单元包含<strong>一个RBSP</strong>，</p>
<p>见表1。编码片（包括数据分割片IDR片）和序列RBSP结束符被定义为VCL NAL单元，其余为NAL单元。</p>
<p>​        <strong>典型的RBSP单元序列如图2所示。</strong></p>
<p>RBSP  顺丰 头   顺丰公司尾部</p>
<p>每个单元都按独立的NAL单元传送。单元的信息头（一个字节）定义了RBSP单元的类型，NAL单元的其余部分为RBSP数据。</p>
<p><img src="/images/69.png" alt="img"></p>
<p><img src="/images/70.png" alt="img"></p>
<ol>
<li>2.1 <strong>H.264码流结构图</strong>     </li>
</ol>
<p><img src="/images/71.png" alt="img"></p>
<p>起始码：如果NALU对应的Slice为一帧的开始，则用4字节表示，即0x00000001；否则用3字节表示，0x000001。 NAL Header：forbidden_bit，nal_reference_bit（优先级），nal_unit_type（类型）。 脱壳操作：为了使NALU主体不包括起始码，在编码时每遇到两个字节（连续）的0，就插入一字节0x03，以和起始码相区别。解码时，则将相应的0x03删除掉。</p>
<p><img src="/images/72.png" alt="img"></p>
<p> H.264解码 <strong>NAL头信息</strong>的nal_referrence_idc（NRI）用于在重建过程中标记一个NAL单元的重要性，</p>
<ol>
<li>值为0表示这个NAL单元没有用预测，因此可以被解码器抛弃而不会有错误扩散；</li>
<li>值高于0表示NAL单元要用于无漂移重构，且值越高，对此NAL单元丢失的影响越大。</li>
<li> NAL头信息的隐藏比特位，在H.264编码器中默认为0，当网络识别到单元中存在比特错误时，可将其置为1。隐藏比特位主要用于适应不同种类的网络环境（比如有线无线相结合的环境）。     </li>
</ol>
<p><img src="/images/73.png" alt="img"></p>
<p>NAL单元解码的流程为：首先从NAL单元中提取出RBSP语法结构，然后按照如图4所示的流程处理RBSP语法结构。输入的是NAL单元，输出结果是经过解码的当前图像的样值点。 NAL单元中分别包含了序列参数集和图像参数集。图像参数集和序列参数集在其他NAL单元传输过程中作为参考使用，在这些数据NAL单元的片头中，通过m语法元素pic_parameter_set_id设置它们所使用的图像参数集编号；而相应的每个图像参数集中，通过语法元素seq_paramter_set_id设置他们使用的序列参数集编号。</p>
<p>几个例子：</p>
<p><img src="/images/fc_101.png" alt="img"></p>
<p>硬解–soc 芯片</p>
<p>软件   ffmpeg</p>
<p>3、 ffmpeg解析H264流程分析</p>
<p>这是一段实际的码流</p>
<p><img src="/images/fc_100.png" alt="img"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -vcodec h264 -preset fast -b:v <span class="number">2000</span>k hello.h264</span><br><span class="line"></span><br></pre></td></tr></table></figure>

 </font>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>H264</tag>
      </tags>
  </entry>
  <entry>
    <title>视频流H264的编码器</title>
    <url>/2021/11/18/Android/audioVideo/%E6%96%87%E6%A1%A305-%E6%89%8B%E5%86%99H264%E7%BC%96%E7%A0%81%E5%99%A8/</url>
    <content><![CDATA[<font size="2.9">

<h3 id="音视频高手课08-H264-I帧-P帧-B帧及手写H264编码器"><a href="#音视频高手课08-H264-I帧-P帧-B帧及手写H264编码器" class="headerlink" title="音视频高手课08-H264 I帧 P帧 B帧及手写H264编码器"></a>音视频高手课08-H264 I帧 P帧 B帧及手写H264编码器</h3><h5 id="1-三种帧的说明"><a href="#1-三种帧的说明" class="headerlink" title="1  三种帧的说明"></a>1  三种帧的说明</h5><p>1、I 帧：帧内编码帧，帧表示关键帧，你可以理解为这一帧画面的完整保留；解码时只需要本帧数据就可以完成（因为包含完整画面）</p>
<p><strong>I 帧的特点：</strong></p>
<ul>
<li><p>a. 它是一个全帧压缩编码帧，它将全帧图像信息进行JPEG压缩编码及传输</p>
</li>
<li><p>b. 解码时仅用I 帧的数据就可重构完整图像</p>
</li>
<li><p>c. I 帧描述了图像背景和运动主体的详情</p>
</li>
<li><p>d. I 帧不需要参考其他画面而生成</p>
</li>
<li><p>e. I 帧是P帧和B帧的参考帧（其质量直接影响到同组中以后各帧的质量）</p>
</li>
<li><p>f. I 帧不需要考虑运动矢量</p>
</li>
<li><p>g. I 帧所占数据的信息量比较大</p>
</li>
</ul>
<p>  、<strong>P帧</strong>：前向预测编码帧。P帧表示的是这一帧跟之前的一个关键帧（或P帧）的差别，解码时需要之前缓存的画面叠加上本帧定义的差别，生成最终画面。（也就是差别帧，P帧没有完整画面数据，只有与前一帧的画面差别的数据）</p>
<p>​    <strong>P帧的预测与重构</strong>：P帧是以 I 帧为参考帧，在 I 帧中找出P帧“某点”的预测值和运动矢量，取预测差值和运动矢量一起传送。在接收端根据运行矢量从 I 帧找出P帧“某点”的预测值并与差值相加以得到P帧“某点”样值，从而可得到完整的P帧。</p>
<p><strong>P帧的特点：</strong></p>
<ul>
<li><p>a. P帧是 I 帧后面相隔1~2帧的编码帧</p>
</li>
<li><p>b. P帧采用运动补偿的方法传送它与前面的I或P帧的差值及运动矢量（预测误差）</p>
</li>
<li><p>c. 解码时必须将帧中的预测值与预测误差求和后才能重构完整的P帧图像</p>
</li>
<li><p>d. P帧属于前向预测的帧间编码。它只参考前面最靠近它的 I 帧或P帧</p>
</li>
<li><p>e. 由于P帧是参考帧，它可能造成解码错误的扩散</p>
</li>
<li><p>f. 由于是差值传送，P帧的压缩比较高</p>
</li>
</ul>
<p>3、<strong>B帧</strong>：双向预测内插编码帧。B帧是双向差别帧，也就是B帧记录的是本帧与前后帧的差别（具体比较复杂，有4种情况，但我这样说简单些），换言之，要解码B帧。不仅要取得之前的缓存画面，还要解码之后的画面，通过前后画面的与本帧数据的叠加取得最终的画面。B帧压缩率高，但是解码时CPU会比较累。</p>
<p><strong>B帧的预测与重构</strong></p>
<p>​    B帧以前面的 I 或P帧和后面的P帧为参考帧，“找出”B帧“某点”的预测值和两个运动矢量，并取预测差值和运动矢量传送。接收端根据运动矢量在两个参考帧中“找出（算出）”预测值并与差值求和，得到B帧“某点”样值，从而可得到完整的B帧。</p>
<p><strong>B帧的特点：</strong></p>
<ul>
<li><p>a. B帧是由前面的 I 或P帧和后面的P帧进行预测的</p>
</li>
<li><p>b. B帧传送的是它与前面的 I 或P帧和后面的P帧之间的预测误差及运动矢量</p>
</li>
<li><p>c. B帧是双向预测编码帧</p>
</li>
<li><p>d. B帧压缩比最高，因为它只反映并参考帧间运动主体的变化情况，预测比较准确</p>
</li>
<li><p>e. B帧不是参考帧，不会造成解码错误的扩散</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注：I、B、P帧是根据压缩算法的需要，是人为定义的，他们都是实实在在的物理帧。</span><br><span class="line">一般来说，帧的压缩率是7（跟JPG差不多），</span><br><span class="line">P帧是20，B帧可以达到50.可见使用B帧能节省大量空间，</span><br><span class="line">节省出来的空间可以用来保存多一些帧，这样在相同码率下，可以提供更好的画质。</span><br></pre></td></tr></table></figure>



<h4 id="1-2-压缩算法的说明"><a href="#1-2-压缩算法的说明" class="headerlink" title="1.2 压缩算法的说明"></a>1.2 压缩算法的说明</h4><p><strong>h264的压缩方法</strong>：</p>
<ul>
<li><p>1、分组：把几帧图像分为一组（GOP，也就是一个序列），为防止运动变化，帧数不宜取多</p>
</li>
<li><p>2、定义帧：将每组内各帧图像定义为三种类型，即 I 帧、B帧和P帧</p>
</li>
<li><p>3、预测帧：以帧作为基础帧，以帧预测P帧，再由 I 帧和P帧预测B帧</p>
</li>
<li><p>4、数据传输：最后将 I  帧数据与预测的差值信息进行存储和传输</p>
</li>
</ul>
<p>​    <strong>帧内</strong>（Intraframe）压缩也称为空间压缩（Spatial compression）。当压缩一帧图像时，仅考虑本帧的数据而不考虑相邻帧之间的冗余信息，这实际上与静态图像压缩类似。帧内一般采用有损压缩算法，由于帧内压缩是编码一个完整的图像，因此可以独立的解码、显示。帧内压缩一般达不到很高的压缩，跟编码jpeg差不多。</p>
<p>​    <strong>帧间</strong>（Interframe）压缩的原理是：相邻几帧的数据有很大的相关性，或者说前后两帧信息变化很小的特点，也即连续的视频及其相邻帧之间具有冗余信息，根据这一特性，压缩相邻帧之间的冗余量就可以进一步提高压缩量，减少压缩比。帧间压缩也称为时间压缩，它通过比较时间轴上不同帧之间的数据进行压缩。帧间压缩一般是无损的。帧差值（Frame differencing）算法是一种典型的时间压缩发，它通过比较本帧与相邻帧之间的差异，仅记录本帧与其相邻帧的差值，这样可以大大减少数据量。</p>
<p>​    <strong>顺便说下有损</strong>（Lossy）压缩和无损（Lossy less）压缩。无损压缩也即压缩前和解压缩后的数据完全一致。多数的无损压缩都采用RLE行程编码算法。有损压缩意味着解压缩后的数据与压缩前的数据不一致。在压缩的过程中要丢失一些人眼和耳朵所不敏感的图像或音频信息，而且丢失的信息不可恢复。几乎所有高压缩的算法都采用有损压缩，这样才能达到低数据率的目标。丢失的数据率与压缩比有关，压缩比越小，丢失的数据越多，解压缩后的效果一般越差。此外，某些有损压缩算法采用多次重复压缩的方式，这样还会引起额外的数据丢失。</p>
<hr>
<h3 id="2-手写H264编码器"><a href="#2-手写H264编码器" class="headerlink" title="2  手写H264编码器"></a>2  手写H264编码器</h3><p>要彻底理解视频编码原理，看书都是虚的，需要实际动手，实现一个简单的视频编码器：</p>
<p>知识准备：基本图像处理知识，信号的时域和频域问题，熟练掌握傅立叶正反变换，一维、二维傅立叶变换，以及其变种，dct变换，快速dct变换。 </p>
<p><strong>2.1.1 第一步：实现有损图像压缩和解压</strong><br>        参考 JPEG原理，将RGB-&gt;YUV，然后Y/U/V看成三张不同的图片，将其中一张图片分为 8x8的block进行 dct变换（可以直接进行二维dct变换，或者按一定顺序将8x8的二维数组整理成一个64字节的一维数组），还是得到一个8x8的整数频率数据。于是表示图像大轮廓的低频信号（人眼敏感的信号）集中在 8x8的左上角；表示图像细节的高频信号集中在右下角。</p>
<p>​         接着将其量化，所谓<strong>量化</strong>，就是信号采样的步长，8x8的整数频率数据块，每个数据都要除以对应位置的步长，左上角相对重要的低频信号步长是1，也就是说0-255，是多少就是多少。而右下角是不太重要的高频信号，比如步长取10，那么这些位置的数据都要/10，实际解码的时候再将他们<em>10恢复出来，这样经过编码的时候/10和解码的时候</em>10，那么步长为10的信号1, 13, 25, 37就会变成规矩的：0, 10, 20, 30, 对小于步长10的部分我们直接丢弃了，因为高频不太重要。 </p>
<p>​         <strong>经过量化以后</strong>，8x8的数据块左上角的数据由于步长小，都是比较离散的，而靠近右下角的高频数据，都比较统一，或者是一串0，因此图像大量的细节被我们丢弃了，这时候，我们用无损压缩方式，比如lzma2算法（jpeg是rle + huffman）将这64个byte压缩起来，由于后面高频数据步长大，做了除法以后，这些值都比较小，而且比较靠近，甚至右下部分都是一串0，十分便于压缩。</p>
<p>​        JPEG图像有个问题就是低码率时 block边界比较严重，现代图片压缩技术往往要配合一些de-block算法，比如最简单的就是边界部分几个像素点和周围插值模糊一下。 </p>
<blockquote>
<p> 做到这里我们实现了一个同 jpeg类似的静态图片有损压缩算法。在视频里面用来保存I帧数据。 </p>
</blockquote>
<p>​     </p>
<p> <strong>2.1.2 第二步：实现宏块误差计算</strong> </p>
<p>​        <strong>视频</strong>由连续的若干图像帧组成，分为 I帧，P帧，所谓I帧，就是不依赖就可以独立解码的视频图像帧，而P帧则需要依赖前面已解码的视频帧，配合一定数据才能生成出来。所以视频中I帧往往都比较大，而P帧比较小，如果播放器一开始收到了P帧那么是无法播放的，只有收到下一个I帧才能开始播放。I帧多了视频就变大，I帧少了，数据量是小了，但视频受到丢包或者数据错误的影响却又会更严重。</p>
<p>​         那么所谓运动预测编码，其实就是P帧的生成过程：继续将图片分成 16x16的block（为了简单只讨论yuv的y分量压缩）。I帧内部单帧图片压缩我们采用了8x8的block，而这里用16x16的block来提高帧间编码压缩率（当然也会有更多细节损失），我们用 x, y表示像素点坐标，而s,t表示block坐标，那么坐标为（x,y）的像素点所属的block坐标为： </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">s = x / <span class="number">16</span> = x &gt;&gt; <span class="number">4</span></span><br><span class="line">t = y / <span class="number">16</span> = y &gt;&gt; <span class="number">4</span></span><br></pre></td></tr></table></figure>



<p>​         接着要计算两个<strong>block的相似度</strong>，即矢量的距离，可以表示为一个256维矢量（16x16）像素点色彩距离的平方，我们先定义两个颜色的误差为： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PixelDiff(c1, c2) = (c1- c2) ^ 2</span><br></pre></td></tr></table></figure>

<p>​        <strong>那么256个点的误差</strong>可以表示为所有对应点的像素误差和：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BlockDiff(b1, b2) = sum( PixelDiff(c1, c2) for c1 in b1 for c2 in b2)</span><br></pre></td></tr></table></figure>


<p>代码化为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">block_diff</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> b1[<span class="number">16</span>][<span class="number">16</span>], <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> b2[<span class="number">16</span>][<span class="number">16</span>])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++) &#123;</span><br><span class="line">              <span class="keyword">int</span> c1 = b1[i][j];</span><br><span class="line">              <span class="keyword">int</span> c2 = b2[i][j];</span><br><span class="line">              sum += (c1 - c2) * (c1 - c2);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>有了这个block求差的函数，我们就可以针对<strong>特定block</strong>，搜索另外若<strong>干个block</strong>中哪个和它最相似了（误差最小）。</p>
<h5 id="1-2-3-第三步：实现运动预测编码"><a href="#1-2-3-第三步：实现运动预测编码" class="headerlink" title="1.2.3 第三步：实现运动预测编码"></a>1.2.3 <strong>第三步：实现运动预测编码</strong></h5><p>​        根据上面的宏块比较函数，你已经可以知道两个block到底像不像了，越象的block，block_diff返回值越低。那么我们有两帧相邻的图片，P1，P2，假设 P1已经完成编码了，现在要对 P2进行P帧编码，其实就是轮询 P2里面的每一个 block，为P2中每一个block找出上一帧中相似度最高的block坐标，并记录下来，具体伪代码可以表示为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> block[<span class="number">16</span>][<span class="number">16</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt;= maxt; t++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s &lt;= maxs; s++) &#123;</span><br><span class="line">         picture_get_block(P2, s * <span class="number">16</span>, t * <span class="number">16</span>, block); <span class="comment">// 取得图片 P2 的 block</span></span><br><span class="line">         <span class="keyword">int</span> x, y;</span><br><span class="line">         block_search_nearest(P1, &amp;x, &amp;y, block); <span class="comment">// 在P1中搜索最相似的block</span></span><br><span class="line">         output(x, y);  <span class="comment">// 将P1中最相似的block的左上角像素坐标 (x, y) 输出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>​        其中在P1中搜索最相似 block的 block_search_nearest 函数原理是比较简单的，我们可以暴力点用两个for循环轮询 P1中每个像素点开始的16x16的block（速度较慢），当然实际中不可能这么暴力搜索，而是围绕P2中该block对应坐标在P1中位置作为中心，慢慢四周扩散，搜索一定步长，并得到一个 ：<strong>按照一定顺序进行搜索，并且在一定范围内最相似的宏块坐标</strong>。 。</p>
<blockquote>
<p>于是P2进行运动预测编码的结果就是一大堆(x,y)的坐标，代表P2上每个block在上一帧P1里面最相似的 block的位置。反过来说可能更容易理解，我们可以把第三步整个过程定义为： </p>
</blockquote>
<h5 id="怎么用若干-P1里不同起始位置的block拼凑出图片P2来，使得拼凑以后的结果和P2最像。"><a href="#怎么用若干-P1里不同起始位置的block拼凑出图片P2来，使得拼凑以后的结果和P2最像。" class="headerlink" title="怎么用若干 P1里不同起始位置的block拼凑出图片P2来，使得拼凑以后的结果和P2最像。"></a>怎么用若干 P1里不同起始位置的block拼凑出图片P2来，使得拼凑以后的结果和P2最像。</h5><p><strong>1.2.4 第四步：实现P帧编码</strong></p>
<p>​         拼凑的结果就是一系列(x,y)的坐标数据，我们继续用lzma2将它们先压缩起来，按照 vcd的分辨率</p>
<p>352 x 240，我们横向需要 352 / 16 = 22个block，纵向需要 240 / 16 = 15 个block，可以用 P1中 22 x 15 = 330 </p>
<p>个 block的坐标信息生成一张和P2很类似的图片 P2’ ： </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; <span class="number">15</span>; t++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; <span class="number">22</span>; s++, next++) &#123;</span><br><span class="line">         <span class="keyword">int</span> x = block_positions[next].x;   <span class="comment">// 取得对应 P1上的 block像素位置 x</span></span><br><span class="line">         <span class="keyword">int</span> y = block_positions[next].y;   <span class="comment">// 取得对应 P1上的 block像素位置 y</span></span><br><span class="line">         <span class="comment">// 将 P1位置(x,y)开始的 16 x 16 的图块拷贝到 P2&#x27;的 (s * 16, t * 16)处</span></span><br><span class="line">         CopyRect(P2<span class="number">&#x27;</span>, s * <span class="number">16</span>, t * <span class="number">16</span>, P1, x, y, <span class="number">16</span>, <span class="number">16</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<pre><code>     我们把用来生成P2的P1称为 P2的 “参考帧”，再把刚才那一堆P1内用来拼成P2的 block坐标称为 “**运动矢量**”，这是P帧里面最主要的数据内容。但是此时由P1和这些坐标数据拼凑出来的P2，你会发现粗看和P2很象，但细看会发现有些支离破碎，并且边缘比较明显，怎么办呢？我们需要第四步。
     
</code></pre>
<h5 id="1-2-5第五步：实现P帧编码"><a href="#1-2-5第五步：实现P帧编码" class="headerlink" title="1.2.5第五步：实现P帧编码"></a><strong>1.2.5第五步：实现P帧编码</strong></h5><pre><code>     有了刚才的运动预测矢量（一堆block的坐标），我们先用P1按照这些数据拼凑出一张类似 P2的新图片叫做P2&#39;，然后同P2上每个像素做减法，得到一张保存 differ的图片： 
</code></pre>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">D2 = (P2 - P2<span class="number">&#x27;</span>) / <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>​        误差图片 D2上每一个点等于 P2上对应位置的点的颜色减去 P2’上对应位置的点的颜色再除以2，用8位表示差值，值是循环的，比如-2就是255，这里一般可以在结果上 + 0x80，即 128代表0，129代表2，127代表-2。继续用一个 8位的整数可以表示 [-254, 254] 之间的误差范围，步长精度是2。 </p>
<p>​        按照第三步实现的逻辑，P2’其实已经很像P2了，只是有些误差，我们将这些误差保存成了图片D2，所以图片D2中，信息量其实已经很小了，都是些细节修善，比起直接保存一张完整图片熵要低很多的。所以我们将 D2用类似第一步提到的有损图片压缩方法进行编码，得到最终的P帧数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Encode(P2) = Lzma2(block_positions) + 有损图像编码（D2）</span><br></pre></td></tr></table></figure>


<p>​        具体在操作的时候，D2的图像块可以用16x16进行有损编码，因为前面的运动预测数据是按16x16的宏块搜索的，而不用象I帧那样精确的用8x8表示，同时保存误差图时，量化的精度可以更粗一些用不着象I帧那么精确，可以理解成用质量更低的JPEG编码，按照16x16的块进行编码，加上误差图D2本来信息量就不高，这样的保存方式能够节省不少空间。</p>
<p>​    </p>
<p> <strong>1.2.6 第六步：实现GOP生成</strong> </p>
<p>​        通过前面的代码，我们实现了I帧编码和P帧编码，P帧是参考P1对P2进行编码，而所谓B帧，就是参考 P1和 P3对P2进行编码，当然间隔不一定是1，比如可以是参考P1和P5对P2进行编码，前提条件是P5可以依赖P1及以前的数据进行解码。</p>
<p>​         不过对于一个完整的简版视频编码器，I帧和P帧编码已经够了，市面上任然有很多面向低延迟的商用编码器是直接干掉B帧的，因为做实时传输时收到B帧没法播放，之后再往后好几帧收到下一个I或者P帧时，先前收到的B帧才能被解码出来，造成不少的延迟。 </p>
<p>​        而所谓的 GOP (Group of picture) 就是由一系列类似 I, P, B, B, P, B, B, P, B, B P 组成的一个可以完整被解码出来的图像组，而所谓视频文件，就是一个接一个的GOP，每个GOP由一个I帧开头，然后接下来一组连续的P 或者 B构成，播放时只有完整收到下一个GOP的I帧才能开始播放。</p>
<pre><code>     最后是关于参考帧选择，前面提到的 P2生成过程是参考了 P1，假设一个GOP中十张图片，是 I1, P1, P2, P3, P4, ... P9 保存的，如果P1参考I1，P2参考P1, P3参考P2 .... P9参考P8这样每一个P帧都是参考上一帧进行编码的话，误差容易越来越大，因为P1已经引入一定误差了，P2在P1的基础上误差更大，到了P9的话，图片质量可能已经没法看了。 
</code></pre>
<p>​        因此正确的参考帧选择往往不需要这样死板，比如可以P1-P9全部参考I1来生成，或者，P1-P4参考I1来生成，而P5-P9则参考P5来生成，这样步子小点，误差也不算太离谱。</p>
<p> <strong>1.2.7 第七步：容器组装</strong> </p>
<p>​        我们生成了一组组编码过的GOP了，这时候需要一定的文件格式将他们恰当的保存下来，记录视频信息，比如分辨率，帧率，时间索引等，就是一个类似MP4（h.264的容器）文件的东西。至此一个简单的小型编码器我们已经完成了，可以用 SDL / DirectX / OpenGL 配合实现一个播放器，愉快的将自己编码器编码的视频播放出来。</p>
<p><strong>1.2.8第八步：优化改进</strong> </p>
<p>​        这时候你已经大概学习并掌握了视频编码的基础原理了，接下来大量的优化改进的坑等着你去填呢。优化有两大方向，编码效率优化和编码性能优化：前者追求同质量（同信噪比）下更低的码率，后者追求同样质量和码率的情况下，更快的编码速度。</p>
<p>​         有这个基础后接下来可以回过头去看JPEG标准，MPEG1-2标准，并阅读相关实现代码，你会发现简单很多了，接着肯H.264代码，不用全部看可以针对性的了解以下H.264的I帧编码和各种搜索预测方法，有H.264的底子，你了解 HEVC和 vpx就比较容易了。 </p>
<p>​        参考这些编码器一些有意思的实现来改进自己的编码器，试验性质，可以侧重原理，各种优化技巧了解下即可，本来就是hack性质的。</p>
<blockquote>
<pre><code>     有卯用呢？首先肯定很好玩，其次，当你有需要使用并修改这些编码器为他们增加新特性的时候，你会发现前面的知识很管用了。 
</code></pre>
</blockquote>
<p>——有朋友说光有代码没有图片演示看不大明白，好我们补充一下图片演示：</p>
<h4 id="1-3-画面演示"><a href="#1-3-画面演示" class="headerlink" title="1.3 画面演示"></a>1.3 画面演示</h4><ol>
<li><h5 id="3-1-这是第一帧画面：P1（我们的参考帧）"><a href="#3-1-这是第一帧画面：P1（我们的参考帧）" class="headerlink" title="3.1 这是第一帧画面：P1（我们的参考帧）"></a>3.1 这是第一帧画面：P1（我们的参考帧）</h5></li>
</ol>
<p><img src="/images/71.jpg"></p>
<p> <strong>这是第二帧画面：P2（需要编码的帧）</strong> </p>
<p><img src="/images/72.jpg"></p>
<blockquote>
<p>从视频中截取的两张间隔1-2秒的画面，和实际情况类似，下面我们进行几次运动搜索：</p>
</blockquote>
<h5 id="1-3-2-搜索演示1：搜索P2中车辆的车牌在P1中最接近的位置（上图P1，下图P2）"><a href="#1-3-2-搜索演示1：搜索P2中车辆的车牌在P1中最接近的位置（上图P1，下图P2）" class="headerlink" title="1.3.2 搜索演示1：搜索P2中车辆的车牌在P1中最接近的位置（上图P1，下图P2）"></a>1.3.2 搜索演示1：搜索P2中车辆的车牌在P1中最接近的位置（上图P1，下图P2）</h5><p><img src="/images/73.jpg"></p>
<p>这是一个<strong>演示程序</strong>，鼠标选中P2上任意16x16的Block，即可搜索出P1上的 BestMatch 宏块。虽然车辆在运动，从远到近，但是依然找到了最接近的<strong>宏块坐标</strong>。</p>
<h5 id="1-3-3-搜索演示2：空中电线交叉位置（上图P1，下图P2）"><a href="#1-3-3-搜索演示2：空中电线交叉位置（上图P1，下图P2）" class="headerlink" title="1.3.3 搜索演示2：空中电线交叉位置（上图P1，下图P2）"></a>1.3.3 搜索演示2：空中电线交叉位置（上图P1，下图P2）</h5><p><img src="/images/74.jpg"></p>
<h5 id="1-3-3-搜索演示3：报刊停的广告海报"><a href="#1-3-3-搜索演示3：报刊停的广告海报" class="headerlink" title="1.3.3  搜索演示3：报刊停的广告海报"></a>1.3.3  搜索演示3：报刊停的广告海报</h5><p><img src="/images/75.jpg" alt="75.jpg"></p>
<blockquote>
<p>同样顺利在P1中找到最接近P2里海报的宏块位置。</p>
</blockquote>
<p> 图片全搜索：根据P1和运动矢量数据（在P2中搜索到每一个宏块在P1中最相似的位置集合）还原出来的P2’，即完全用P1各个位置的宏块拼凑出来最像P2的图片P2’，效果如下： </p>
<p><img src="/images/76.jpg"></p>
<p>仔细观察，有些支离破碎对吧？肯定啊，拼凑出来的东西就是这样，现在我们用P2`和P2像素相减，得到差分图 D2 = (P2’ - P2) / 2 + 0x80：</p>
<p><img src="https://pic4.zhimg.com/50/9a08b5dae6c53d11076027c5f3e47391_hd.jpg" alt="img"> </p>
<p>嗯，这就是P2`和P2两幅图片的不同处，看到没？基本只有低频了！高频数据少到我们可以忽略，这时用有损压缩方式比较差的效果来保存误差图D2，只要5KB的大小。<br>接着我们根据运动矢量还原的 P2’及差分图D2来还原新的 P2，NewP2 = P2’ + (D2 - 0x80) * 2：</p>
<p><img src="https://pic3.zhimg.com/50/2d2f1026f8fe2f6242c7a952d1ac1ec8_hd.jpg" alt="img"> </p>
<blockquote>
<p>​        这就是之前支离破碎的 P2` 加上误差 D2之后变成了清晰可见的样子，基本还原了原图P2。<br>​    由于D2仅仅占5KB，加上压缩过后的运动矢量不过7KB，</p>
</blockquote>
<p>​        <strong>所以参考P1我们只需要额外 7KB的数据量就可以完整表示P2了，而如果独立将P2用质量尚可的有损压缩方式独立压缩，则至少要去到50-60KB，这一下节省了差不多8倍的空间，正就是所谓运动编码的基本原理。</strong></p>
<p>再者误差我们保存的是（P2-P2’）/2 + 0x80，实际使用时我们会用更有效率的方式，比如让[-64,64]之间的色差精度为1，[-255,-64], [64, 255] 之间的色差精度为2-3，这样会更加真实一些。</p>
<p>​        现代视频编码中，除了帧间预测，I帧还使用了大量帧内预测，而不是完全dct量化后编码，前面帧间预测我们使用了参考帧的宏块移动拼凑新帧的方式进行，而所谓帧内预测就是同一幅画面中，未编码部分使用已编码部分拼凑而成。。。。。。。</p>
<h5 id="H264是新一代的编码标准，以高压缩高质量和支持多种网络的流媒体传输著称在编码方面，"><a href="#H264是新一代的编码标准，以高压缩高质量和支持多种网络的流媒体传输著称在编码方面，" class="headerlink" title="H264是新一代的编码标准，以高压缩高质量和支持多种网络的流媒体传输著称在编码方面，"></a>H264是新一代的编码标准，以高压缩高质量和支持多种网络的流媒体传输著称在编码方面，</h5></font>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>H264</tag>
      </tags>
  </entry>
  <entry>
    <title>视频流H264的解码流程</title>
    <url>/2021/11/18/Android/audioVideo/%E6%96%87%E6%A1%A306-H264%E8%A7%A3%E7%A0%81%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<font size="2.9">

<h4 id="H264解码详解"><a href="#H264解码详解" class="headerlink" title="H264解码详解"></a>H264解码详解</h4><p>​        H264是新一代的编码标准，以高压缩高质量和支持多种网络的流媒体传输著称，在编码方面，我理解的他的理论依据是：参照一段时间内图像的统计结果表明，在相邻几幅图像画面中，一般有差别的像素只有10%以内的点,亮度差值变化不超过2%，而色度差值的变化只有1%以内。所以对于一段变化不大图像画面，我们可以先编码出一个完整的图像帧A，随后的B帧就不编码全部图像，只写入与A帧的差别，这样B帧的大小就只有完整帧的1/10或更小！B帧之后的C帧如果变化不大，我们可以继续以参考B的方式编码C帧，这样循环下去。这段图像我们称为一个序列（序列就是有相同特点的一段数据），当某个图像与之前的图像变化很大，无法参考前面的帧来生成，那我们就结束上一个序列，开始下一段序列，也就是对这个图像生成一个完整帧A1，随后的图像就参考A1生成，只写入与A1的差别内容。</p>
<p>​    在H264协议里定义了三种帧，完整编码的帧叫I帧，参考之前的I帧生成的只包含差异部分编码的帧叫P帧，还有一种参考前后的帧编码的帧叫B帧。</p>
<p>​    H264采用的核心算法是帧内压缩和帧间压缩，帧内压缩是生成I帧的算法，帧间压缩是生成B帧和P帧的算法。</p>
<p>-———————</p>
<p>序列的说明</p>
<p>-———————</p>
<p>​    在H264中图像以序列为单位进行组织，一个序列是一段图像编码后的数据流，以I帧开始，到下一个I帧结束。</p>
<p>​    <strong><em>\</em>一个序列的第一个图像叫做 IDR图像（立即刷新图像），IDR 图像都是 I 帧图像。\</strong>*<em>H.264引入 IDR 图像是为了解码的重同步，当解码器解码到 IDR图像时，立即将参考帧队列清空，将已解码的数据全部输出或抛弃，重新查找参数集，开始一个新的序列。****</em>这样，如果前一个序列出现重大错误，在这里可以获得重新同步的机会。IDR图像之后的图像永远不会使用IDR之前的图像的数据来解码。*</p>
<p>​    一个序列就是一段内容差异不太大的图像编码后生成的一串数据流。当运动变化比较少时，一个序列可以很长，因为运动变化少就代表图像画面的内容变动很小，所以就可以编一个I帧，然后一直P帧、B帧了。当运动变化多时，可能一个序列就比较短了，比如就包含一个I帧和3、4个P帧。</p>
<p>-———————-</p>
<h4 id="三种帧的说明"><a href="#三种帧的说明" class="headerlink" title="三种帧的说明"></a>三种帧的说明</h4><p>-———————-</p>
<p>I帧:帧内编码帧，I帧表示关键帧，你可以理解为这一帧画面的完整保留；解码时只需要本帧数据就可以完成（因为包含完整画面）</p>
<p>I帧特点:<br>1.它是一个全帧压缩编码帧。它将全帧图像信息进行JPEG压缩编码及传输;<br>2.解码时仅用I帧的数据就可重构完整图像;<br>3.I帧描述了图像背景和运动主体的详情;<br>4.I帧不需要参考其他画面而生成;<br>5.I帧是P帧和B帧的参考帧(其质量直接影响到同组中以后各帧的质量);<br>6.I帧是帧组GOP的基础帧(第一帧),在一组中只有一个I帧;<br>7.I帧不需要考虑运动矢量;<br>8.I帧所占数据的信息量比较大。</p>
<p>P帧:前向预测编码帧。P帧表示的是这一帧跟之前的一个关键帧（或P帧）的差别，解码时需要用之前缓存的画面叠加上本帧定义的差别，生成最终画面。（也就是差别帧，P帧没有完整画面数据，只有与前一帧的画面差别的数据）</p>
<p>P帧的预测与重构:P帧是以I帧为参考帧,在I帧中找出P帧“某点”的预测值和运动矢量,取预测差值和运动矢量一起传送。在接收端根据运动矢量从I帧中找出P帧“某点”的预测值并与差值相加以得到P帧“某点”样值,从而可得到完整的P帧。<br>P帧特点:<br>1.P帧是I帧后面相隔1~2帧的编码帧;<br>2.P帧采用运动补偿的方法传送它与前面的I或P帧的差值及运动矢量(预测误差);<br>3.解码时必须将I帧中的预测值与预测误差求和后才能重构完整的P帧图像;<br>4.P帧属于前向预测的帧间编码。它只参考前面最靠近它的I帧或P帧;<br>5.P帧可以是其后面P帧的参考帧,也可以是其前后的B帧的参考帧;<br>6.由于P帧是参考帧,它可能造成解码错误的扩散;<br>7.由于是差值传送,P帧的压缩比较高。</p>
<p>B帧:双向预测内插编码帧。B帧是双向差别帧，也就是B帧记录的是本帧与前后帧的差别（具体比较复杂，有4种情况，但我这样说简单些），换言之，要解码B帧，不仅要取得之前的缓存画面，还要解码之后的画面，通过前后画面的与本帧数据的叠加取得最终的画面。B帧压缩率高，但是解码时CPU会比较累。</p>
<p>B帧的预测与重构<br>B帧以前面的I或P帧和后面的P帧为参考帧,“找出”B帧“某点”的预测值和两个运动矢量,并取预测差值和运动矢量传送。接收端根据运动矢量在两个参考帧中“找出(算出)”预测值并与差值求和,得到B帧“某点”样值,从而可得到完整的B帧。<br>B帧特点<br>1.B帧是由前面的I或P帧和后面的P帧来进行预测的;<br>2.B帧传送的是它与前面的I或P帧和后面的P帧之间的预测误差及运动矢量;<br>3.B帧是双向预测编码帧;<br>4.B帧压缩比最高,因为它只反映丙参考帧间运动主体的变化情况,预测比较准确;<br>5.B帧不是参考帧,不会造成解码错误的扩散。</p>
<p>注:I、B、P各帧是根据压缩算法的需要，是人为定义的,它们都是实实在在的物理帧。一般来说，I帧的压缩率是7（跟JPG差不多），P帧是20，B帧可以达到50。可见使用B帧能节省大量空间，节省出来的空间可以用来保存多一些I帧，这样在相同码率下，可以提供更好的画质。</p>
<p>-——————————-</p>
<h4 id="压缩算法的说明"><a href="#压缩算法的说明" class="headerlink" title="压缩算法的说明"></a>压缩算法的说明</h4><p>-——————————-</p>
<p>h264的压缩方法:</p>
<p>1.分组:把几帧图像分为一组(GOP，也就是一个序列),为防止运动变化,帧数不宜取多。<br>2.定义帧:将每组内各帧图像定义为三种类型,即I帧、B帧和P帧;<br>3.预测帧:以I帧做为基础帧,以I帧预测P帧,再由I帧和P帧预测B帧;<br>4.数据传输:最后将I帧数据与预测的差值信息进行存储和传输。</p>
<p>​    帧内（Intraframe）压缩也称为空间压缩（Spatialcompression）。当压缩一帧图像时，仅考虑本帧的数据而不考虑相邻帧之间的冗余信息，这实际上与静态图像压缩类似。帧内一般采用有损压缩算法，由于帧内压缩是编码一个完整的图像，所以可以独立的解码、显示。帧内压缩一般达不到很高的压缩，跟编码jpeg差不多。
　　</p>
<p>​    帧间（Interframe）压缩的原理是：相邻几帧的数据有很大的相关性，或者说前后两帧信息变化很小的特点。也即连续的视频其相邻帧之间具有冗余信息,根据这一特性，压缩相邻帧之间的冗余量就可以进一步提高压缩量，减小压缩比。帧间压缩也称为时间压缩（Temporalcompression），它通过比较时间轴上不同帧之间的数据进行压缩。帧间压缩一般是无损的。帧差值（Framedifferencing）算法是一种典型的时间压缩法，它通过比较本帧与相邻帧之间的差异，仅记录本帧与其相邻帧的差值，这样可以大大减少数据量。</p>
<p>   顺便说下有损（Lossy ）压缩和无损（Lossyless）压缩。无损压缩也即压缩前和解压缩后的数据完全一致。多数的无损压缩都采用RLE行程编码算法。有损压缩意味着解压缩后的数据与压缩前的数据不一致。在压缩的过程中要丢失一些人眼和人耳所不敏感的图像或音频信息,而且丢失的信息不可恢复。几乎所有高压缩的算法都采用有损压缩,这样才能达到低数据率的目标。丢失的数据率与压缩比有关,压缩比越小，丢失的数据越多,解压缩后的效果一般越差。此外,某些有损压缩算法采用多次重复压缩的方式,这样还会引起额外的数据丢失。</p>
<h4 id="H264层次构成"><a href="#H264层次构成" class="headerlink" title="H264层次构成"></a><strong>H264层次构成</strong></h4><p>H264标准是由JVT（Joint Video Team，视频联合工作组）组织提出的新一代数字视频编码标准。JVT于2001年12月在泰国Pattaya成立。它由ITU-T的VCEG（视频编码专家组）和ISO/IEC的MPEG（活动图像编码专家组）两个国际标准化组织的专家联合组成。JVT的工作目标是制定一个新的视频编码标准，以实现视频的高压缩比、高图像质量、良好的网络适应性等目标H264标准。H264标准将作为MPEG-4标准的一个新的部分（MPEG-4 part.10）而获得批准，是一个面向未来IP和无线环境下的新数字视频压缩编码标准。</p>
<h4 id="H264标准的主要特点如下："><a href="#H264标准的主要特点如下：" class="headerlink" title="H264标准的主要特点如下："></a>H264标准的主要特点如下：</h4><p>1．更高的编码效率：同H.263等标准的特率效率相比，能够平均节省大于50％的码率。</p>
<p>2．高质量的视频画面：H.264能够在低码率情况下提供高质量的视频图像，在较低带宽上提供高质量的图像传输是H.264的应用亮点。</p>
<p>3．提高网络适应能力：H.264可以工作在实时通信应用（如视频会议）低延时模式下，也可以工作在没有延时的视频存储或视频流服务器中。</p>
<p>4．采用混合编码结构：同H.263相同，H.264也使用采用DCT变换编码加DPCM的差分编码的混合编码结构，还增加了如多模式运动估计、帧内预测、多帧预测、基于内容的变长编码、4x4二维整数变换等新的编码方式，提高了编码效率。</p>
<p>5．H.264的编码选项较少：在H.263中编码时往往需要设置相当多选项，增加了编码的难度，而H.264做到了力求简洁的“回归基本”，降低了编码时复杂度。</p>
<p>6．H.264可以应用在不同场合：H.264可以根据不同的环境使用不同的传输和播放速率，并且提供了丰富的错误处理工具，可以很好的控制或消除丢包和误码。</p>
<p>7．错误恢复功能：H.264提供了解决网络传输包丢失的问题的工具，适用于在高误码率传输的无线网络中传输视频数据。</p>
<p>8．较高的复杂度：264性能的改进是以增加复杂性为代价而获得的。据估计，H.264编码的计算复杂度大约相当于H.263的3倍，解码复杂度大约相当于H.263的2倍。</p>
<p>H264标准各主要部分有Access Unit delimiter（访问单元分割符），SEI（附加增强信息），primary coded picture（基本图像编码），Redundant Coded Picture（冗余图像编码）。还有Instantaneous Decoding Refresh（IDR，即时解码刷新）、Hypothetical Reference Decoder（HRD，假想码流调度器）、Hypothetical Stream Scheduler（HSS，假想参考解码）。</p>
<p>主要部分结构如图3.18所示：</p>
<p><a href="http://book.51cto.com/files/uploadimg/20080418/1651580.png"><img src="http://book.51cto.com/files/uploadimg/20080418/1651580.png" alt="img"></a></p>
<p>H.264的目标应用涵盖了目前大部分的视频服务，如有线电视远程监控、交互媒体、数字电视、视频会议、视频点播、流媒体服务等。H.264为解决不同应用中的网络传输的差异。定义了两层：视频编码层（VCL：Video Coding Layer）负责高效的视频内容表示，网络提取层（NAL：Network Abstraction Layer）负责以网络所要求的恰当的方式对数据进行打包和传送。如图3.19所示。</p>
<table>
<thead>
<tr>
<th><a href="http://new.51cto.com/files/uploadimg/20080418/165517727.png"><img src="http://new.51cto.com/files/uploadimg/20080418/165517727.png" alt="img"></a></th>
</tr>
</thead>
<tbody><tr>
<td>图3.19 标准的整体框架</td>
</tr>
</tbody></table>
<p>基本层次（Baseline Profile）：该层次使用了H.264的除了B-Slices，CABAC以及交织编码模式外所有的特性。该层次主要使用于低时延的实时应用场合。</p>
<p>主要层次（Main Profile）：包含Baseline profile的所有特性，并包括了B-slices，CABAC以及交织编码模式。它主要针对对时延要求不高，当压缩率和质量要求较高的场合。</p>
<p>扩展层次(Profile X)：支持所有Baseline profile的特性，但不支持CABAC以及基于宏块的自适应帧场编码。该层次主要针对的时各种网络视频流传输方面的应用。</p>
<p>CABAC</p>
<p>CABAC是基于内容的自适应二进制算术编码，当参数entropy_coding_mode设置为1时，一个算术系统被用来编码和解码H.264的语法元素。</p>
<p>H.264采用两种方法进行熵编码：CAVLC编码和CABAC编码算法。采用基于上下文的自适应二进制算术编码算法（CABAC），能够充分利用上下文信息和算术编码的优点，使得编码后的平均码长更逼近图像的信息熵，达到最佳的编码效率。采用CABAC算法进行编码，可以提高大约10％的编码率</p>
<p>具体编码步骤：</p>
<p>1二值化：CABAC使用二进制算术编码，所以要将数据先转换为二进制数据，这些原始数据包括变换系数和运动矢量等。转换后二进制数据为可变长编码的数据，并且还要将这些数据进行算术编码。</p>
<p>2内容模式选择：内容模式是针对二进制数据进行统计的概率模型，这个模式根据之前编码的一些数据符号的统计特性从一些可选模式中选出。内容模式存储了每一位“1”或“0”的概率。</p>
<p>3算术编码：算术编码器根据选择的内容模式对每一位进行编码。</p>
<p>4概率校正：被选择的内容模式根据实际被编码的值进行校正，例如，如果数据比特流中有数值“1”，就将“1”的概率统计值加1。</p>
<h4 id="DCT变换"><a href="#DCT变换" class="headerlink" title="DCT变换"></a>DCT变换</h4><p>H.264仍然采用对残差信号进行变换在量化后进行熵编码的模式来压缩空间冗余信息。使用了类似于4x4离散余弦变换DCT的整数变换而不是象MPEG4那样采用8x8DCT的浮点数变换。最终使用那种变换方式还用根据残余数据类型的不同来选择，帧内编码宏块的亮度DC系数（仅对16x16预测模式有效）采用4x4的矩阵，色度DC系数采用2x2的矩阵，对于其他的都采用4X4的块来变换。</p>
<p>使用以整数为基础的空间变换可以提高计算速度（只使用加法和位移运算），但是使用整数变换要以不矢精确度为前提；整数变换的反变换过程中不会出现较大的误差，并且缩放矩阵的乘法集成到了量化中，降低了乘法的总次数。</p>
<p>（1）4×4亮度分量的直流系数变换</p>
<p>如果宏块被编码为16×16帧内模式，则每个4×4残差块首先用前面叙述的变换进行变换，然后对于每个4×4的变换后的直流（DC）系数进行4×4的二次变换，采用Hadamard变换。<br>正变换为：</p>
<p><a href="http://new.51cto.com/files/uploadimg/20080418/165717576.gif"><img src="http://new.51cto.com/files/uploadimg/20080418/165717576.gif" alt="img"></a> </p>
<p><a href="http://new.51cto.com/files/uploadimg/20080418/165740418.gif"><img src="http://new.51cto.com/files/uploadimg/20080418/165740418.gif" alt="img"></a> </p>
<p>其中A是变换核矩阵<br>a=1/2</p>
<p><a href="http://new.51cto.com/files/uploadimg/20080418/165826593.gif"><img src="http://new.51cto.com/files/uploadimg/20080418/165826593.gif" alt="img"></a> </p>
<p><a href="http://new.51cto.com/files/uploadimg/20080418/165844395.gif"><img src="http://new.51cto.com/files/uploadimg/20080418/165844395.gif" alt="img"></a> </p>
<p><a href="http://new.51cto.com/files/uploadimg/20080418/165936434.gif"><img src="http://new.51cto.com/files/uploadimg/20080418/165936434.gif" alt="img"></a> </p>
<p><a href="http://new.51cto.com/files/uploadimg/20080418/165954381.gif"><img src="http://new.51cto.com/files/uploadimg/20080418/165954381.gif" alt="img"></a> </p>
<p><a href="http://new.51cto.com/files/uploadimg/20080418/170014959.gif"><img src="http://new.51cto.com/files/uploadimg/20080418/170014959.gif" alt="img"></a> </p>
<p>（2）2×2色度块的DC系数变换</p>
<p>每个宏块内的4个4×4色度块经过变换后，每个块的DC系数构成了一个2×2的块WD，对其进行2×2的Hadamard变换。</p>
<p>正变换的公式为：</p>
<p><a href="http://new.51cto.com/files/uploadimg/20080418/170126791.gif"><img src="http://new.51cto.com/files/uploadimg/20080418/170126791.gif" alt="img"></a> </p>
<p>反变换公式为：</p>
<p><a href="http://new.51cto.com/files/uploadimg/20080418/170138864.gif"><img src="http://new.51cto.com/files/uploadimg/20080418/170138864.gif" alt="img"></a> </p>
<p>（3）如图3.18所示，展示了宏块中的变换块及其传送顺序。编号为-1的块在采用Intra16x16模式编码时0-15号4x4子块经整数DCT变换后的DC系数在经4x4的哈达变换的结果。块16、17是色度块的DC系数进行2x2哈达码变换的结果。其余的24块则进行4x4整数变换。</p>
<table>
<thead>
<tr>
<th><a href="http://new.51cto.com/files/uploadimg/20080418/170243187.png"><img src="http://new.51cto.com/files/uploadimg/20080418/170243187.png" alt="img"></a></th>
</tr>
</thead>
<tbody><tr>
<td>图3.20 宏块中的变换及其传送顺序</td>
</tr>
</tbody></table>
<p>多种运动补偿块</p>
<p>有7种形状的运动补偿可供选用，这7种块是：INTER16x16，INTER16x8，INTER8x16，INTER8x8，INTER8x4，INTER4x8，INTER4x4。根据运动补偿采用的块尺寸的不同，宏块的编码模式分为四种，前三种模式分别按照一个16x16块、两个16x8块和两个8x16块来进行运动补偿；最后一种模式记作P8x8，在P8x8模式下，一个宏块被分为4个8x8的子块，而每一个子块又有4种可能的子模式，分别按照一个8x8块、两个8x4块、两个4x8块及四个4x4块进行运动补偿，如图3.19所示，第一行是宏块四种模式，第二行是子块四种模式。</p>
<p><a href="http://new.51cto.com/files/uploadimg/20080418/170410300.png"><img src="http://new.51cto.com/files/uploadimg/20080418/170410300.png" alt="img"></a> </p>
<table>
<thead>
<tr>
<th><a href="http://new.51cto.com/files/uploadimg/20080418/170437720.png"><img src="http://new.51cto.com/files/uploadimg/20080418/170437720.png" alt="img"></a></th>
</tr>
</thead>
<tbody><tr>
<td>图3.21 宏块划分方式</td>
</tr>
</tbody></table>
<p>块大小的选择是否合理对于压缩效果的好坏有很大的影响，通常来说，对于变化缓慢的部分采用较大分块效果比较好，对于包含较多细节的部分则应该采用较小的分块方式。</p>
<p>1/4像素精度运动估计</p>
<p>帧内编码宏块的每一分块都是由参考帧中相同大小的区域预测得到。这两个区域之间的偏移量即运动矢量。由于图像的运动不可能总是整像素的。因此引入了亚像素运动矢量。对亮度分量，运动矢量的分辨率为1/4像素。由于参考帧中本身不可能存在亚像素采样点，因此需要利用其临近像素内插产生亚像素采样点。亚像素采样点的内插产生过程，如图3.20所示</p>
<table>
<thead>
<tr>
<th><a href="http://new.51cto.com/files/uploadimg/20080418/170531554.png"><img src="http://new.51cto.com/files/uploadimg/20080418/170531554.png" alt="img"></a></th>
</tr>
</thead>
<tbody><tr>
<td>图3.22 亚像素采样点</td>
</tr>
</tbody></table>
<p>半像素内插值分别由运动于水平和垂直方向的一维6阶滤波器产生。1/4像素值由整数像素和半像素点求均值取得。<br>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b=round（（E-5F+20G+20H-5I+J）/32） a=round（（G+b）/2） e=round（（b+h）/2）</span><br></pre></td></tr></table></figure>

<p>由于亮度分量中的1/4像素精度运动矢量将在色度分量中产生1/8像素精度。因此，采用线性内插法产生1/8像素采样点。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=round（（[（8-dx）.（8-dy）A+dx.（8-dy）B+（8-dx）.dyC+dx.dyD]/64）</span><br></pre></td></tr></table></figure>

<p>图片分割</p>
<p>H.264支持slice结构的图片分割。一个slice有一帧图片内的若干宏块组成。编码器端对slice种包含的宏块数目没有限制。一个slice可以仅包含一个宏块也可以包含该帧中的所有宏块。然而，任何一个宏块都只能包含在某一个slice中，不允许重复出现（在冗余slice方法中例外）。<br>采用slice结构的主要动机是使编码的slice大小能适应不同的MTU大小。当它同时能应用于交叉打包等方法的实现方案中。</p>
<p>多参考帧选择</p>
<p>多参考帧选择在之前的一些视频编码标准中也可以得到应用。该方法尤其使用于具有反馈机制的系统中。但在时延要求较高的应用中意义不大。<br>与以往标准的P帧、B帧不同，H.264采用了前向与后向多个参考帧的预测</p>
<p>数据分快</p>
<p>通常，宏块中素有的码元都是被编码在单一的比特串中的。数据分块则为每一个slice创建多个比特串。<br>在H.264中，使用了三种不同类型的数据分块。</p>
<p>头信息块，包括宏块类型，量化参数，运动矢量。这些信息是最重要的，因为离开他们，被的数据块种的码元都无法使用。该数据分块称为A类数据分块。</p>
<p>帧内编码信息数据块，称为B类数据分块。它包含帧内编码宏块类型，帧内编码系数。对应的slice来说，B类数据分块的可用性依赖于A类数据分块。和帧间编码信息数据块不通的是，帧内编码信息能防止进一步的偏差，因此比帧间编码信息更重要。</p>
<p>帧间编码信息数据块，称为C类数据分块。它包含帧间编码宏块类型，帧间编码系数。它通常是slice种最大的一部分。帧间编码信息数据块是不重要的一部分。它所包含的信息并不提供编解码器之间的同步。C类数据分块的可用性也依赖于A类数据分块，但于B类数据分块无关。</p>
<p>当采用数据分块方式的时候，源编码器将不通类型的码元放到三个不同的比特缓冲器种此外，slice大小也需要调整，以使最大数据分块不会大于最大的MTU尺寸。以此，对数据分块进行操作的是源编码器而不是NAL。<br>在解码器端，在开始正确解码之前必须获得所有数据分块信息。然而，如果帧间或帧内编码数据块信息丢失了，头信息仍然能够有效地应用于提高差错恢复效率。头信息种包含宏块类型，用动矢量等信息，因此能够据此较高质量地复制信息。而仅仅丢失了一些图像纹理信息。</p>
<p>参数集</p>
<p>序列参数集包括与一图片序列相关地所有信息。图像参数集包含与图像中所有slice相关地信息。在解码器端可以存储多个不同地序列和图片参数集。编码器可以选择适当地图片参数集，图片参数集本身又包含所引用地序列参数集信息。</p>
<p>参数集的创造性应用极大地提高了错误恢复性能。在容错环境中使用参数集地关键是确保参数集能可靠并及时地到达接受端解码器。一次可以用频带外可靠通讯控制协议传送参数集，并确保在解码器从实时通讯信道接收到第一个需要参考该参数集地slice数据之前送达。或者也可以在频带内传输，但必须采用一些应用层保护措施（例如传送一参数集地多个复制，以提高至少一个复制到底目的地地概率）。第三中方案是在编码器和解码器端预先放置一些参数集，编解码器都必须在其中选择参数集。</p>
<p>可变宏块排序</p>
<p>可变宏块排序（FMO，Flexible Macroblock Ordering）可以在Baseline和Ext4ended模式中使用，但不允许在Main模式重使用。可变宏块排序允许将宏块不按照扫描顺序分配给slice。具体地分配策略由一宏块分配映射图（MBAmap）规定。在slice内，宏块仍然按照正常地扫描顺序编码。</p>
<p>该特性提供了一种将一帧图像中的宏块分配到多个slice中的模式，每个slice都是一个独立的编码单位，无论是帧间还是帧内编码都不能越界，如果在传输过程中出现数据丢失的情况，可以利用已接收到的宏块数据来对丢失的宏块数据进行恢复。</p>
<table>
<thead>
<tr>
<th><a href="http://new.51cto.com/files/uploadimg/20080418/170821603.png"><img src="http://new.51cto.com/files/uploadimg/20080418/170821603.png" alt="img"></a></th>
</tr>
</thead>
<tbody><tr>
<td>图3.23 可变宏块编码顺序</td>
</tr>
</tbody></table>
<p>slice</p>
<p>slice是一个类似于H.263中图像组（GOP）的概念，一个slice是由一系列按光栅扫描顺序排列的宏块组成。一般情况下每个宏块均包含一个16×16 的亮度阵列，当视频格式不是单色时，还包含和两个相应的色度阵列。如果没有使用宏块自适应帧/场解码，每个宏块代表图像中的一个空间矩形区域。例如，如图3.22所示，一幅图像被分为两个条带。</p>
<table>
<thead>
<tr>
<th><a href="http://new.51cto.com/files/uploadimg/20080418/170851210.png"><img src="http://new.51cto.com/files/uploadimg/20080418/170851210.png" alt="img"></a></th>
</tr>
</thead>
<tbody><tr>
<td>图3.24 slice对象</td>
</tr>
</tbody></table>
<p>每个slice都是一个独立的编码单位，无论是帧间还是帧内编码都不能越界。冗余slice允许编码器在同一数据流中嵌入同一slice中宏块地一个或多个冗余表示。这种做法和传输层冗余技术，例如包复制等，关键区别是在冗余slice中宏块地冗余表示可以使用不同地编码参数编码。例如，首先要表示可以使用相对较低的量化系数以获得较低的图像质量，而在冗余表示中可以用相对较高的量化系数以减少比特数。当解码器正确接受到首要表示时，将冗余表示丢弃。而如果首要表示由于包丢失等原因无法正确获得，能够用冗余表示中地信息将相应slice数据恢复。冗余slice 最初是为支持高差错无线通信环境而引入的，但在基于IP的环境中同样有效。</p>
<p>通过块匹配估计运动的方法</p>
<p>完全抵消所有运动的运动补偿器将产生非常好的预测帧，以至于实际上在差别图片中不会存在任何功率。我们需要相对较多的数据以详细描述运动，但是只需要相对教少的数据，以描述差别帧。无可否认，甚至使用艺术技术也不可能从一般的帧源中识别和测量任何对象的运动。我们不得不满足于简化图片模型，例如经常使用的块匹配技术。除了次优的运动补偿之外，差别图片所需的数据速率比没有运动补偿所需的速率要小很多。进一步而言，我们的优势是特别简单，因而节省描述运动所需的位数。这在部分程度哂纳感弥补了差别图片的信号功率的不足，这种信号没有完全最小化。</p>
<p>使用块匹配技术的运动估计器</p>
<p>在数据压缩中，块匹配运动估计器可以任意处理每个新帧，使其用大小相同的直接相邻的对象进行传送。另外，对象仅仅能在2维平面上在一个方向上统一地移动。因而，被传输的帧被分割为一系列矩形图案块，它们是连续产生的。运动预测器假设图案块仅仅能在x和y方向上移动一个最大值。对于每个图案块，存在一个搜索区域，根据基本模型，在先前帧的这个区域内可以找到那个图案块。在使用等长步长的情况下，图案块逐渐移动通过搜索区域内的连续位置，并且每个位置都和旧图片进行比较。<br>位置变换也称为位移，如果某个位移达到了最佳的相似性或匹配结果，则它称为搜索后运动。然后，运动补偿帧的块将填充属于先前帧的块的内容，这将和前面搜索的图案块产生最佳的匹配。通过这种方式，运动补偿帧可以和瞬态帧尽可能地接近。</p>
<p>位移中的x和y成分通过侧向通道而传送到接受器，目的是可以从旧帧中构造运动补偿帧。对先前帧的内容执行这个操作，从而对已知图片进行这个操作，这就是这种编码技术的本质优点。</p>
<p>向量的数据速率取决于查找区域的带，从而取决于最大的位移，以及期望的向量的精确程度。对象的轮廓没有必要传送，原因是所有的对象具有相同的矩形。</p>
<p>P图像的VLC编码</p>
<p>VLC是可变长编码，VLC是统计编码技术，它的基本思想是：对出现频率较高的数值分配比特数较少的码字，而对出现频率较低的数值分配比特数较多的码字，因此从总的效果看，数据量比用均匀分配比特数的数据量要少。可变长编码是对Huffman编码的改进</p>
<p>P图像是参考过去的帧内图像或者过去预测得到得图像用运动补偿预测技术进行编码，P图像得编码也是以图像宏块为基本编码单元。预测编码得 基础是运动估值，它将直接影响到整个系统得编码效率和压缩性能，因此希望找到一种预测精度高同时计算量又小得运动估值算法。</p>
<p>正如I画面一样，每一幅P画面被分为一片或多片，每一片又被划分为若干宏块。对P画面的编码要比I画面复杂的多，因为要构造运动补偿宏块。运动补偿宏块与当前宏块的差值被一个二维的DCT变换为8x8的变换系数矩阵，这些系数在被量化成一组量化系数，最后，对量化后的系数采用行程长度技术编码。表3.11和3.12分别给出了P画面和B画面中所支持的宏块类型及VLC编码。</p>
<p>表3.11 P画面中的宏块类型及VLC编码</p>
<table>
<thead>
<tr>
<th>宏块类型</th>
<th>VLC码</th>
<th>INTRA</th>
<th>MOTION FORWARD</th>
<th>CODED PATTERN</th>
<th>QUANT</th>
</tr>
</thead>
<tbody><tr>
<td>pred_mc</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>pred_c</td>
<td>01</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>pred_m</td>
<td>001</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>intra_d</td>
<td>0001 1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>pred_mcq</td>
<td>0001 0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>pred_cq</td>
<td>0000 1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>intra_q</td>
<td>0000 01</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>skipped</td>
<td>无</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>表3.12 B画面中的宏块类型及VLC编码</p>
<table>
<thead>
<tr>
<th>宏块类型</th>
<th>VLC码</th>
<th>INTRA</th>
<th>MOTION FORWARD</th>
<th>MOTION BACKWARD</th>
<th>CODED PATTERN</th>
<th>QUANT</th>
</tr>
</thead>
<tbody><tr>
<td>pred_I</td>
<td>10</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>pred_ic</td>
<td>11</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>pred_b</td>
<td>010</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>pred_bc</td>
<td>011</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>pred_f</td>
<td>0010</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>pred_fc</td>
<td>0011</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>intra_d</td>
<td>0001 1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>pred_icq</td>
<td>0001 0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>pred_fcq</td>
<td>0000 11</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>pred_bcq</td>
<td>0000 10</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>intra_q</td>
<td>0000 01</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>skippde</td>
<td>无</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>每一帧B画面被划分成一片或多片，每一片又被划分为若干宏块。由于要构造几种类型的运动补偿宏块：前向、后向、插播，所以对B画面的编码要比对P画面复杂的多。首先用一个二维DCT将运动补偿宏块与当前块之间的差值变换为8x8的变换系数矩阵，然后对着些系数进行量化，产生一组量化的系数，最后对这些量化后的系数用行程长度技术进行编码。</p>
<p>编码器不需要存储解码的B画面，因为B画面不用于运动补偿。</p>
<p>B画面宏块比P画面多了 几种类型，如果仅有前向运动矢量，则像P画面那样，从前面的一帧画面种构造运动补偿宏块。如果仅有后向运动矢量，则从后面的一帧画面种构造运动补偿宏块。如果既有前向也有后向运动矢量，则从前面以及后面的画面种构造运动补偿宏块，对结果求平均，用以形成插补宏块。</p>
<p>如同需要存储I画面一样，编码器也需要存储解了码的P画面，一位该P画面很可能会作为运动补偿的开始点。因此，编码器将要从量化系数种重构该画面的图像。<br>H.264所支持的帧编码模式如表3.13所示。</p>
<p>表3.13 帧编码模式</p>
<table>
<thead>
<tr>
<th>帧类型</th>
<th>描述</th>
<th>支持的框架</th>
</tr>
</thead>
<tbody><tr>
<td>I(Intra)</td>
<td>只包含帧内预测的宏块(I)</td>
<td>全部</td>
</tr>
<tr>
<td>P(Predicted)</td>
<td>包含帧间预测宏块(P)和I型宏块</td>
<td>全部</td>
</tr>
<tr>
<td>B(Bi-Predictive)</td>
<td>包含帧间双向预测宏块(B)和I型宏块</td>
<td>扩展和主</td>
</tr>
<tr>
<td>SP(Switching P)</td>
<td>利于在编码的比特流中切换,包括I和P宏块</td>
<td>扩展</td>
</tr>
<tr>
<td>SI(Switching I)</td>
<td>利于在编码的比特流中切换,包含SI宏块(一种特殊的帧内编码宏块)</td>
<td>扩展</td>
</tr>
</tbody></table>
</font>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>H264</tag>
      </tags>
  </entry>
  <entry>
    <title>H.265与H.264的差异详解</title>
    <url>/2021/11/18/Android/audioVideo/%E6%96%87%E6%A1%A307-H264%E4%B8%8EH265%E7%9A%84%E5%8C%BA%E5%88%AB%E4%BA%8E%E5%B7%AE%E5%BC%82/</url>
    <content><![CDATA[<font size="2.9">


<h2 id="H-265与H-264的差异详解"><a href="#H-265与H-264的差异详解" class="headerlink" title="H.265与H.264的差异详解"></a>H.265与H.264的差异详解</h2><blockquote>
<p><strong>码牛只为跟牛逼的你</strong></p>
</blockquote>
<p>通过以下几种来对比H264与H265的差异</p>
<blockquote>
<p>1.编解码框架差异</p>
<p>2.压缩性能比较</p>
<p>3.各模块技术差异汇总</p>
<p>4.块划分结构</p>
<p>5.帧内预测</p>
<p>6.帧间预测</p>
<p>7.去块滤波</p>
<p>8.SAO滤波</p>
<p>9.Tile</p>
<p>10.WPP</p>
<p>11.Dependent slice</p>
<p>12.其他技术</p>
</blockquote>
<h4 id="1-1-H-264与H-265的主要差异"><a href="#1-1-H-264与H-265的主要差异" class="headerlink" title="1.1  H.264与H.265的主要差异"></a>1.1  H.264与H.265的主要差异</h4><p>H.265仍然采用混合编解码，编解码结构域H.264基本一致，</p>
<p>主要的不同在于：</p>
<p>Ø 编码块划分结构：采用CU (CodingUnit)、PU(PredictionUnit)和TU(TransformUnit)的递归结构。</p>
<p>Ø 基本细节：各功能块的内部细节有很多差异</p>
<p>Ø 并行工具：增加了Tile以及WPP等并行工具集以提高编码速度</p>
<p>Ø 滤波器：在去块滤波之后增加了SAO（sample adaptive offset）滤波模块</p>
<p><img src="https://img-blog.csdn.net/20170903222110391?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmlyZXJvbGw=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<p>Fig.H.265的框架图</p>
<h4 id="2-压缩性能比较"><a href="#2-压缩性能比较" class="headerlink" title="2.  压缩性能比较"></a>2.  压缩性能比较</h4><p>PSNR计算方式</p>
<p><img src="https://img-blog.csdn.net/20170903222300500?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmlyZXJvbGw=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<p>H.265/HEVC HM-9.0 和H.264 JM-18.4 的BD-rate 比较：</p>
<p> AllIntra case:           22%</p>
<p> RandomAccess case:       34%</p>
<p> LowDelay case:          37%</p>
<h4 id="3-各模块技术差异汇总"><a href="#3-各模块技术差异汇总" class="headerlink" title="3.  各模块技术差异汇总"></a>3.  各模块技术差异汇总</h4><p><img src="https://img-blog.csdn.net/20170903222335956?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmlyZXJvbGw=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<p><img src="https://img-blog.csdn.net/20170903222351940?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmlyZXJvbGw=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<h4 id="4-块划分结构"><a href="#4-块划分结构" class="headerlink" title="4.  块划分结构"></a>4.  块划分结构</h4><p>在H.265中，将宏块的大小从H.264的16×16扩展到了64×64，以便于高分辨率视频的压缩。</p>
<p>同时，采用了更加灵活的编码结构来提高编码效率，</p>
<p>包括编码单元（CodingUnit）、预测单元（PredictUnit）和变换单元（TransformUnit）。</p>
<p>如下图所示:</p>
<p><img src="https://img-blog.csdn.net/20170903222441671?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmlyZXJvbGw=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<p>其中:</p>
<p>编码单元类似于H.264/AVC中的宏块的概念，用于编码的过程。</p>
<p>预测单元是进行预测的基本单元，</p>
<p>变换单元是进行变换和量化的基本单元。</p>
<p>这三个单元的分离，使得变换、预测和编码各个处理环节更加灵活，</p>
<p>也有利于各环节的划分更加符合视频图像的纹理特征，</p>
<p>有利于各个单元更优化的完成各自的功能。</p>
<p><img src="https://img-blog.csdn.net/20170903222542263?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmlyZXJvbGw=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<p>RQT是一种自适应的变换技术，这种思想是对H.264/AVC中ABT（AdaptiveBlock-size Transform）技术的延伸和扩展。</p>
<p>对于帧间编码来说，它允许变换块的大小根据运动补偿块的大小进行自适应的调整；</p>
<p>对于帧内编码来说，它允许变换块的大小根据帧内预测残差的特性进行自适应的调整。</p>
<p>大块的变换相对于小块的变换，一方面能够提供更好的能量集中效果，并能在量化后保存更多的图像细节，但是另一方面在量化后却会带来更多的振铃效应。</p>
<p>因此，根据当前块信号的特性，自适应的选择变换块大小，如下图所示，可以得到能量集中、细节保留程度以及图像的振铃效应三者最优的折中。</p>
<p><img src="https://img-blog.csdn.net/20170903222512555?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmlyZXJvbGw=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<p>Fig. 灵活的块结构示意图</p>
<h4 id="5-帧内预测模式"><a href="#5-帧内预测模式" class="headerlink" title="5.  帧内预测模式"></a>5.  帧内预测模式</h4><p>本质上H.265是在H.264的预测方向基础上增加了更多的预测方向</p>
<p>H.265：所有尺寸的CU块，亮度有35种预测方向，色度有5种预测方向</p>
<p>H.264：亮度 4x4块9个方向，8x8块9个方向，16x16块4种方向，色度4种方向</p>
<p> <img src="https://img-blog.csdn.net/20170903222603597?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmlyZXJvbGw=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<p>H.264的帧内预测方向:</p>
<p> <img src="https://img-blog.csdn.net/20170903222635669?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmlyZXJvbGw=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<p>H.265的帧内预测方向：</p>
<h4 id="6-帧间预测"><a href="#6-帧间预测" class="headerlink" title="6.  帧间预测"></a>6.  帧间预测</h4><p>本质上H.265是在H.264基础上增加插值的抽头系数个数，改变抽头系数值以及增加运动矢量预测值的候选个数，以达到减少预测残差的目的。</p>
<p>H.265与H.264一样插值精度都是亮度到1/4，色度到1/8精度，但插值滤波器抽头长度和系数不同.</p>
<p>H.265的增加了运动矢量预测值候选的个数，而H.264预测值只有一个</p>
<p> <img src="https://img-blog.csdn.net/20170903222712796?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmlyZXJvbGw=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<p>H.265的空域候选项：</p>
<p><img src="https://img-blog.csdn.net/20170903222726452?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmlyZXJvbGw=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<p>H.265时域共同位置候选项</p>
<h4 id="7-去块滤波"><a href="#7-去块滤波" class="headerlink" title="7.  去块滤波"></a>7.  去块滤波</h4><p>本质上H.265的去块滤波与H.264的去块滤波及流程是一致的，做了如下最显著的改变：</p>
<p>Ø 滤波边界： H.264最小到4x4边界滤波；而H.265适应最新的CU、PU和TU划分结构的滤波边缘，最小滤波边界为8x8，</p>
<p>Ø 滤波顺序：H264先宏块内采用垂直边界，再当前宏块内水平边界；而H.265先整帧的垂直边界，再整帧的水平边界</p>
<p>ALF在编解码环路内，位于Deblock和SAO之后，</p>
<p>用于恢复重建图像以达到重建图像与原始图像之间的均方差（MSE）最小。</p>
<p>ALF的系数是在帧级计算和传输的，可以整帧应用ALF，</p>
<p>也可以对于基于块或基于量化树（quadtree）的部分区域进行ALF，</p>
<p>如果是基于部分区域的ALF，还必须传递指示区域信息的附加信息。</p>
<h4 id="8-采样点自适应偏移（Sample-AdaptiveOffset）滤波"><a href="#8-采样点自适应偏移（Sample-AdaptiveOffset）滤波" class="headerlink" title="8.  采样点自适应偏移（Sample AdaptiveOffset）滤波"></a>8.  采样点自适应偏移（Sample AdaptiveOffset）滤波</h4><p>SAO(sample adaptive offset)滤波其实就是对去块滤波后的重建像素按照不同的模板进行分类，并对每一种分类像素进行补偿, 分类模板分为BO(Band offset)和EO(Edge offset)。</p>
<p> <img src="https://img-blog.csdn.net/20170903222824890?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmlyZXJvbGw=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<p>BO分类：</p>
<p> <img src="https://img-blog.csdn.net/20170903222838657?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmlyZXJvbGw=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<p>EO分类模块：</p>
<p>SAO在编解码环路内，位于Deblock之后，通过对重建图像的分类，对每一类图像像素值加减一个偏移，达到减少失真的目的，从而提高压缩率，减少码流。</p>
<p>采用SAO后，平均可以减少2%~6%的码流,而编码器和解码器的性能消耗仅仅增加了约2%。</p>
<h4 id="9-Tile划分"><a href="#9-Tile划分" class="headerlink" title="9.  Tile划分"></a>9.  Tile划分</h4><p>Tile： 将图像分割为矩形区域。</p>
<p>其主要目的是增强并行处理性能。</p>
<p>每个tile区域相当于一幅子图像，可独立的以LCU块为单位进行编解码。</p>
<p>一个Tile块为基本的并行单元，每个Tile为一个子码流</p>
<p> <img src="https://img-blog.csdn.net/20170903222909352?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmlyZXJvbGw=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<p>\10. WPP</p>
<p>WPP:  全称为wavefront parallel process，以LCU行为基本的编码单位。</p>
<p>以一行LCU块为基本的并行单元，每一行LCU为一个子码流</p>
<p> <img src="https://img-blog.csdn.net/20170903222931315?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmlyZXJvbGw=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<p>\11. Dependentslice</p>
<p>Dependent slice：该技术可以理解为对原先Slice NALU的数据划分，使其可以适合更加灵活的打包方式。</p>
<p>Slice 和dependent slice 的示意图如下</p>
<p><img src="https://img-blog.csdn.net/20170903223007796?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmlyZXJvbGw=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<p>\12. 其他相关技术</p>
<p>Ø Transform_skip模式：transform_skip_flag，该模式不进行变换，但是要进行量化，该模式对文本桌面视频有较好效果</p>
<p>Ø 内部比特深度增加：为了保证中间预测、变换以及量化过程中的内部比特精度，以达到更好的压缩性能</p>
</font>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>H264</tag>
      </tags>
  </entry>
</search>
